
robot-f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800ad60  0800ad60  0001ad60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a0  0800b3a0  00020394  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a8  0800b3a8  00020394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3ac  0800b3ac  0001b3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0800b3b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000398  0800b744  00020398  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800b744  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4e9  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041c1  00000000  00000000  0003f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00043a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00044cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027969  00000000  00000000  00045d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ed5  00000000  00000000  0006d6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e08fd  00000000  00000000  0008658e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  00166ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016cbe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016cc24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000398 	.word	0x20000398
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad48 	.word	0x0800ad48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000039c 	.word	0x2000039c
 800020c:	0800ad48 	.word	0x0800ad48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AX12_Init>:
#include <AX12.h>


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	715a      	strb	r2, [r3, #5]

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fc3a 	bl	800088c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fde2 	bl	8000be8 <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	461a      	mov	r2, r3
 800104c:	2106      	movs	r1, #6
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9c2 	bl	80013d8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001054:	8abb      	ldrh	r3, [r7, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	2108      	movs	r1, #8
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9bc 	bl	80013d8 <AX12_sendTram2Byte>

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2c54bf16 	.word	0x2c54bf16
 800106c:	3fd2c4b1 	.word	0x3fd2c4b1

08001070 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <AX12_setMaxTorque+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fbf9 	bl	800088c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	210e      	movs	r1, #14
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f991 	bl	80013d8 <AX12_sendTram2Byte>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	905eab89 	.word	0x905eab89
 80010c4:	3fb90641 	.word	0x3fb90641

080010c8 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2118      	movs	r1, #24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f966 	bl	80013ac <AX12_sendTram1Byte>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa2e 	bl	8000564 <__aeabi_i2d>
 8001108:	a30b      	add	r3, pc, #44	; (adr r3, 8001138 <AX12_setPosition+0x50>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbbd 	bl	800088c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	211e      	movs	r1, #30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f955 	bl	80013d8 <AX12_sendTram2Byte>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2c54bf16 	.word	0x2c54bf16
 800113c:	3fd2c4b1 	.word	0x3fd2c4b1

08001140 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa02 	bl	8000564 <__aeabi_i2d>
 8001160:	a30b      	add	r3, pc, #44	; (adr r3, 8001190 <AX12_setMovingSpeed+0x50>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb91 	bl	800088c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd39 	bl	8000be8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	2120      	movs	r1, #32
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f929 	bl	80013d8 <AX12_sendTram2Byte>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c83ed809 	.word	0xc83ed809
 8001194:	3fbc8721 	.word	0x3fbc8721

08001198 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001198:	b408      	push	{r3}
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
 80011ac:	466b      	mov	r3, sp
 80011ae:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80011b6:	78fc      	ldrb	r4, [r7, #3]
 80011b8:	4623      	mov	r3, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	b2e0      	uxtb	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	00cb      	lsls	r3, r1, #3
 80011e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011e8:	00c2      	lsls	r2, r0, #3
 80011ea:	4623      	mov	r3, r4
 80011ec:	3307      	adds	r3, #7
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ebad 0d03 	sub.w	sp, sp, r3
 80011f6:	ab02      	add	r3, sp, #8
 80011f8:	3300      	adds	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001210:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001214:	3302      	adds	r3, #2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e00b      	b.n	8001240 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3301      	adds	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ee      	bcc.n	8001228 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 800124a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800124e:	2b03      	cmp	r3, #3
 8001250:	d867      	bhi.n	8001322 <AX12_sendData+0x18a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <AX12_sendData+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001291 	.word	0x08001291
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012ed 	.word	0x080012ed
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7898      	ldrb	r0, [r3, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	78d9      	ldrb	r1, [r3, #3]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	1e5c      	subs	r4, r3, #1
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f000 f861 	bl	8001348 <AX12_calculChecksum>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	e049      	b.n	8001324 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7898      	ldrb	r0, [r3, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	78d9      	ldrb	r1, [r3, #3]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795d      	ldrb	r5, [r3, #5]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	1e5c      	subs	r4, r3, #1
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	f000 f84b 	bl	8001348 <AX12_calculChecksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	551a      	strb	r2, [r3, r4]
 80012ba:	e033      	b.n	8001324 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7898      	ldrb	r0, [r3, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791d      	ldrb	r5, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	795e      	ldrb	r6, [r3, #5]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	1e54      	subs	r4, r2, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4633      	mov	r3, r6
 80012dc:	462a      	mov	r2, r5
 80012de:	f000 f833 	bl	8001348 <AX12_calculChecksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	551a      	strb	r2, [r3, r4]
 80012ea:	e01b      	b.n	8001324 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7898      	ldrb	r0, [r3, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	78dd      	ldrb	r5, [r3, #3]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	791e      	ldrb	r6, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 c005 	ldrb.w	ip, [r3, #5]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	79d2      	ldrb	r2, [r2, #7]
 8001306:	78f9      	ldrb	r1, [r7, #3]
 8001308:	1e4c      	subs	r4, r1, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4663      	mov	r3, ip
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	f000 f818 	bl	8001348 <AX12_calculChecksum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	551a      	strb	r2, [r3, r4]
 8001320:	e000      	b.n	8001324 <AX12_sendData+0x18c>
	default : break;
 8001322:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	b29a      	uxth	r2, r3
 800132e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001332:	f004 ff4a 	bl	80061ca <HAL_UART_Transmit>
 8001336:	46c5      	mov	sp, r8
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b001      	add	sp, #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b29a      	uxth	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	7e3b      	ldrb	r3, [r7, #24]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	43db      	mvns	r3, r3
 8001396:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2203      	movs	r2, #3
 80013c8:	2108      	movs	r1, #8
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee4 	bl	8001198 <AX12_sendData>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bf9      	ldrb	r1, [r7, #15]
 80013fa:	9102      	str	r1, [sp, #8]
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2203      	movs	r2, #3
 8001404:	2109      	movs	r1, #9
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fec6 	bl	8001198 <AX12_sendData>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <DRV8825_init>:
#include "DRV8825.h"

void DRV8825_init(Moteur *drv8825,uint16_t PIN_EN, GPIO_TypeDef * GPIO_EN, uint16_t PIN_DIR, GPIO_TypeDef * GPIO_DIR,TIM_HandleTypeDef* timer, uint8_t chanel){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
	/*****************************************
	 * nous récupérons les numéros des pins  *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->pin_EN = PIN_EN;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	897a      	ldrh	r2, [r7, #10]
 800142c:	815a      	strh	r2, [r3, #10]
	drv8825->pin_DIR = PIN_DIR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	801a      	strh	r2, [r3, #0]
	/*****************************************
	 * nous récupérons les GPIO des pins     *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->gpio_EN= GPIO_EN;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
	drv8825->gpio_DIR= GPIO_DIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]

	/**********************************************
	 * nous initialisatons le timer et récupérons *
	 * à quelle chanel il est racroché 			  *
	 **********************************************/
	drv8825->timer = timer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
	drv8825->chanel = chanel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800144c:	751a      	strb	r2, [r3, #20]

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DRV8825_setDir>:

void DRV8825_setDir(Moteur* drv8825,uint8_t dir){
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(drv8825->gpio_DIR,drv8825->pin_DIR,dir);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6858      	ldr	r0, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	f002 fecf 	bl	8004214 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <DRV8825_setStart>:

void DRV8825_setStart(Moteur* drv8825,uint8_t enable){
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(drv8825->gpio_EN,drv8825->pin_EN,enable);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d8      	ldr	r0, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	895b      	ldrh	r3, [r3, #10]
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	f002 febd 	bl	8004214 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <DRV8825_moveMotorLineSpeed>:
	rpm = rpm/M_TO_S;
	uint16_t f = PAS*rpm;
	DRV8825_setFrequency(drv8825, f);
}

void DRV8825_moveMotorLineSpeed(Moteur* drv8825,float vitesse){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	ed87 0a00 	vstr	s0, [r7]
	vitesse= vitesse*1000;
 80014b4:	edd7 7a00 	vldr	s15, [r7]
 80014b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001510 <DRV8825_moveMotorLineSpeed+0x68>
 80014bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c0:	edc7 7a00 	vstr	s15, [r7]
	uint16_t f = (PAS*vitesse)/(2*M_PI*RAYON);
 80014c4:	edd7 7a00 	vldr	s15, [r7]
 80014c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001514 <DRV8825_moveMotorLineSpeed+0x6c>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_f2d>
 80014d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001508 <DRV8825_moveMotorLineSpeed+0x60>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9d5 	bl	800088c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb7d 	bl	8000be8 <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
	DRV8825_setFrequency(drv8825, f);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f80e 	bl	8001518 <DRV8825_setFrequency>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	71f1350d 	.word	0x71f1350d
 800150c:	40643451 	.word	0x40643451
 8001510:	447a0000 	.word	0x447a0000
 8001514:	43480000 	.word	0x43480000

08001518 <DRV8825_setFrequency>:

void DRV8825_setFrequency(Moteur* drv8825, uint16_t freq){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if(freq != 0){
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <DRV8825_setFrequency+0x2a>
	drv8825->timer->Init.Prescaler = 179;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	22b3      	movs	r2, #179	; 0xb3
 8001530:	605a      	str	r2, [r3, #4]
	drv8825->timer->Init.Period = (uint32_t)1000000/freq;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4945      	ldr	r1, [pc, #276]	; (8001650 <DRV8825_setFrequency+0x138>)
 800153a:	fbb1 f2f2 	udiv	r2, r1, r2
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e009      	b.n	8001556 <DRV8825_setFrequency+0x3e>
	}
	else{
		drv8825->timer->Init.Prescaler = 0xFFFE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800154a:	605a      	str	r2, [r3, #4]
		drv8825->timer->Init.Period = 0xFFFE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001554:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(drv8825->timer) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fc2e 	bl	8004dbc <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <DRV8825_setFrequency+0x52>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001566:	f000 fdc1 	bl	80020ec <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(drv8825->timer) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fce4 	bl	8004f3c <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <DRV8825_setFrequency+0x66>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 800157a:	f000 fdb7 	bl	80020ec <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(drv8825->timer, drv8825->chanel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7d1b      	ldrb	r3, [r3, #20]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f003 fd31 	bl	8004ff0 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch(drv8825->chanel){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7d1b      	ldrb	r3, [r3, #20]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d858      	bhi.n	8001648 <DRV8825_setFrequency+0x130>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DRV8825_setFrequency+0x84>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001649 	.word	0x08001649
 80015a4:	08001649 	.word	0x08001649
 80015a8:	08001649 	.word	0x08001649
 80015ac:	080015ef 	.word	0x080015ef
 80015b0:	08001649 	.word	0x08001649
 80015b4:	08001649 	.word	0x08001649
 80015b8:	08001649 	.word	0x08001649
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	08001649 	.word	0x08001649
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	0800162b 	.word	0x0800162b
	case(TIM_CHANNEL_1):drv8825->timer->Instance->CCR1 = (50*drv8825->timer->Init.Period)/100;break;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2232      	movs	r2, #50	; 0x32
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	491c      	ldr	r1, [pc, #112]	; (8001654 <DRV8825_setFrequency+0x13c>)
 80015e4:	fba1 1202 	umull	r1, r2, r1, r2
 80015e8:	0952      	lsrs	r2, r2, #5
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e02c      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_2):drv8825->timer->Instance->CCR2 = (50*drv8825->timer->Init.Period)/100;break;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001602:	fba1 1202 	umull	r1, r2, r1, r2
 8001606:	0952      	lsrs	r2, r2, #5
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
 800160a:	e01d      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_3):drv8825->timer->Instance->CCR3 = (50*drv8825->timer->Init.Period)/100;break;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001620:	fba1 1202 	umull	r1, r2, r1, r2
 8001624:	0952      	lsrs	r2, r2, #5
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	e00e      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_4):drv8825->timer->Instance->CCR4 = (50*drv8825->timer->Init.Period)/100;break;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2232      	movs	r2, #50	; 0x32
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <DRV8825_setFrequency+0x13c>)
 800163e:	fba1 1202 	umull	r1, r2, r1, r2
 8001642:	0952      	lsrs	r2, r2, #5
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	bf00      	nop
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	000f4240 	.word	0x000f4240
 8001654:	51eb851f 	.word	0x51eb851f

08001658 <initPinces>:
}

/* Pinces */

uint8_t id_pinces[4] = {3,7,1,2}; // 1,2,3,7
void initPinces(){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	e03f      	b.n	80016e4 <initPinces+0x8c>
		AX12_Init(&pinces[i],&huart3,id_pinces[i],BR_250K);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <initPinces+0xa0>)
 800166a:	1898      	adds	r0, r3, r2
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <initPinces+0xa4>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	2307      	movs	r3, #7
 8001676:	4922      	ldr	r1, [pc, #136]	; (8001700 <initPinces+0xa8>)
 8001678:	f7ff fca2 	bl	8000fc0 <AX12_Init>
		AX12_setMaxTorque(&pinces[i],100);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <initPinces+0xa0>)
 8001682:	4413      	add	r3, r2
 8001684:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001704 <initPinces+0xac>
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fcf1 	bl	8001070 <AX12_setMaxTorque>
		AX12_setRangeAngle(&pinces[i], ANGLE_PINCE_CATCH,ANGLE_STARTUP);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <initPinces+0xa0>)
 8001694:	4413      	add	r3, r2
 8001696:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001708 <initPinces+0xb0>
 800169a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fcaa 	bl	8000ff8 <AX12_setRangeAngle>
		AX12_setMovingSpeed(&pinces[i], 80);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <initPinces+0xa0>)
 80016aa:	4413      	add	r3, r2
 80016ac:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800170c <initPinces+0xb4>
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd45 	bl	8001140 <AX12_setMovingSpeed>
		AX12_TorqueE_D(&pinces[i],TRUE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <initPinces+0xa0>)
 80016bc:	4413      	add	r3, r2
 80016be:	2101      	movs	r1, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd01 	bl	80010c8 <AX12_TorqueE_D>
		HAL_Delay(250);
 80016c6:	20fa      	movs	r0, #250	; 0xfa
 80016c8:	f001 ffd6 	bl	8003678 <HAL_Delay>
		AX12_setPosition(&pinces[i], ANGLE_STARTUP);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <initPinces+0xa0>)
 80016d2:	4413      	add	r3, r2
 80016d4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001708 <initPinces+0xb0>
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd05 	bl	80010e8 <AX12_setPosition>
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	ddbc      	ble.n	8001664 <initPinces+0xc>
	}
	HAL_Delay(250);
 80016ea:	20fa      	movs	r0, #250	; 0xfa
 80016ec:	f001 ffc4 	bl	8003678 <HAL_Delay>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200003e0 	.word	0x200003e0
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000798 	.word	0x20000798
 8001704:	42c80000 	.word	0x42c80000
 8001708:	42dc0000 	.word	0x42dc0000
 800170c:	42a00000 	.word	0x42a00000

08001710 <initFlag>:
	AX12_setPosition(ax12, ANGLE_PINCE_RELEASE);
}

/* Pavillons */

void initFlag(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	AX12_Init(&flag,&huart3,9,BR_250K); // 9
 8001714:	2307      	movs	r3, #7
 8001716:	2209      	movs	r2, #9
 8001718:	4912      	ldr	r1, [pc, #72]	; (8001764 <initFlag+0x54>)
 800171a:	4813      	ldr	r0, [pc, #76]	; (8001768 <initFlag+0x58>)
 800171c:	f7ff fc50 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&flag,100);
 8001720:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800176c <initFlag+0x5c>
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <initFlag+0x58>)
 8001726:	f7ff fca3 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&flag, ANGLE_FLAG_DEPLOY,ANGLE_FLAG_REPOS);
 800172a:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001770 <initFlag+0x60>
 800172e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <initFlag+0x58>)
 8001734:	f7ff fc60 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&flag, 80);
 8001738:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001774 <initFlag+0x64>
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <initFlag+0x58>)
 800173e:	f7ff fcff 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&flag,TRUE);
 8001742:	2101      	movs	r1, #1
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <initFlag+0x58>)
 8001746:	f7ff fcbf 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800174a:	20fa      	movs	r0, #250	; 0xfa
 800174c:	f001 ff94 	bl	8003678 <HAL_Delay>
	AX12_setPosition(&flag, ANGLE_FLAG_REPOS);
 8001750:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001770 <initFlag+0x60>
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <initFlag+0x58>)
 8001756:	f7ff fcc7 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800175a:	20fa      	movs	r0, #250	; 0xfa
 800175c:	f001 ff8c 	bl	8003678 <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000798 	.word	0x20000798
 8001768:	200003d8 	.word	0x200003d8
 800176c:	42c80000 	.word	0x42c80000
 8001770:	42c00000 	.word	0x42c00000
 8001774:	42a00000 	.word	0x42a00000

08001778 <raiseFlag>:

void raiseFlag(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
 800177c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <raiseFlag+0x14>)
 8001782:	f7ff fcb1 	bl	80010e8 <AX12_setPosition>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200003d8 	.word	0x200003d8

08001790 <initBras>:
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
}

/* Bras */

void initBras(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	AX12_Init(&bras,&huart3,4,BR_250K);
 8001794:	2307      	movs	r3, #7
 8001796:	2204      	movs	r2, #4
 8001798:	4912      	ldr	r1, [pc, #72]	; (80017e4 <initBras+0x54>)
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <initBras+0x58>)
 800179c:	f7ff fc10 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&bras,100);
 80017a0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80017ec <initBras+0x5c>
 80017a4:	4810      	ldr	r0, [pc, #64]	; (80017e8 <initBras+0x58>)
 80017a6:	f7ff fc63 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&bras, 0,ANGLE_STARTUP);
 80017aa:	eddf 0a11 	vldr	s1, [pc, #68]	; 80017f0 <initBras+0x60>
 80017ae:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80017f4 <initBras+0x64>
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <initBras+0x58>)
 80017b4:	f7ff fc20 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&bras, 80);
 80017b8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80017f8 <initBras+0x68>
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <initBras+0x58>)
 80017be:	f7ff fcbf 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&bras,TRUE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <initBras+0x58>)
 80017c6:	f7ff fc7f 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 80017ca:	20fa      	movs	r0, #250	; 0xfa
 80017cc:	f001 ff54 	bl	8003678 <HAL_Delay>
	AX12_setPosition(&bras, ANGLE_STARTUP);
 80017d0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80017f0 <initBras+0x60>
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <initBras+0x58>)
 80017d6:	f7ff fc87 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 80017da:	20fa      	movs	r0, #250	; 0xfa
 80017dc:	f001 ff4c 	bl	8003678 <HAL_Delay>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000798 	.word	0x20000798
 80017e8:	200003d0 	.word	0x200003d0
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	42dc0000 	.word	0x42dc0000
 80017f4:	00000000 	.word	0x00000000
 80017f8:	42a00000 	.word	0x42a00000

080017fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_ADC1_Init+0x98>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <MX_ADC1_Init+0x9c>)
 8001812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_ADC1_Init+0x98>)
 8001816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_ADC1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_ADC1_Init+0x98>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_ADC1_Init+0xa0>)
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_ADC1_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_ADC1_Init+0x98>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_ADC1_Init+0x98>)
 800185e:	f001 ff2f 	bl	80036c0 <HAL_ADC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001868:	f000 fc40 	bl	80020ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800186c:	2304      	movs	r3, #4
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_ADC1_Init+0x98>)
 800187e:	f001 ff63 	bl	8003748 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 fc30 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000404 	.word	0x20000404
 8001898:	40012000 	.word	0x40012000
 800189c:	0f000001 	.word	0x0f000001

080018a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_ADC_MspInit+0x7c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d127      	bne.n	8001912 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Tirette_Alternative_Pin;
 80018fa:	2310      	movs	r3, #16
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Tirette_Alternative_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_ADC_MspInit+0x84>)
 800190e:	f002 faed 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <ASSERV_update>:
    }
}

int first = 0;

void ASSERV_update(CONSIGNE point, CONSIGNE previous) {
 8001928:	b084      	sub	sp, #16
 800192a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001936:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ODO_odometrie();
 800193a:	f000 fce1 	bl	8002300 <ODO_odometrie>

	double spin;
	if (first == 0) {
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <ASSERV_update+0x150>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d141      	bne.n	80019ca <ASSERV_update+0xa2>
		spin = (M_PI/2 - g_angle) * 3;
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <ASSERV_update+0x154>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	a142      	add	r1, pc, #264	; (adr r1, 8001a58 <ASSERV_update+0x130>)
 800194e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001952:	f7fe fcb9 	bl	80002c8 <__aeabi_dsub>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <ASSERV_update+0x158>)
 8001964:	f7fe fe68 	bl	8000638 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (fabs(M_PI/2 - g_angle)*360.0/M_TWOPI < 0.1) {
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <ASSERV_update+0x154>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	a138      	add	r1, pc, #224	; (adr r1, 8001a58 <ASSERV_update+0x130>)
 8001978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800197c:	f7fe fca4 	bl	80002c8 <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4690      	mov	r8, r2
 8001986:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <ASSERV_update+0x15c>)
 8001990:	4640      	mov	r0, r8
 8001992:	4649      	mov	r1, r9
 8001994:	f7fe fe50 	bl	8000638 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	a32f      	add	r3, pc, #188	; (adr r3, 8001a60 <ASSERV_update+0x138>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe ff71 	bl	800088c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	a32d      	add	r3, pc, #180	; (adr r3, 8001a68 <ASSERV_update+0x140>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7ff f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d014      	beq.n	80019ec <ASSERV_update+0xc4>
			first = 1;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <ASSERV_update+0x150>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e010      	b.n	80019ec <ASSERV_update+0xc4>
		}
	} else {
		spin = -g_angle * 3;
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <ASSERV_update+0x154>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	4614      	mov	r4, r2
 80019d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <ASSERV_update+0x158>)
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fe2a 	bl	8000638 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	setMotors(spin, -spin);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	ed97 1b00 	vldr	d1, [r7]
 80019fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a00:	f000 fbce 	bl	80021a0 <setMotors>

	printf("angle: %f\r\n", g_angle/M_PI/2*360);
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <ASSERV_update+0x154>)
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	a319      	add	r3, pc, #100	; (adr r3, 8001a70 <ASSERV_update+0x148>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff3c 	bl	800088c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a24:	f7fe ff32 	bl	800088c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <ASSERV_update+0x15c>)
 8001a36:	f7fe fdff 	bl	8000638 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4812      	ldr	r0, [pc, #72]	; (8001a88 <ASSERV_update+0x160>)
 8001a40:	f005 ff1c 	bl	800787c <iprintf>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4e:	b004      	add	sp, #16
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	3ff921fb 	.word	0x3ff921fb
 8001a60:	54442d18 	.word	0x54442d18
 8001a64:	401921fb 	.word	0x401921fb
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	3fb99999 	.word	0x3fb99999
 8001a70:	54442d18 	.word	0x54442d18
 8001a74:	400921fb 	.word	0x400921fb
 8001a78:	200003b4 	.word	0x200003b4
 8001a7c:	200004f0 	.word	0x200004f0
 8001a80:	40080000 	.word	0x40080000
 8001a84:	40768000 	.word	0x40768000
 8001a88:	0800ad60 	.word	0x0800ad60

08001a8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a44      	ldr	r2, [pc, #272]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_GPIO_Init+0x130>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 0107 	movw	r1, #2055	; 0x807
 8001b34:	4822      	ldr	r0, [pc, #136]	; (8001bc0 <MX_GPIO_Init+0x134>)
 8001b36:	f002 fb6d 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <MX_GPIO_Init+0x138>)
 8001b40:	f002 fb68 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin;
 8001b44:	f640 0307 	movw	r3, #2055	; 0x807
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <MX_GPIO_Init+0x134>)
 8001b5e:	f002 f9c5 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b62:	2320      	movs	r3, #32
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <MX_GPIO_Init+0x138>)
 8001b7a:	f002 f9b7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo4_Pin|Echo3_Pin|Echo2_Pin;
 8001b7e:	f24e 0302 	movw	r3, #57346	; 0xe002
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_GPIO_Init+0x13c>)
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <MX_GPIO_Init+0x140>)
 8001b94:	f002 f9aa 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tirette_Pin;
 8001b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_GPIO_Init+0x134>)
 8001bae:	f002 f99d 	bl	8003eec <HAL_GPIO_Init>

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	10110000 	.word	0x10110000
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <decodeMsgIHM>:
#include "ihm.h"

int decodeMsgIHM(char *trame){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

	char header = trame[0];
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	73fb      	strb	r3, [r7, #15]

	switch(header){
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b4d      	cmp	r3, #77	; 0x4d
 8001be2:	d017      	beq.n	8001c14 <decodeMsgIHM+0x44>
 8001be4:	2b4d      	cmp	r3, #77	; 0x4d
 8001be6:	dc1e      	bgt.n	8001c26 <decodeMsgIHM+0x56>
 8001be8:	2b42      	cmp	r3, #66	; 0x42
 8001bea:	d00a      	beq.n	8001c02 <decodeMsgIHM+0x32>
 8001bec:	2b4a      	cmp	r3, #74	; 0x4a
 8001bee:	d11a      	bne.n	8001c26 <decodeMsgIHM+0x56>
		case 'J' :
			port_depart = JAUNE;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <decodeMsgIHM+0x64>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
			initStrategie();
 8001bf6:	f000 f943 	bl	8001e80 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Jaune\r\n");
 8001bfa:	480f      	ldr	r0, [pc, #60]	; (8001c38 <decodeMsgIHM+0x68>)
 8001bfc:	f005 fec4 	bl	8007988 <puts>
			#endif
			break;
 8001c00:	e012      	b.n	8001c28 <decodeMsgIHM+0x58>

		case 'B' :
			port_depart = BLEU;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <decodeMsgIHM+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
			initStrategie();
 8001c08:	f000 f93a 	bl	8001e80 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Bleu\r\n");
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <decodeMsgIHM+0x6c>)
 8001c0e:	f005 febb 	bl	8007988 <puts>
			#endif
			break;
 8001c12:	e009      	b.n	8001c28 <decodeMsgIHM+0x58>

		case 'M' :
			initStrategie();
 8001c14:	f000 f934 	bl	8001e80 <initStrategie>
			//HAL_TIM_Base_Start_IT(&htim2);
			match_started = TRUE;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <decodeMsgIHM+0x70>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
			#if MODULE_DEBUG == 1
				printf("Go!\r\n");
 8001c1e:	4809      	ldr	r0, [pc, #36]	; (8001c44 <decodeMsgIHM+0x74>)
 8001c20:	f005 feb2 	bl	8007988 <puts>
			#endif
			break;
 8001c24:	e000      	b.n	8001c28 <decodeMsgIHM+0x58>

		default :
			break;
 8001c26:	bf00      	nop
	}

	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200003c8 	.word	0x200003c8
 8001c38:	0800ad6c 	.word	0x0800ad6c
 8001c3c:	0800ad8c 	.word	0x0800ad8c
 8001c40:	200003cc 	.word	0x200003cc
 8001c44:	0800adac 	.word	0x0800adac

08001c48 <getLidarData2>:
	#endif
	*/

}

void getLidarData2(){
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
	char header = lidarRawData[0];
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <getLidarData2+0x40>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]

	#if MODULE_DEBUG == 1 && DEBUG_LIDAR
	printf("header = %c\r\n", header);
	#endif

	switch(header){
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b42      	cmp	r3, #66	; 0x42
 8001c58:	d002      	beq.n	8001c60 <getLidarData2+0x18>
 8001c5a:	2b46      	cmp	r3, #70	; 0x46
 8001c5c:	d007      	beq.n	8001c6e <getLidarData2+0x26>
			StopFront = 1;
			cpt_front = 0;
			break;

		default :
			break;
 8001c5e:	e00d      	b.n	8001c7c <getLidarData2+0x34>
			StopBack = 1;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <getLidarData2+0x44>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
			cpt_back = 0;
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <getLidarData2+0x48>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
			break;
 8001c6c:	e006      	b.n	8001c7c <getLidarData2+0x34>
			StopFront = 1;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <getLidarData2+0x4c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
			cpt_front = 0;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <getLidarData2+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
			break;
 8001c7a:	bf00      	nop
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	2000047c 	.word	0x2000047c
 8001c8c:	2000054c 	.word	0x2000054c
 8001c90:	200004fc 	.word	0x200004fc
 8001c94:	200004f8 	.word	0x200004f8
 8001c98:	200004bc 	.word	0x200004bc

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca2:	f001 fc77 	bl	8003594 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f847 	bl	8001d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff feef 	bl	8001a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cae:	f001 fa5b 	bl	8003168 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001cb2:	f000 fdf1 	bl	8002898 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001cb6:	f000 ff55 	bl	8002b64 <MX_TIM8_Init>
  MX_TIM11_Init();
 8001cba:	f000 fff3 	bl	8002ca4 <MX_TIM11_Init>
  MX_UART4_Init();
 8001cbe:	f001 f9d5 	bl	800306c <MX_UART4_Init>
  MX_UART5_Init();
 8001cc2:	f001 f9fd 	bl	80030c0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001cc6:	f001 fa79 	bl	80031bc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001cca:	f000 fe8b 	bl	80029e4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001cce:	f000 ff13 	bl	8002af8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001cd2:	f001 fa1f 	bl	8003114 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001cd6:	f000 fe37 	bl	8002948 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001cda:	f7ff fd8f 	bl	80017fc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001cde:	f000 fed5 	bl	8002a8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  initSerials();
 8001ce2:	f000 f8bd 	bl	8001e60 <initSerials>

  port_depart = BLEU;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <main+0x8c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
  initStrategie();
 8001cec:	f000 f8c8 	bl	8001e80 <initStrategie>

  initMoteurs();
 8001cf0:	f000 fa04 	bl	80020fc <initMoteurs>
  initPinces();
 8001cf4:	f7ff fcb0 	bl	8001658 <initPinces>
  initBras();
 8001cf8:	f7ff fd4a 	bl	8001790 <initBras>
  initFlag();
 8001cfc:	f7ff fd08 	bl	8001710 <initFlag>

  indexStrategie = 1; // Variable parcourant le tableau de stratégie
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <main+0x90>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
  initTimers();
 8001d06:	f000 f88b 	bl	8001e20 <initTimers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float voltage = 0;
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
			if((voltage < (float)TIRETTE_SEUIL) == TRUE && match_started == FALSE){
				match_started = TRUE;
				initStrategie();
			}
		#else
			match_started = TRUE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <main+0x94>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

		#endif
	}
	while(match_started == FALSE);
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <main+0x94>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f8      	beq.n	8001d10 <main+0x74>

	#if MODULE_LIDAR
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
	#endif

	cptTempsMatch = 0;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <main+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

	while (1)
 8001d24:	e7fe      	b.n	8001d24 <main+0x88>
 8001d26:	bf00      	nop
 8001d28:	200003c8 	.word	0x200003c8
 8001d2c:	20000538 	.word	0x20000538
 8001d30:	200003cc 	.word	0x200003cc
 8001d34:	200003b8 	.word	0x200003b8

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b094      	sub	sp, #80	; 0x50
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2234      	movs	r2, #52	; 0x34
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 f926 	bl	8006f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <SystemClock_Config+0xe0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <SystemClock_Config+0xe0>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <SystemClock_Config+0xe0>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <SystemClock_Config+0xe4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <SystemClock_Config+0xe4>)
 8001d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <SystemClock_Config+0xe4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da0:	2302      	movs	r3, #2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001da8:	2310      	movs	r3, #16
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001dac:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001db0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fd5c 	bl	8004880 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dce:	f000 f98d 	bl	80020ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dd2:	f002 fa39 	bl	8004248 <HAL_PWREx_EnableOverDrive>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ddc:	f000 f986 	bl	80020ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de0:	230f      	movs	r3, #15
 8001de2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de4:	2302      	movs	r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fa72 	bl	80042e8 <HAL_RCC_ClockConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e0a:	f000 f96f 	bl	80020ec <Error_Handler>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3750      	adds	r7, #80	; 0x50
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <initTimers>:

/* USER CODE BEGIN 4 */

int initTimers(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

	#if MODULE_ODOMETRIE
		HAL_TIM_Encoder_Start(&CODEUR_D, TIM_CHANNEL_ALL); // htim1
 8001e24:	213c      	movs	r1, #60	; 0x3c
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <initTimers+0x2c>)
 8001e28:	f003 fa50 	bl	80052cc <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&CODEUR_G, TIM_CHANNEL_ALL); // htim3
 8001e2c:	213c      	movs	r1, #60	; 0x3c
 8001e2e:	4808      	ldr	r0, [pc, #32]	; (8001e50 <initTimers+0x30>)
 8001e30:	f003 fa4c 	bl	80052cc <HAL_TIM_Encoder_Start>
	#endif

	#if MODULE_ASSERVISSEMENT
		HAL_TIM_Base_Start_IT(&htim2); // 15ms
 8001e34:	4807      	ldr	r0, [pc, #28]	; (8001e54 <initTimers+0x34>)
 8001e36:	f003 f811 	bl	8004e5c <HAL_TIM_Base_Start_IT>
	#endif

	#if MODULE_COMPTEUR
		HAL_TIM_Base_Start_IT(&htim7); // 1sec
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <initTimers+0x38>)
 8001e3c:	f003 f80e 	bl	8004e5c <HAL_TIM_Base_Start_IT>
	#endif

	HAL_TIM_Base_Start_IT(&htim6); // 10ms
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <initTimers+0x3c>)
 8001e42:	f003 f80b 	bl	8004e5c <HAL_TIM_Base_Start_IT>

	return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200006c0 	.word	0x200006c0
 8001e50:	200005e8 	.word	0x200005e8
 8001e54:	20000708 	.word	0x20000708
 8001e58:	20000750 	.word	0x20000750
 8001e5c:	20000678 	.word	0x20000678

08001e60 <initSerials>:

int initSerials(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	#if MODULE_DEBUG == 1
		RetargetInit(&huart2);
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <initSerials+0x18>)
 8001e66:	f000 fb7d 	bl	8002564 <RetargetInit>
		printf("Mode debug actif\r\n");
 8001e6a:	4804      	ldr	r0, [pc, #16]	; (8001e7c <initSerials+0x1c>)
 8001e6c:	f005 fd8c 	bl	8007988 <puts>

	#if MODULE_IHM
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
	#endif

	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200008a8 	.word	0x200008a8
 8001e7c:	0800adb4 	.word	0x0800adb4

08001e80 <initStrategie>:

int initStrategie(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if(port_depart == BLEU){
 8001e84:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <initStrategie+0x88>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d119      	bne.n	8001ec0 <initStrategie+0x40>
		ODO_setAngle(START_BLEU_ANGLE);
 8001e8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001f00 <initStrategie+0x80>
 8001e90:	f000 fb56 	bl	8002540 <ODO_setAngle>
		ODO_setX(consigneBleu[0].x);
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <initStrategie+0x8c>)
 8001e96:	ed93 7b00 	vldr	d7, [r3]
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	f000 fb29 	bl	80024f8 <ODO_setX>
		ODO_setY(consigneBleu[0].y);
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <initStrategie+0x8c>)
 8001ea8:	ed93 7b02 	vldr	d7, [r3, #8]
 8001eac:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb0:	eef0 0a67 	vmov.f32	s1, s15
 8001eb4:	f000 fb32 	bl	800251c <ODO_setY>
		consigne = consigneBleu;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <initStrategie+0x90>)
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <initStrategie+0x8c>)
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e01c      	b.n	8001efa <initStrategie+0x7a>
	}
	else if(port_depart == JAUNE){
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <initStrategie+0x88>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d118      	bne.n	8001efa <initStrategie+0x7a>
		ODO_setAngle(START_JAUNE_ANGLE);
 8001ec8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001f00 <initStrategie+0x80>
 8001ecc:	f000 fb38 	bl	8002540 <ODO_setAngle>
		ODO_setX(consigneJaune[0].x);
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <initStrategie+0x94>)
 8001ed2:	ed93 7b00 	vldr	d7, [r3]
 8001ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eda:	eef0 0a67 	vmov.f32	s1, s15
 8001ede:	f000 fb0b 	bl	80024f8 <ODO_setX>
		ODO_setY(consigneJaune[0].y);
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <initStrategie+0x94>)
 8001ee4:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8001eec:	eef0 0a67 	vmov.f32	s1, s15
 8001ef0:	f000 fb14 	bl	800251c <ODO_setY>
		consigne = consigneJaune;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <initStrategie+0x90>)
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <initStrategie+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
	...
 8001f08:	200003c8 	.word	0x200003c8
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000400 	.word	0x20000400
 8001f14:	20000068 	.word	0x20000068

08001f18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	b097      	sub	sp, #92	; 0x5c
 8001f1c:	af14      	add	r7, sp, #80	; 0x50
 8001f1e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d135      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(indexStrategie < nb_points && match_started == 1)
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	da2f      	bge.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d12b      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x7e>
			ASSERV_update(consigne[indexStrategie], consigne[indexStrategie-1]);
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	18d6      	adds	r6, r2, r3
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	440b      	add	r3, r1
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	3b30      	subs	r3, #48	; 0x30
 8001f66:	4413      	add	r3, r2
 8001f68:	ac08      	add	r4, sp, #32
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f7c:	466d      	mov	r5, sp
 8001f7e:	f106 0410 	add.w	r4, r6, #16
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f92:	f7ff fcc9 	bl	8001928 <ASSERV_update>
	}

	if(htim->Instance == TIM6){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d117      	bne.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0xb8>
		//printf("TIM6\r\n");
		cpt_back++;
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001fa8:	6013      	str	r3, [r2, #0]
		cpt_front++;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001fb2:	6013      	str	r3, [r2, #0]
		//printf("cpt_front = %d\r\n",cpt_front);

		if (cpt_back > 250){
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2bfa      	cmp	r3, #250	; 0xfa
 8001fba:	dd02      	ble.n	8001fc2 <HAL_TIM_PeriodElapsedCallback+0xaa>
			StopBack = 0;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
		}

		if (cpt_front > 250){
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2bfa      	cmp	r3, #250	; 0xfa
 8001fc8:	dd02      	ble.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0xb8>
			StopFront = 0;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM7){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11b      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0xfa>
		if(match_started == TRUE){
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d117      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0xfa>
			cptTempsMatch++;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fea:	6013      	str	r3, [r2, #0]

			if (cptTempsMatch >= TEMPS_PAVILLONS){
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b5f      	cmp	r3, #95	; 0x5f
 8001ff2:	dd01      	ble.n	8001ff8 <HAL_TIM_PeriodElapsedCallback+0xe0>
				raiseFlag();
 8001ff4:	f7ff fbc0 	bl	8001778 <raiseFlag>
			}

			if (cptTempsMatch >= 98){
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b61      	cmp	r3, #97	; 0x61
 8001ffe:	dd08      	ble.n	8002012 <HAL_TIM_PeriodElapsedCallback+0xfa>
				stopMoteurs();
 8002000:	f000 f8ae 	bl	8002160 <stopMoteurs>
				initBras();
 8002004:	f7ff fbc4 	bl	8001790 <initBras>
				initPinces();
 8002008:	f7ff fb26 	bl	8001658 <initPinces>
				match_started = 0;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	bf00      	nop
 800201c:	20000538 	.word	0x20000538
 8002020:	20000004 	.word	0x20000004
 8002024:	200003cc 	.word	0x200003cc
 8002028:	20000400 	.word	0x20000400
 800202c:	40001000 	.word	0x40001000
 8002030:	200004fc 	.word	0x200004fc
 8002034:	200004bc 	.word	0x200004bc
 8002038:	2000054c 	.word	0x2000054c
 800203c:	200004f8 	.word	0x200004f8
 8002040:	40001400 	.word	0x40001400
 8002044:	200003b8 	.word	0x200003b8

08002048 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_UART_RxCpltCallback+0x80>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d113      	bne.n	8002082 <HAL_UART_RxCpltCallback+0x3a>
		strcat(lidarRawData,&buff_lidar);
 800205a:	491c      	ldr	r1, [pc, #112]	; (80020cc <HAL_UART_RxCpltCallback+0x84>)
 800205c:	481c      	ldr	r0, [pc, #112]	; (80020d0 <HAL_UART_RxCpltCallback+0x88>)
 800205e:	f005 fd61 	bl	8007b24 <strcat>
		if(buff_lidar == '\n'){
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_UART_RxCpltCallback+0x84>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b0a      	cmp	r3, #10
 8002068:	d106      	bne.n	8002078 <HAL_UART_RxCpltCallback+0x30>
			//getLidarData();
			getLidarData2();
 800206a:	f7ff fded 	bl	8001c48 <getLidarData2>
			memset(lidarRawData,0,sizeof(lidarRawData));
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	2100      	movs	r1, #0
 8002072:	4817      	ldr	r0, [pc, #92]	; (80020d0 <HAL_UART_RxCpltCallback+0x88>)
 8002074:	f004 ff90 	bl	8006f98 <memset>
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	4914      	ldr	r1, [pc, #80]	; (80020cc <HAL_UART_RxCpltCallback+0x84>)
 800207c:	4815      	ldr	r0, [pc, #84]	; (80020d4 <HAL_UART_RxCpltCallback+0x8c>)
 800207e:	f004 f9d8 	bl	8006432 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == UART4){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_UART_RxCpltCallback+0x90>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d118      	bne.n	80020be <HAL_UART_RxCpltCallback+0x76>
		if(match_started == FALSE){
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_UART_RxCpltCallback+0x94>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d114      	bne.n	80020be <HAL_UART_RxCpltCallback+0x76>
			strcat(ihmRawData,&buff_ihm);
 8002094:	4912      	ldr	r1, [pc, #72]	; (80020e0 <HAL_UART_RxCpltCallback+0x98>)
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <HAL_UART_RxCpltCallback+0x9c>)
 8002098:	f005 fd44 	bl	8007b24 <strcat>
			if(buff_ihm == '\n'){
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_UART_RxCpltCallback+0x98>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b0a      	cmp	r3, #10
 80020a2:	d107      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x6c>
				decodeMsgIHM(ihmRawData);
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <HAL_UART_RxCpltCallback+0x9c>)
 80020a6:	f7ff fd93 	bl	8001bd0 <decodeMsgIHM>
				memset(ihmRawData,0,sizeof(ihmRawData));
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <HAL_UART_RxCpltCallback+0x9c>)
 80020b0:	f004 ff72 	bl	8006f98 <memset>
			}
			HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 80020b4:	2201      	movs	r2, #1
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_UART_RxCpltCallback+0x98>)
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_UART_RxCpltCallback+0xa0>)
 80020ba:	f004 f9ba 	bl	8006432 <HAL_UART_Receive_IT>
		}
	}

}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40005000 	.word	0x40005000
 80020cc:	20000548 	.word	0x20000548
 80020d0:	2000047c 	.word	0x2000047c
 80020d4:	200007dc 	.word	0x200007dc
 80020d8:	40004c00 	.word	0x40004c00
 80020dc:	200003cc 	.word	0x200003cc
 80020e0:	20000558 	.word	0x20000558
 80020e4:	2000055c 	.word	0x2000055c
 80020e8:	20000864 	.word	0x20000864

080020ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <initMoteurs>:
#include <moteurs.h>

void initMoteurs(){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af04      	add	r7, sp, #16
	//DRV8825_moveMotorLineSpeed(&moteur_D, 0);
	//DRV8825_moveMotorLineSpeed(&moteur_G, 0);

	DRV8825_init(&moteur_D, EN_D_Pin, EN_D_GPIO_Port, Dir_D_Pin, Dir_D_GPIO_Port, &STEP_D, TIM_CHANNEL_4);
 8002102:	230c      	movs	r3, #12
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <initMoteurs+0x50>)
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <initMoteurs+0x54>)
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <initMoteurs+0x54>)
 8002114:	2102      	movs	r1, #2
 8002116:	480f      	ldr	r0, [pc, #60]	; (8002154 <initMoteurs+0x58>)
 8002118:	f7ff f97c 	bl	8001414 <DRV8825_init>
	DRV8825_init(&moteur_G, EN_G_Pin, EN_G_GPIO_Port, Dir_G_Pin, Dir_G_GPIO_Port, &STEP_G, TIM_CHANNEL_1);
 800211c:	2300      	movs	r3, #0
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <initMoteurs+0x5c>)
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <initMoteurs+0x54>)
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2304      	movs	r3, #4
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <initMoteurs+0x54>)
 800212c:	2101      	movs	r1, #1
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <initMoteurs+0x60>)
 8002130:	f7ff f970 	bl	8001414 <DRV8825_init>

	DRV8825_setStart(&moteur_D, STOP);
 8002134:	2101      	movs	r1, #1
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <initMoteurs+0x58>)
 8002138:	f7ff f9a1 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 800213c:	2101      	movs	r1, #1
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <initMoteurs+0x60>)
 8002140:	f7ff f99d 	bl	800147e <DRV8825_setStart>

	//DRV8825_setStart(&moteur_D, START);
	//DRV8825_setStart(&moteur_G, START);

}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200005a0 	.word	0x200005a0
 8002150:	40020800 	.word	0x40020800
 8002154:	20000508 	.word	0x20000508
 8002158:	20000630 	.word	0x20000630
 800215c:	20000520 	.word	0x20000520

08002160 <stopMoteurs>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed);
}

void stopMoteurs(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, STOP);
 8002164:	2101      	movs	r1, #1
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <stopMoteurs+0x18>)
 8002168:	f7ff f989 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 800216c:	2101      	movs	r1, #1
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <stopMoteurs+0x1c>)
 8002170:	f7ff f985 	bl	800147e <DRV8825_setStart>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000508 	.word	0x20000508
 800217c:	20000520 	.word	0x20000520

08002180 <startMoteurs>:

void startMoteurs(){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, START);
 8002184:	2100      	movs	r1, #0
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <startMoteurs+0x18>)
 8002188:	f7ff f979 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, START);
 800218c:	2100      	movs	r1, #0
 800218e:	4803      	ldr	r0, [pc, #12]	; (800219c <startMoteurs+0x1c>)
 8002190:	f7ff f975 	bl	800147e <DRV8825_setStart>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000508 	.word	0x20000508
 800219c:	20000520 	.word	0x20000520

080021a0 <setMotors>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed_R);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed_L);
}

void setMotors(double left, double right) {
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80021aa:	ed87 1b00 	vstr	d1, [r7]
    // vitesses absolues
    DRV8825_moveMotorLineSpeed(&moteur_G, fabs(left));
 80021ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021b2:	f7fe fd39 	bl	8000c28 <__aeabi_d2f>
 80021b6:	ee07 0a90 	vmov	s15, r0
 80021ba:	eef0 7ae7 	vabs.f32	s15, s15
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	4830      	ldr	r0, [pc, #192]	; (8002284 <setMotors+0xe4>)
 80021c4:	f7ff f970 	bl	80014a8 <DRV8825_moveMotorLineSpeed>
    DRV8825_moveMotorLineSpeed(&moteur_D, fabs(right));
 80021c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021cc:	f7fe fd2c 	bl	8000c28 <__aeabi_d2f>
 80021d0:	ee07 0a90 	vmov	s15, r0
 80021d4:	eef0 7ae7 	vabs.f32	s15, s15
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	482a      	ldr	r0, [pc, #168]	; (8002288 <setMotors+0xe8>)
 80021de:	f7ff f963 	bl	80014a8 <DRV8825_moveMotorLineSpeed>

    // directions
    DRV8825_setDir(&moteur_G, (left < 0)?BACKWARD:FORWARD);
 80021e2:	2301      	movs	r3, #1
 80021e4:	461c      	mov	r4, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021f2:	f7fe fc93 	bl	8000b1c <__aeabi_dcmplt>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <setMotors+0x60>
 80021fc:	2300      	movs	r3, #0
 80021fe:	461c      	mov	r4, r3
 8002200:	b2e3      	uxtb	r3, r4
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	481d      	ldr	r0, [pc, #116]	; (8002284 <setMotors+0xe4>)
 800220e:	f7ff f924 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, (right < 0)?BACKWARD:FORWARD);
 8002212:	2301      	movs	r3, #1
 8002214:	461c      	mov	r4, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002222:	f7fe fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <setMotors+0x90>
 800222c:	2300      	movs	r3, #0
 800222e:	461c      	mov	r4, r3
 8002230:	b2e3      	uxtb	r3, r4
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	4812      	ldr	r0, [pc, #72]	; (8002288 <setMotors+0xe8>)
 800223e:	f7ff f90c 	bl	800145a <DRV8825_setDir>

    // activer ou non les moteurs
    if (left == 0 && right == 0)
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224e:	f7fe fc5b 	bl	8000b08 <__aeabi_dcmpeq>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <setMotors+0xd4>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002264:	f7fe fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <setMotors+0xd4>
        stopMoteurs();
 800226e:	f7ff ff77 	bl	8002160 <stopMoteurs>
 8002272:	e002      	b.n	800227a <setMotors+0xda>
    else
    	startMoteurs();
 8002274:	f7ff ff84 	bl	8002180 <startMoteurs>
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	20000520 	.word	0x20000520
 8002288:	20000508 	.word	0x20000508

0800228c <getTickRight>:
#include <asservissement.h>


int16_t getTickRight(){
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	return (int16_t) CODEUR_D.Instance->CNT;
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <getTickRight+0x18>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	b21b      	sxth	r3, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200006c0 	.word	0x200006c0

080022a8 <getTickLeft>:

int16_t getTickLeft(){
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
	return -1 * (int16_t) CODEUR_G.Instance->CNT;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <getTickLeft+0x1c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	425b      	negs	r3, r3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b21b      	sxth	r3, r3
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200005e8 	.word	0x200005e8

080022c8 <resetTickRight>:

void resetTickRight(){
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	CODEUR_D.Instance->CNT = 0;
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <resetTickRight+0x18>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200006c0 	.word	0x200006c0

080022e4 <resetTickLeft>:

void resetTickLeft(){
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	CODEUR_G.Instance->CNT = 0;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <resetTickLeft+0x18>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200005e8 	.word	0x200005e8

08002300 <ODO_odometrie>:

void ODO_odometrie(){
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
			"x : %lf \n\r"
			"y : %lf \n\r"
			"o : %lf \n\n\r",g_x, g_y, g_angle);
#endif

	int valCodG = getTickLeft();
 8002306:	f7ff ffcf 	bl	80022a8 <getTickLeft>
 800230a:	4603      	mov	r3, r0
 800230c:	607b      	str	r3, [r7, #4]
	int valCodD = getTickRight();
 800230e:	f7ff ffbd 	bl	800228c <getTickRight>
 8002312:	4603      	mov	r3, r0
 8002314:	603b      	str	r3, [r7, #0]

	dDistance =  (valCodG*COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe f924 	bl	8000564 <__aeabi_i2d>
 800231c:	a368      	add	r3, pc, #416	; (adr r3, 80024c0 <ODO_odometrie+0x1c0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f989 	bl	8000638 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	f7fe f918 	bl	8000564 <__aeabi_i2d>
 8002334:	a362      	add	r3, pc, #392	; (adr r3, 80024c0 <ODO_odometrie+0x1c0>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe f97d 	bl	8000638 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f7fd ffc1 	bl	80002cc <__adddf3>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235a:	f7fe fa97 	bl	800088c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	495f      	ldr	r1, [pc, #380]	; (80024e0 <ODO_odometrie+0x1e0>)
 8002364:	e9c1 2300 	strd	r2, r3, [r1]
	dAngle = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE;
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f7fe f8fb 	bl	8000564 <__aeabi_i2d>
 800236e:	a354      	add	r3, pc, #336	; (adr r3, 80024c0 <ODO_odometrie+0x1c0>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f960 	bl	8000638 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe f8ef 	bl	8000564 <__aeabi_i2d>
 8002386:	a34e      	add	r3, pc, #312	; (adr r3, 80024c0 <ODO_odometrie+0x1c0>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f954 	bl	8000638 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff96 	bl	80002c8 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <ODO_odometrie+0x1e4>)
 80023aa:	f7fe fa6f 	bl	800088c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	494d      	ldr	r1, [pc, #308]	; (80024e8 <ODO_odometrie+0x1e8>)
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]

	g_x += dDistance * cos(g_angle);
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <ODO_odometrie+0x1ec>)
 80023ba:	ed93 7b00 	vldr	d7, [r3]
 80023be:	eeb0 0a47 	vmov.f32	s0, s14
 80023c2:	eef0 0a67 	vmov.f32	s1, s15
 80023c6:	f007 fc27 	bl	8009c18 <cos>
 80023ca:	ec51 0b10 	vmov	r0, r1, d0
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <ODO_odometrie+0x1e0>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f930 	bl	8000638 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <ODO_odometrie+0x1f0>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fd ff71 	bl	80002cc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4940      	ldr	r1, [pc, #256]	; (80024f0 <ODO_odometrie+0x1f0>)
 80023f0:	e9c1 2300 	strd	r2, r3, [r1]
	g_y += dDistance * sin(g_angle);
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <ODO_odometrie+0x1ec>)
 80023f6:	ed93 7b00 	vldr	d7, [r3]
 80023fa:	eeb0 0a47 	vmov.f32	s0, s14
 80023fe:	eef0 0a67 	vmov.f32	s1, s15
 8002402:	f007 fc59 	bl	8009cb8 <sin>
 8002406:	ec51 0b10 	vmov	r0, r1, d0
 800240a:	4b35      	ldr	r3, [pc, #212]	; (80024e0 <ODO_odometrie+0x1e0>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f912 	bl	8000638 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <ODO_odometrie+0x1f4>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fd ff53 	bl	80002cc <__adddf3>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4932      	ldr	r1, [pc, #200]	; (80024f4 <ODO_odometrie+0x1f4>)
 800242c:	e9c1 2300 	strd	r2, r3, [r1]
	g_angle += dAngle;
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <ODO_odometrie+0x1ec>)
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <ODO_odometrie+0x1e8>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fd ff46 	bl	80002cc <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4929      	ldr	r1, [pc, #164]	; (80024ec <ODO_odometrie+0x1ec>)
 8002446:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle > M_PI)
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <ODO_odometrie+0x1ec>)
 800244c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002450:	a31d      	add	r3, pc, #116	; (adr r3, 80024c8 <ODO_odometrie+0x1c8>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe fb7f 	bl	8000b58 <__aeabi_dcmpgt>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <ODO_odometrie+0x17a>
		g_angle = g_angle - M_TWOPI;
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <ODO_odometrie+0x1ec>)
 8002462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002466:	a31a      	add	r3, pc, #104	; (adr r3, 80024d0 <ODO_odometrie+0x1d0>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fd ff2c 	bl	80002c8 <__aeabi_dsub>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	491d      	ldr	r1, [pc, #116]	; (80024ec <ODO_odometrie+0x1ec>)
 8002476:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle < -M_PI)
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <ODO_odometrie+0x1ec>)
 800247c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002480:	a315      	add	r3, pc, #84	; (adr r3, 80024d8 <ODO_odometrie+0x1d8>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe fb49 	bl	8000b1c <__aeabi_dcmplt>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <ODO_odometrie+0x1aa>
		g_angle = g_angle + M_TWOPI;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <ODO_odometrie+0x1ec>)
 8002492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002496:	a30e      	add	r3, pc, #56	; (adr r3, 80024d0 <ODO_odometrie+0x1d0>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fd ff16 	bl	80002cc <__adddf3>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4911      	ldr	r1, [pc, #68]	; (80024ec <ODO_odometrie+0x1ec>)
 80024a6:	e9c1 2300 	strd	r2, r3, [r1]

	resetTickRight();
 80024aa:	f7ff ff0d 	bl	80022c8 <resetTickRight>
	resetTickLeft();
 80024ae:	f7ff ff19 	bl	80022e4 <resetTickLeft>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	f3af 8000 	nop.w
 80024c0:	47c0d798 	.word	0x47c0d798
 80024c4:	3fa484bc 	.word	0x3fa484bc
 80024c8:	54442d18 	.word	0x54442d18
 80024cc:	400921fb 	.word	0x400921fb
 80024d0:	54442d18 	.word	0x54442d18
 80024d4:	401921fb 	.word	0x401921fb
 80024d8:	54442d18 	.word	0x54442d18
 80024dc:	c00921fb 	.word	0xc00921fb
 80024e0:	20000550 	.word	0x20000550
 80024e4:	40700000 	.word	0x40700000
 80024e8:	20000500 	.word	0x20000500
 80024ec:	200004f0 	.word	0x200004f0
 80024f0:	20000450 	.word	0x20000450
 80024f4:	20000540 	.word	0x20000540

080024f8 <ODO_setX>:

void ODO_setX(double x){
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0b00 	vstr	d0, [r7]
	g_x = x;
 8002502:	4905      	ldr	r1, [pc, #20]	; (8002518 <ODO_setX+0x20>)
 8002504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002508:	e9c1 2300 	strd	r2, r3, [r1]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20000450 	.word	0x20000450

0800251c <ODO_setY>:

void ODO_setY(double y){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	ed87 0b00 	vstr	d0, [r7]
	g_y = y;
 8002526:	4905      	ldr	r1, [pc, #20]	; (800253c <ODO_setY+0x20>)
 8002528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000540 	.word	0x20000540

08002540 <ODO_setAngle>:
void ODO_setPosition(double x, double y){
	g_x = x;
	g_y = y;
}

void ODO_setAngle(double angle){
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0b00 	vstr	d0, [r7]
	g_angle = angle;
 800254a:	4905      	ldr	r1, [pc, #20]	; (8002560 <ODO_setAngle+0x20>)
 800254c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002550:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	200004f0 	.word	0x200004f0

08002564 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <RetargetInit+0x28>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <RetargetInit+0x2c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	2300      	movs	r3, #0
 800257a:	2202      	movs	r2, #2
 800257c:	2100      	movs	r1, #0
 800257e:	f005 fa0b 	bl	8007998 <setvbuf>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000059c 	.word	0x2000059c
 8002590:	200001c4 	.word	0x200001c4

08002594 <_isatty>:

int _isatty(int fd) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db04      	blt.n	80025ac <_isatty+0x18>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	dc01      	bgt.n	80025ac <_isatty+0x18>
    return 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e005      	b.n	80025b8 <_isatty+0x24>

  errno = EBADF;
 80025ac:	f004 fcca 	bl	8006f44 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2209      	movs	r2, #9
 80025b4:	601a      	str	r2, [r3, #0]
  return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <_write+0x18>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d111      	bne.n	80025fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <_write+0x54>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	f003 fdf0 	bl	80061ca <HAL_UART_Transmit>
 80025ea:	4603      	mov	r3, r0
 80025ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <_write+0x38>
      return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	e008      	b.n	800260a <_write+0x4a>
    else
      return EIO;
 80025f8:	2305      	movs	r3, #5
 80025fa:	e006      	b.n	800260a <_write+0x4a>
  }
  errno = EBADF;
 80025fc:	f004 fca2 	bl	8006f44 <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	2209      	movs	r2, #9
 8002604:	601a      	str	r2, [r3, #0]
  return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000059c 	.word	0x2000059c

08002618 <_close>:

int _close(int fd) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db04      	blt.n	8002630 <_close+0x18>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	dc01      	bgt.n	8002630 <_close+0x18>
    return 0;
 800262c:	2300      	movs	r3, #0
 800262e:	e006      	b.n	800263e <_close+0x26>

  errno = EBADF;
 8002630:	f004 fc88 	bl	8006f44 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	2209      	movs	r2, #9
 8002638:	601a      	str	r2, [r3, #0]
  return -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002652:	f004 fc77 	bl	8006f44 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2209      	movs	r2, #9
 800265a:	601a      	str	r2, [r3, #0]
  return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_read>:

int _read(int fd, char* ptr, int len) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d110      	bne.n	800269c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <_read+0x4c>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	2201      	movs	r2, #1
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	f003 fe32 	bl	80062ee <HAL_UART_Receive>
 800268a:	4603      	mov	r3, r0
 800268c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <_read+0x30>
      return 1;
 8002694:	2301      	movs	r3, #1
 8002696:	e008      	b.n	80026aa <_read+0x42>
    else
      return EIO;
 8002698:	2305      	movs	r3, #5
 800269a:	e006      	b.n	80026aa <_read+0x42>
  }
  errno = EBADF;
 800269c:	f004 fc52 	bl	8006f44 <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2209      	movs	r2, #9
 80026a4:	601a      	str	r2, [r3, #0]
  return -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000059c 	.word	0x2000059c

080026b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db08      	blt.n	80026da <_fstat+0x22>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	dc05      	bgt.n	80026da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d4:	605a      	str	r2, [r3, #4]
    return 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e005      	b.n	80026e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80026da:	f004 fc33 	bl	8006f44 <__errno>
 80026de:	4603      	mov	r3, r0
 80026e0:	2209      	movs	r2, #9
 80026e2:	601a      	str	r2, [r3, #0]
  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_MspInit+0x4c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_MspInit+0x4c>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_MspInit+0x4c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_MspInit+0x4c>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
#if DEBUG_G == 1 && DEBUG_FAULT
	printf("Bug !");
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 ff50 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <TIM2_IRQHandler+0x10>)
 80027a2:	f002 fe21 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000708 	.word	0x20000708

080027b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <USART2_IRQHandler+0x10>)
 80027b6:	f003 fe6d 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200008a8 	.word	0x200008a8

080027c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <UART4_IRQHandler+0x10>)
 80027ca:	f003 fe63 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000864 	.word	0x20000864

080027d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <UART5_IRQHandler+0x10>)
 80027de:	f003 fe59 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200007dc 	.word	0x200007dc

080027ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <TIM6_DAC_IRQHandler+0x10>)
 80027f2:	f002 fdf9 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000678 	.word	0x20000678

08002800 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <TIM7_IRQHandler+0x10>)
 8002806:	f002 fdef 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000750 	.word	0x20000750

08002814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <_sbrk+0x50>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x16>
		heap_end = &end;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <_sbrk+0x50>)
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <_sbrk+0x54>)
 8002828:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <_sbrk+0x50>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <_sbrk+0x50>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	466a      	mov	r2, sp
 800283a:	4293      	cmp	r3, r2
 800283c:	d907      	bls.n	800284e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800283e:	f004 fb81 	bl	8006f44 <__errno>
 8002842:	4603      	mov	r3, r0
 8002844:	220c      	movs	r2, #12
 8002846:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	e006      	b.n	800285c <_sbrk+0x48>
	}

	heap_end += incr;
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <_sbrk+0x50>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a03      	ldr	r2, [pc, #12]	; (8002864 <_sbrk+0x50>)
 8002858:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200003bc 	.word	0x200003bc
 8002868:	20000900 	.word	0x20000900

0800286c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <SystemInit+0x28>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <SystemInit+0x28>)
 8002878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800287c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SystemInit+0x28>)
 8002882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002886:	609a      	str	r2, [r3, #8]
#endif
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fb76 	bl	8006f98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <MX_TIM1_Init+0xac>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_TIM1_Init+0xa8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028e0:	2303      	movs	r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80028f0:	230a      	movs	r3, #10
 80028f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_TIM1_Init+0xa8>)
 800290c:	f002 fc38 	bl	8005180 <HAL_TIM_Encoder_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002916:	f7ff fbe9 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_TIM1_Init+0xa8>)
 8002928:	f003 fb20 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002932:	f7ff fbdb 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200006c0 	.word	0x200006c0
 8002944:	40010000 	.word	0x40010000

08002948 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	463b      	mov	r3, r7
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800296a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_TIM2_Init+0x98>)
 800296e:	f640 227e 	movw	r2, #2686	; 0xa7e
 8002972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_TIM2_Init+0x98>)
 800297c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_TIM2_Init+0x98>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800298e:	4814      	ldr	r0, [pc, #80]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002990:	f002 fa14 	bl	8004dbc <HAL_TIM_Base_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800299a:	f7ff fba7 	bl	80020ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800299e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	4619      	mov	r1, r3
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_TIM2_Init+0x98>)
 80029ac:	f002 fee2 	bl	8005774 <HAL_TIM_ConfigClockSource>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029b6:	f7ff fb99 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c2:	463b      	mov	r3, r7
 80029c4:	4619      	mov	r1, r3
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <MX_TIM2_Init+0x98>)
 80029c8:	f003 fad0 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80029d2:	f7ff fb8b 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000708 	.word	0x20000708

080029e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fad0 	bl	8006f98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <MX_TIM3_Init+0xa4>)
 8002a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a26:	2303      	movs	r3, #3
 8002a28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a52:	f002 fb95 	bl	8005180 <HAL_TIM_Encoder_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a5c:	f7ff fb46 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_TIM3_Init+0xa0>)
 8002a6e:	f003 fa7d 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a78:	f7ff fb38 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200005e8 	.word	0x200005e8
 8002a88:	40000400 	.word	0x40000400

08002a8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a92:	463b      	mov	r3, r7
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <MX_TIM6_Init+0x68>)
 8002a9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002aa2:	f242 3227 	movw	r2, #8999	; 0x2327
 8002aa6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002ab0:	2263      	movs	r2, #99	; 0x63
 8002ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002aba:	480d      	ldr	r0, [pc, #52]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002abc:	f002 f97e 	bl	8004dbc <HAL_TIM_Base_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002ac6:	f7ff fb11 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <MX_TIM6_Init+0x64>)
 8002ad8:	f003 fa48 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002ae2:	f7ff fb03 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000678 	.word	0x20000678
 8002af4:	40001000 	.word	0x40001000

08002af8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afe:	463b      	mov	r3, r7
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <MX_TIM7_Init+0x68>)
 8002b0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b0e:	f242 3227 	movw	r2, #8999	; 0x2327
 8002b12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b2a:	f002 f947 	bl	8004dbc <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b34:	f7ff fada 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b40:	463b      	mov	r3, r7
 8002b42:	4619      	mov	r1, r3
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_TIM7_Init+0x64>)
 8002b46:	f003 fa11 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b50:	f7ff facc 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000750 	.word	0x20000750
 8002b60:	40001400 	.word	0x40001400

08002b64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b096      	sub	sp, #88	; 0x58
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2220      	movs	r2, #32
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 f9fb 	bl	8006f98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002ba4:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <MX_TIM8_Init+0x13c>)
 8002ba6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002baa:	22b3      	movs	r2, #179	; 0xb3
 8002bac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002bce:	4833      	ldr	r0, [pc, #204]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bd0:	f002 f8f4 	bl	8004dbc <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002bda:	f7ff fa87 	bl	80020ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002be8:	4619      	mov	r1, r3
 8002bea:	482c      	ldr	r0, [pc, #176]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bec:	f002 fdc2 	bl	8005774 <HAL_TIM_ConfigClockSource>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002bf6:	f7ff fa79 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002bfa:	4828      	ldr	r0, [pc, #160]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002bfc:	f002 f99e 	bl	8004f3c <HAL_TIM_PWM_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002c06:	f7ff fa71 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c16:	4619      	mov	r1, r3
 8002c18:	4820      	ldr	r0, [pc, #128]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002c1a:	f003 f9a7 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002c24:	f7ff fa62 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c28:	2360      	movs	r3, #96	; 0x60
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8002c2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	220c      	movs	r2, #12
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4814      	ldr	r0, [pc, #80]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002c4c:	f002 fcd4 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8002c56:	f7ff fa49 	bl	80020ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002c7e:	f003 f9f1 	bl	8006064 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002c88:	f7ff fa30 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <MX_TIM8_Init+0x138>)
 8002c8e:	f000 f989 	bl	8002fa4 <HAL_TIM_MspPostInit>

}
 8002c92:	bf00      	nop
 8002c94:	3758      	adds	r7, #88	; 0x58
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200005a0 	.word	0x200005a0
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
 8002cb8:	615a      	str	r2, [r3, #20]
 8002cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <MX_TIM11_Init+0x98>)
 8002cc0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cc4:	22b3      	movs	r2, #179	; 0xb3
 8002cc6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ce2:	4815      	ldr	r0, [pc, #84]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002ce4:	f002 f86a 	bl	8004dbc <HAL_TIM_Base_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002cee:	f7ff f9fd 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002cf2:	4811      	ldr	r0, [pc, #68]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002cf4:	f002 f922 	bl	8004f3c <HAL_TIM_PWM_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002cfe:	f7ff f9f5 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d02:	2360      	movs	r3, #96	; 0x60
 8002d04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4807      	ldr	r0, [pc, #28]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002d1a:	f002 fc6d 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002d24:	f7ff f9e2 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <MX_TIM11_Init+0x94>)
 8002d2a:	f000 f93b 	bl	8002fa4 <HAL_TIM_MspPostInit>

}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000630 	.word	0x20000630
 8002d3c:	40014800 	.word	0x40014800

08002d40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d12d      	bne.n	8002dbe <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a30      	ldr	r2, [pc, #192]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	4619      	mov	r1, r3
 8002db6:	481e      	ldr	r0, [pc, #120]	; (8002e30 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002db8:	f001 f898 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002dbc:	e030      	b.n	8002e20 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12b      	bne.n	8002e20 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e10:	2302      	movs	r3, #2
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e1c:	f001 f866 	bl	8003eec <HAL_GPIO_Init>
}
 8002e20:	bf00      	nop
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40000400 	.word	0x40000400

08002e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	; 0x38
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d134      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a43      	ldr	r2, [pc, #268]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e92:	2304      	movs	r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4838      	ldr	r0, [pc, #224]	; (8002f90 <HAL_TIM_Base_MspInit+0x158>)
 8002eae:	f001 f81d 	bl	8003eec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f000 ff4f 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ebc:	201c      	movs	r0, #28
 8002ebe:	f000 ff68 	bl	8003d92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002ec2:	e05e      	b.n	8002f82 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM6)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <HAL_TIM_Base_MspInit+0x15c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d116      	bne.n	8002efc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a2d      	ldr	r2, [pc, #180]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002ed8:	f043 0310 	orr.w	r3, r3, #16
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	2036      	movs	r0, #54	; 0x36
 8002ef0:	f000 ff33 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ef4:	2036      	movs	r0, #54	; 0x36
 8002ef6:	f000 ff4c 	bl	8003d92 <HAL_NVIC_EnableIRQ>
}
 8002efa:	e042      	b.n	8002f82 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM7)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_TIM_Base_MspInit+0x160>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d116      	bne.n	8002f34 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2102      	movs	r1, #2
 8002f26:	2037      	movs	r0, #55	; 0x37
 8002f28:	f000 ff17 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f2c:	2037      	movs	r0, #55	; 0x37
 8002f2e:	f000 ff30 	bl	8003d92 <HAL_NVIC_EnableIRQ>
}
 8002f32:	e026      	b.n	8002f82 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_TIM_Base_MspInit+0x164>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10e      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
}
 8002f5a:	e012      	b.n	8002f82 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM11)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <HAL_TIM_Base_MspInit+0x168>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10d      	bne.n	8002f82 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_TIM_Base_MspInit+0x154>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	bf00      	nop
 8002f84:	3738      	adds	r7, #56	; 0x38
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40001000 	.word	0x40001000
 8002f98:	40001400 	.word	0x40001400
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014800 	.word	0x40014800

08002fa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	; (8003058 <HAL_TIM_MspPostInit+0xb4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d11f      	bne.n	8003006 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4818      	ldr	r0, [pc, #96]	; (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8003000:	f000 ff74 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003004:	e023      	b.n	800304e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_TIM_MspPostInit+0xc0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d11e      	bne.n	800304e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	6313      	str	r3, [r2, #48]	; 0x30
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_TIM_MspPostInit+0xb8>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800302c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800303e:	2303      	movs	r3, #3
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	4619      	mov	r1, r3
 8003048:	4807      	ldr	r0, [pc, #28]	; (8003068 <HAL_TIM_MspPostInit+0xc4>)
 800304a:	f000 ff4f 	bl	8003eec <HAL_GPIO_Init>
}
 800304e:	bf00      	nop
 8003050:	3728      	adds	r7, #40	; 0x28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010400 	.word	0x40010400
 800305c:	40023800 	.word	0x40023800
 8003060:	40020800 	.word	0x40020800
 8003064:	40014800 	.word	0x40014800
 8003068:	40020400 	.word	0x40020400

0800306c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <MX_UART4_Init+0x50>)
 8003074:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800307c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_UART4_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <MX_UART4_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_UART4_Init+0x4c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_UART4_Init+0x4c>)
 80030a4:	f003 f844 	bl	8006130 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80030ae:	f7ff f81d 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000864 	.word	0x20000864
 80030bc:	40004c00 	.word	0x40004c00

080030c0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <MX_UART5_Init+0x4c>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <MX_UART5_Init+0x50>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <MX_UART5_Init+0x4c>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <MX_UART5_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <MX_UART5_Init+0x4c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MX_UART5_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <MX_UART5_Init+0x4c>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <MX_UART5_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <MX_UART5_Init+0x4c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <MX_UART5_Init+0x4c>)
 80030f8:	f003 f81a 	bl	8006130 <HAL_UART_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003102:	f7fe fff3 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200007dc 	.word	0x200007dc
 8003110:	40005000 	.word	0x40005000

08003114 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <MX_USART1_UART_Init+0x50>)
 800311c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 8003120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 800313a:	220c      	movs	r2, #12
 800313c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 8003146:	2200      	movs	r2, #0
 8003148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <MX_USART1_UART_Init+0x4c>)
 800314c:	f002 fff0 	bl	8006130 <HAL_UART_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003156:	f7fe ffc9 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000820 	.word	0x20000820
 8003164:	40011000 	.word	0x40011000

08003168 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <MX_USART2_UART_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 8003174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 800318e:	220c      	movs	r2, #12
 8003190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_USART2_UART_Init+0x4c>)
 80031a0:	f002 ffc6 	bl	8006130 <HAL_UART_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031aa:	f7fe ff9f 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200008a8 	.word	0x200008a8
 80031b8:	40004400 	.word	0x40004400

080031bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <MX_USART3_UART_Init+0x4c>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031c8:	4a10      	ldr	r2, [pc, #64]	; (800320c <MX_USART3_UART_Init+0x50>)
 80031ca:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031e0:	220c      	movs	r2, #12
 80031e2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <MX_USART3_UART_Init+0x48>)
 80031f2:	f002 ff9d 	bl	8006130 <HAL_UART_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80031fc:	f7fe ff76 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000798 	.word	0x20000798
 8003208:	40004800 	.word	0x40004800
 800320c:	0003d090 	.word	0x0003d090

08003210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b094      	sub	sp, #80	; 0x50
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a8d      	ldr	r2, [pc, #564]	; (8003464 <HAL_UART_MspInit+0x254>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d134      	bne.n	800329c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	63bb      	str	r3, [r7, #56]	; 0x38
 8003236:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a8b      	ldr	r2, [pc, #556]	; (8003468 <HAL_UART_MspInit+0x258>)
 800323c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b89      	ldr	r3, [pc, #548]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a84      	ldr	r2, [pc, #528]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800326a:	2303      	movs	r3, #3
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003272:	2301      	movs	r3, #1
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800327a:	2308      	movs	r3, #8
 800327c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003282:	4619      	mov	r1, r3
 8003284:	4879      	ldr	r0, [pc, #484]	; (800346c <HAL_UART_MspInit+0x25c>)
 8003286:	f000 fe31 	bl	8003eec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	2034      	movs	r0, #52	; 0x34
 8003290:	f000 fd63 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003294:	2034      	movs	r0, #52	; 0x34
 8003296:	f000 fd7c 	bl	8003d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800329a:	e145      	b.n	8003528 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART5)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a73      	ldr	r2, [pc, #460]	; (8003470 <HAL_UART_MspInit+0x260>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d153      	bne.n	800334e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30
 80032aa:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b6c      	ldr	r3, [pc, #432]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c6:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a67      	ldr	r2, [pc, #412]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e2:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a60      	ldr	r2, [pc, #384]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_UART_MspInit+0x258>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003304:	2301      	movs	r3, #1
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	2303      	movs	r3, #3
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800330c:	2308      	movs	r3, #8
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003310:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003314:	4619      	mov	r1, r3
 8003316:	4857      	ldr	r0, [pc, #348]	; (8003474 <HAL_UART_MspInit+0x264>)
 8003318:	f000 fde8 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800331c:	2304      	movs	r3, #4
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003324:	2301      	movs	r3, #1
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800332c:	2308      	movs	r3, #8
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003334:	4619      	mov	r1, r3
 8003336:	4850      	ldr	r0, [pc, #320]	; (8003478 <HAL_UART_MspInit+0x268>)
 8003338:	f000 fdd8 	bl	8003eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	2035      	movs	r0, #53	; 0x35
 8003342:	f000 fd0a 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003346:	2035      	movs	r0, #53	; 0x35
 8003348:	f000 fd23 	bl	8003d92 <HAL_NVIC_EnableIRQ>
}
 800334c:	e0ec      	b.n	8003528 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4a      	ldr	r2, [pc, #296]	; (800347c <HAL_UART_MspInit+0x26c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d14b      	bne.n	80033f0 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	4b42      	ldr	r3, [pc, #264]	; (8003468 <HAL_UART_MspInit+0x258>)
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	4a41      	ldr	r2, [pc, #260]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003362:	f043 0310 	orr.w	r3, r3, #16
 8003366:	6453      	str	r3, [r2, #68]	; 0x44
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_UART_MspInit+0x258>)
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_UART_MspInit+0x258>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <HAL_UART_MspInit+0x258>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6313      	str	r3, [r2, #48]	; 0x30
 8003384:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_UART_MspInit+0x258>)
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	6313      	str	r3, [r2, #48]	; 0x30
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_UART_MspInit+0x258>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033be:	2307      	movs	r3, #7
 80033c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033c6:	4619      	mov	r1, r3
 80033c8:	4828      	ldr	r0, [pc, #160]	; (800346c <HAL_UART_MspInit+0x25c>)
 80033ca:	f000 fd8f 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033de:	2307      	movs	r3, #7
 80033e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033e6:	4619      	mov	r1, r3
 80033e8:	4825      	ldr	r0, [pc, #148]	; (8003480 <HAL_UART_MspInit+0x270>)
 80033ea:	f000 fd7f 	bl	8003eec <HAL_GPIO_Init>
}
 80033ee:	e09b      	b.n	8003528 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <HAL_UART_MspInit+0x274>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d146      	bne.n	8003488 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_UART_MspInit+0x258>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_UART_MspInit+0x258>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_UART_MspInit+0x258>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003432:	230c      	movs	r3, #12
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003442:	2307      	movs	r3, #7
 8003444:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800344a:	4619      	mov	r1, r3
 800344c:	4807      	ldr	r0, [pc, #28]	; (800346c <HAL_UART_MspInit+0x25c>)
 800344e:	f000 fd4d 	bl	8003eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2105      	movs	r1, #5
 8003456:	2026      	movs	r0, #38	; 0x26
 8003458:	f000 fc7f 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800345c:	2026      	movs	r0, #38	; 0x26
 800345e:	f000 fc98 	bl	8003d92 <HAL_NVIC_EnableIRQ>
}
 8003462:	e061      	b.n	8003528 <HAL_UART_MspInit+0x318>
 8003464:	40004c00 	.word	0x40004c00
 8003468:	40023800 	.word	0x40023800
 800346c:	40020000 	.word	0x40020000
 8003470:	40005000 	.word	0x40005000
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40011000 	.word	0x40011000
 8003480:	40020400 	.word	0x40020400
 8003484:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <HAL_UART_MspInit+0x320>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d14a      	bne.n	8003528 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_UART_MspInit+0x324>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_UART_MspInit+0x324>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_UART_MspInit+0x324>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034e6:	2320      	movs	r3, #32
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034f6:	2307      	movs	r3, #7
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034fe:	4619      	mov	r1, r3
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <HAL_UART_MspInit+0x328>)
 8003502:	f000 fcf3 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003518:	2307      	movs	r3, #7
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003520:	4619      	mov	r1, r3
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <HAL_UART_MspInit+0x32c>)
 8003524:	f000 fce2 	bl	8003eec <HAL_GPIO_Init>
}
 8003528:	bf00      	nop
 800352a:	3750      	adds	r7, #80	; 0x50
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40004800 	.word	0x40004800
 8003534:	40023800 	.word	0x40023800
 8003538:	40020800 	.word	0x40020800
 800353c:	40020400 	.word	0x40020400

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003578 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003544:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003546:	e003      	b.n	8003550 <LoopCopyDataInit>

08003548 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800354a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800354c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354e:	3104      	adds	r1, #4

08003550 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003554:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003556:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003558:	d3f6      	bcc.n	8003548 <CopyDataInit>
  ldr  r2, =_sbss
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800355c:	e002      	b.n	8003564 <LoopFillZerobss>

0800355e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003560:	f842 3b04 	str.w	r3, [r2], #4

08003564 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003568:	d3f9      	bcc.n	800355e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800356a:	f7ff f97f 	bl	800286c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356e:	f003 fcef 	bl	8006f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7fe fb93 	bl	8001c9c <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003578:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800357c:	0800b3b0 	.word	0x0800b3b0
  ldr  r0, =_sdata
 8003580:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003584:	20000394 	.word	0x20000394
  ldr  r2, =_sbss
 8003588:	20000398 	.word	0x20000398
  ldr  r3, = _ebss
 800358c:	20000900 	.word	0x20000900

08003590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC_IRQHandler>
	...

08003594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_Init+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_Init+0x40>)
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_Init+0x40>)
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_Init+0x40>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035bc:	2003      	movs	r0, #3
 80035be:	f000 fbc1 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f000 f808 	bl	80035d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c8:	f7ff f892 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_InitTick+0x54>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_InitTick+0x58>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fbd9 	bl	8003dae <HAL_SYSTICK_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00e      	b.n	8003624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d80a      	bhi.n	8003622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800360c:	2200      	movs	r2, #0
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f000 fba1 	bl	8003d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <HAL_InitTick+0x5c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200001b8 	.word	0x200001b8
 8003630:	200001c0 	.word	0x200001c0
 8003634:	200001bc 	.word	0x200001bc

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200001c0 	.word	0x200001c0
 800365c:	200008ec 	.word	0x200008ec

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200008ec 	.word	0x200008ec

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200001c0 	.word	0x200001c0

080036c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e033      	b.n	800373e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe f8de 	bl	80018a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d118      	bne.n	8003730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003706:	f023 0302 	bic.w	r3, r3, #2
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f94a 	bl	80039ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
 800372e:	e001      	b.n	8003734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x1c>
 8003760:	2302      	movs	r3, #2
 8003762:	e113      	b.n	800398c <HAL_ADC_ConfigChannel+0x244>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b09      	cmp	r3, #9
 8003772:	d925      	bls.n	80037c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	3b1e      	subs	r3, #30
 800378a:	2207      	movs	r2, #7
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43da      	mvns	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	400a      	ands	r2, r1
 8003798:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68d9      	ldr	r1, [r3, #12]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4403      	add	r3, r0
 80037b2:	3b1e      	subs	r3, #30
 80037b4:	409a      	lsls	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e022      	b.n	8003806 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	2207      	movs	r2, #7
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	400a      	ands	r2, r1
 80037e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4403      	add	r3, r0
 80037fc:	409a      	lsls	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d824      	bhi.n	8003858 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3b05      	subs	r3, #5
 8003820:	221f      	movs	r2, #31
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	400a      	ands	r2, r1
 800382e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	4618      	mov	r0, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	3b05      	subs	r3, #5
 800384a:	fa00 f203 	lsl.w	r2, r0, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
 8003856:	e04c      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d824      	bhi.n	80038aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	3b23      	subs	r3, #35	; 0x23
 8003872:	221f      	movs	r2, #31
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43da      	mvns	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	400a      	ands	r2, r1
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	4618      	mov	r0, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	3b23      	subs	r3, #35	; 0x23
 800389c:	fa00 f203 	lsl.w	r2, r0, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
 80038a8:	e023      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	3b41      	subs	r3, #65	; 0x41
 80038bc:	221f      	movs	r2, #31
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	400a      	ands	r2, r1
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	3b41      	subs	r3, #65	; 0x41
 80038e6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_ADC_ConfigChannel+0x250>)
 80038f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_ADC_ConfigChannel+0x254>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10f      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x1d8>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b12      	cmp	r3, #18
 8003906:	d10b      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_ADC_ConfigChannel+0x254>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12b      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x23a>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_ADC_ConfigChannel+0x258>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <HAL_ADC_ConfigChannel+0x1f4>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b11      	cmp	r3, #17
 800393a:	d122      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <HAL_ADC_ConfigChannel+0x258>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d111      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <HAL_ADC_ConfigChannel+0x260>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	0c9a      	lsrs	r2, r3, #18
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003974:	e002      	b.n	800397c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f9      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40012300 	.word	0x40012300
 800399c:	40012000 	.word	0x40012000
 80039a0:	10000012 	.word	0x10000012
 80039a4:	200001b8 	.word	0x200001b8
 80039a8:	431bde83 	.word	0x431bde83

080039ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b4:	4b79      	ldr	r3, [pc, #484]	; (8003b9c <ADC_Init+0x1f0>)
 80039b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <ADC_Init+0x1f4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	e00f      	b.n	8003aaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0202 	bic.w	r2, r2, #2
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7e1b      	ldrb	r3, [r3, #24]
 8003ac4:	005a      	lsls	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003af6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	3b01      	subs	r3, #1
 8003b04:	035a      	lsls	r2, r3, #13
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	e007      	b.n	8003b20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	051a      	lsls	r2, r3, #20
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6899      	ldr	r1, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b62:	025a      	lsls	r2, r3, #9
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	029a      	lsls	r2, r3, #10
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40012300 	.word	0x40012300
 8003ba0:	0f000001 	.word	0x0f000001

08003ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	; (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	210f      	movs	r1, #15
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d6c:	f7ff ff3e 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	6978      	ldr	r0, [r7, #20]
 8003d78:	f7ff ff8e 	bl	8003c98 <NVIC_EncodePriority>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff5d 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff31 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffa2 	bl	8003d00 <SysTick_Config>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dd4:	f7ff fc44 	bl	8003660 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e052      	b.n	8003e9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0216 	bic.w	r2, r2, #22
 8003e06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <HAL_DMA_Abort+0x62>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0208 	bic.w	r2, r2, #8
 8003e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e48:	e013      	b.n	8003e72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e4a:	f7ff fc09 	bl	8003660 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d90c      	bls.n	8003e72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e015      	b.n	8003e9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e4      	bne.n	8003e4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	223f      	movs	r2, #63	; 0x3f
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00c      	b.n	8003ede <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e165      	b.n	80041d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	f040 8154 	bne.w	80041ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d005      	beq.n	8003f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d130      	bne.n	8003fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f74:	2201      	movs	r2, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 0201 	and.w	r2, r3, #1
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d017      	beq.n	8003fdc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d123      	bne.n	8004030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	69b9      	ldr	r1, [r7, #24]
 800402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2203      	movs	r2, #3
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0203 	and.w	r2, r3, #3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80ae 	beq.w	80041ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b5d      	ldr	r3, [pc, #372]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_GPIO_Init+0x300>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b5a      	ldr	r3, [pc, #360]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408e:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_GPIO_Init+0x304>)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4f      	ldr	r2, [pc, #316]	; (80041f4 <HAL_GPIO_Init+0x308>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d025      	beq.n	8004106 <HAL_GPIO_Init+0x21a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4e      	ldr	r2, [pc, #312]	; (80041f8 <HAL_GPIO_Init+0x30c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <HAL_GPIO_Init+0x216>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4d      	ldr	r2, [pc, #308]	; (80041fc <HAL_GPIO_Init+0x310>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_Init+0x212>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4c      	ldr	r2, [pc, #304]	; (8004200 <HAL_GPIO_Init+0x314>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_Init+0x20e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4b      	ldr	r2, [pc, #300]	; (8004204 <HAL_GPIO_Init+0x318>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_Init+0x20a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a4a      	ldr	r2, [pc, #296]	; (8004208 <HAL_GPIO_Init+0x31c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_Init+0x206>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a49      	ldr	r2, [pc, #292]	; (800420c <HAL_GPIO_Init+0x320>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_Init+0x202>
 80040ea:	2306      	movs	r3, #6
 80040ec:	e00c      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040ee:	2307      	movs	r3, #7
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040f2:	2305      	movs	r3, #5
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 8004106:	2300      	movs	r3, #0
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f002 0203 	and.w	r2, r2, #3
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	; (80041f0 <HAL_GPIO_Init+0x304>)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004126:	4b3a      	ldr	r3, [pc, #232]	; (8004210 <HAL_GPIO_Init+0x324>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800414a:	4a31      	ldr	r2, [pc, #196]	; (8004210 <HAL_GPIO_Init+0x324>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004150:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <HAL_GPIO_Init+0x324>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004174:	4a26      	ldr	r2, [pc, #152]	; (8004210 <HAL_GPIO_Init+0x324>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_GPIO_Init+0x324>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c8:	4a11      	ldr	r2, [pc, #68]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f ae96 	bls.w	8003f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000
 8004208:	40021400 	.word	0x40021400
 800420c:	40021800 	.word	0x40021800
 8004210:	40013c00 	.word	0x40013c00

08004214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
 8004220:	4613      	mov	r3, r2
 8004222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004224:	787b      	ldrb	r3, [r7, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004230:	e003      	b.n	800423a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_PWREx_EnableOverDrive+0x94>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004274:	f7ff f9f4 	bl	8003660 <HAL_GetTick>
 8004278:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800427a:	e009      	b.n	8004290 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800427c:	f7ff f9f0 	bl	8003660 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800428a:	d901      	bls.n	8004290 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e01f      	b.n	80042d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d1ee      	bne.n	800427c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7ff f9dc 	bl	8003660 <HAL_GetTick>
 80042a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042aa:	e009      	b.n	80042c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ac:	f7ff f9d8 	bl	8003660 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ba:	d901      	bls.n	80042c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e007      	b.n	80042d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042cc:	d1ee      	bne.n	80042ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	420e0040 	.word	0x420e0040
 80042e0:	40007000 	.word	0x40007000
 80042e4:	420e0044 	.word	0x420e0044

080042e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cc      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b68      	ldr	r3, [pc, #416]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d90c      	bls.n	8004324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b65      	ldr	r3, [pc, #404]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b8      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800433c:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004354:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a52      	ldr	r2, [pc, #328]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800435e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	494d      	ldr	r1, [pc, #308]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d044      	beq.n	8004408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d119      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e06f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e067      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c6:	4b37      	ldr	r3, [pc, #220]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0203 	bic.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4934      	ldr	r1, [pc, #208]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d8:	f7ff f942 	bl	8003660 <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7ff f93e 	bl	8003660 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e04f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 020c 	and.w	r2, r3, #12
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	429a      	cmp	r2, r3
 8004406:	d1eb      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d20c      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e032      	b.n	8004496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443c:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4916      	ldr	r1, [pc, #88]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	490e      	ldr	r1, [pc, #56]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800446e:	f000 f855 	bl	800451c <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	490a      	ldr	r1, [pc, #40]	; (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1c8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff f8a2 	bl	80035d8 <HAL_InitTick>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023c00 	.word	0x40023c00
 80044a4:	40023800 	.word	0x40023800
 80044a8:	0800adc8 	.word	0x0800adc8
 80044ac:	200001b8 	.word	0x200001b8
 80044b0:	200001bc 	.word	0x200001bc

080044b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	200001b8 	.word	0x200001b8

080044cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d0:	f7ff fff0 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0a9b      	lsrs	r3, r3, #10
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4903      	ldr	r1, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	0800add8 	.word	0x0800add8

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044f8:	f7ff ffdc 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0b5b      	lsrs	r3, r3, #13
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4903      	ldr	r1, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	0800add8 	.word	0x0800add8

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b088      	sub	sp, #32
 8004522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004538:	4bce      	ldr	r3, [pc, #824]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b0c      	cmp	r3, #12
 8004542:	f200 818d 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x344>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_RCC_GetSysClockFreq+0x30>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004581 	.word	0x08004581
 8004550:	08004861 	.word	0x08004861
 8004554:	08004861 	.word	0x08004861
 8004558:	08004861 	.word	0x08004861
 800455c:	08004587 	.word	0x08004587
 8004560:	08004861 	.word	0x08004861
 8004564:	08004861 	.word	0x08004861
 8004568:	08004861 	.word	0x08004861
 800456c:	0800458d 	.word	0x0800458d
 8004570:	08004861 	.word	0x08004861
 8004574:	08004861 	.word	0x08004861
 8004578:	08004861 	.word	0x08004861
 800457c:	08004701 	.word	0x08004701
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004580:	4bbd      	ldr	r3, [pc, #756]	; (8004878 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004582:	61bb      	str	r3, [r7, #24]
       break;
 8004584:	e16f      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004586:	4bbd      	ldr	r3, [pc, #756]	; (800487c <HAL_RCC_GetSysClockFreq+0x360>)
 8004588:	61bb      	str	r3, [r7, #24]
      break;
 800458a:	e16c      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800458c:	4bb9      	ldr	r3, [pc, #740]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004594:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004596:	4bb7      	ldr	r3, [pc, #732]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d053      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a2:	4bb4      	ldr	r3, [pc, #720]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	ea02 0400 	and.w	r4, r2, r0
 80045ba:	603c      	str	r4, [r7, #0]
 80045bc:	400b      	ands	r3, r1
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c4:	4620      	mov	r0, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	014b      	lsls	r3, r1, #5
 80045d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045d6:	0142      	lsls	r2, r0, #5
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	4623      	mov	r3, r4
 80045de:	1ac0      	subs	r0, r0, r3
 80045e0:	462b      	mov	r3, r5
 80045e2:	eb61 0103 	sbc.w	r1, r1, r3
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	018b      	lsls	r3, r1, #6
 80045f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045f4:	0182      	lsls	r2, r0, #6
 80045f6:	1a12      	subs	r2, r2, r0
 80045f8:	eb63 0301 	sbc.w	r3, r3, r1
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	00d9      	lsls	r1, r3, #3
 8004606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800460a:	00d0      	lsls	r0, r2, #3
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4621      	mov	r1, r4
 8004612:	1852      	adds	r2, r2, r1
 8004614:	4629      	mov	r1, r5
 8004616:	eb43 0101 	adc.w	r1, r3, r1
 800461a:	460b      	mov	r3, r1
 800461c:	f04f 0000 	mov.w	r0, #0
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	0259      	lsls	r1, r3, #9
 8004626:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800462a:	0250      	lsls	r0, r2, #9
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	461a      	mov	r2, r3
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f7fc fb44 	bl	8000cc8 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e04c      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	461a      	mov	r2, r3
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	ea02 0a00 	and.w	sl, r2, r0
 8004662:	ea03 0b01 	and.w	fp, r3, r1
 8004666:	4650      	mov	r0, sl
 8004668:	4659      	mov	r1, fp
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	014b      	lsls	r3, r1, #5
 8004674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004678:	0142      	lsls	r2, r0, #5
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	ebb0 000a 	subs.w	r0, r0, sl
 8004682:	eb61 010b 	sbc.w	r1, r1, fp
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	018b      	lsls	r3, r1, #6
 8004690:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004694:	0182      	lsls	r2, r0, #6
 8004696:	1a12      	subs	r2, r2, r0
 8004698:	eb63 0301 	sbc.w	r3, r3, r1
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	00d9      	lsls	r1, r3, #3
 80046a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046aa:	00d0      	lsls	r0, r2, #3
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	eb12 020a 	adds.w	r2, r2, sl
 80046b4:	eb43 030b 	adc.w	r3, r3, fp
 80046b8:	f04f 0000 	mov.w	r0, #0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	0299      	lsls	r1, r3, #10
 80046c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046c6:	0290      	lsls	r0, r2, #10
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	f7fc faf6 	bl	8000cc8 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4613      	mov	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e4:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	61bb      	str	r3, [r7, #24]
      break;
 80046fe:	e0b2      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004700:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004708:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800470a:	4b5a      	ldr	r3, [pc, #360]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04d      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	099b      	lsrs	r3, r3, #6
 800471c:	461a      	mov	r2, r3
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	ea02 0800 	and.w	r8, r2, r0
 800472e:	ea03 0901 	and.w	r9, r3, r1
 8004732:	4640      	mov	r0, r8
 8004734:	4649      	mov	r1, r9
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	014b      	lsls	r3, r1, #5
 8004740:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004744:	0142      	lsls	r2, r0, #5
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	ebb0 0008 	subs.w	r0, r0, r8
 800474e:	eb61 0109 	sbc.w	r1, r1, r9
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	018b      	lsls	r3, r1, #6
 800475c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004760:	0182      	lsls	r2, r0, #6
 8004762:	1a12      	subs	r2, r2, r0
 8004764:	eb63 0301 	sbc.w	r3, r3, r1
 8004768:	f04f 0000 	mov.w	r0, #0
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	00d9      	lsls	r1, r3, #3
 8004772:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004776:	00d0      	lsls	r0, r2, #3
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	eb12 0208 	adds.w	r2, r2, r8
 8004780:	eb43 0309 	adc.w	r3, r3, r9
 8004784:	f04f 0000 	mov.w	r0, #0
 8004788:	f04f 0100 	mov.w	r1, #0
 800478c:	0259      	lsls	r1, r3, #9
 800478e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004792:	0250      	lsls	r0, r2, #9
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	461a      	mov	r2, r3
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	f7fc fa90 	bl	8000cc8 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4613      	mov	r3, r2
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e04a      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	461a      	mov	r2, r3
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	ea02 0400 	and.w	r4, r2, r0
 80047ca:	ea03 0501 	and.w	r5, r3, r1
 80047ce:	4620      	mov	r0, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	014b      	lsls	r3, r1, #5
 80047dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047e0:	0142      	lsls	r2, r0, #5
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	1b00      	subs	r0, r0, r4
 80047e8:	eb61 0105 	sbc.w	r1, r1, r5
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	018b      	lsls	r3, r1, #6
 80047f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047fa:	0182      	lsls	r2, r0, #6
 80047fc:	1a12      	subs	r2, r2, r0
 80047fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	00d9      	lsls	r1, r3, #3
 800480c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004810:	00d0      	lsls	r0, r2, #3
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	1912      	adds	r2, r2, r4
 8004818:	eb45 0303 	adc.w	r3, r5, r3
 800481c:	f04f 0000 	mov.w	r0, #0
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	0299      	lsls	r1, r3, #10
 8004826:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800482a:	0290      	lsls	r0, r2, #10
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	461a      	mov	r2, r3
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	f7fc fa44 	bl	8000cc8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_GetSysClockFreq+0x358>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0f1b      	lsrs	r3, r3, #28
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	61bb      	str	r3, [r7, #24]
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004862:	61bb      	str	r3, [r7, #24]
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	69bb      	ldr	r3, [r7, #24]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e28d      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8083 	beq.w	80049a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048a0:	4b94      	ldr	r3, [pc, #592]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d019      	beq.n	80048e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ac:	4b91      	ldr	r3, [pc, #580]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d106      	bne.n	80048c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048b8:	4b8e      	ldr	r3, [pc, #568]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c4:	d00c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d112      	bne.n	80048f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	4b84      	ldr	r3, [pc, #528]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <HAL_RCC_OscConfig+0x124>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d157      	bne.n	80049a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e25a      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x90>
 8004902:	4b7c      	ldr	r3, [pc, #496]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7b      	ldr	r2, [pc, #492]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xcc>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0xb4>
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a72      	ldr	r2, [pc, #456]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xcc>
 8004934:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6e      	ldr	r2, [pc, #440]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe fe84 	bl	8003660 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe fe80 	bl	8003660 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e21f      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xdc>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fe70 	bl	8003660 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe fe6c 	bl	8003660 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e20b      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b57      	ldr	r3, [pc, #348]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x104>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d06f      	beq.n	8004a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049b2:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049be:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d105      	bne.n	80049d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x186>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1d3      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4937      	ldr	r1, [pc, #220]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCC_OscConfig+0x278>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fe fe19 	bl	8003660 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fe fe15 	bl	8003660 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1b4      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4925      	ldr	r1, [pc, #148]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCC_OscConfig+0x278>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fdf8 	bl	8003660 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fe fdf4 	bl	8003660 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e193      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d036      	beq.n	8004b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fe fdd8 	bl	8003660 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fdd4 	bl	8003660 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e173      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x234>
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ada:	f7fe fdc1 	bl	8003660 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fe fdbd 	bl	8003660 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d907      	bls.n	8004b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e15c      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b8a      	ldr	r3, [pc, #552]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ea      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b83      	ldr	r3, [pc, #524]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a7e      	ldr	r2, [pc, #504]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <HAL_RCC_OscConfig+0x4b0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCC_OscConfig+0x4b0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a75      	ldr	r2, [pc, #468]	; (8004d30 <HAL_RCC_OscConfig+0x4b0>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fd7d 	bl	8003660 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fe fd79 	bl	8003660 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e118      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <HAL_RCC_OscConfig+0x4b0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x31e>
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a65      	ldr	r2, [pc, #404]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x358>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x340>
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a60      	ldr	r2, [pc, #384]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x358>
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a56      	ldr	r2, [pc, #344]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fe fd3e 	bl	8003660 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fe fd3a 	bl	8003660 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0d7      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x368>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fd28 	bl	8003660 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fe fd24 	bl	8003660 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0c1      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80ad 	beq.w	8004dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d060      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d145      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCC_OscConfig+0x4b4>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fcf8 	bl	8003660 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fe fcf4 	bl	8003660 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e093      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	491b      	ldr	r1, [pc, #108]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x4b4>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe fcc9 	bl	8003660 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe fcc5 	bl	8003660 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e064      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x452>
 8004cf0:	e05c      	b.n	8004dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x4b4>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fcb2 	bl	8003660 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fe fcae 	bl	8003660 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04d      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x480>
 8004d1e:	e045      	b.n	8004dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e040      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40007000 	.word	0x40007000
 8004d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d38:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCC_OscConfig+0x538>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d030      	beq.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d129      	bne.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d122      	bne.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d119      	bne.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	3b01      	subs	r3, #1
 8004d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d10f      	bne.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e041      	b.n	8004e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fe f828 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f000 fda6 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d001      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e04e      	b.n	8004f12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d022      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9e:	d01d      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d111      	bne.n	8004f00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b06      	cmp	r3, #6
 8004eec:	d010      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	e007      	b.n	8004f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40001800 	.word	0x40001800

08004f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e041      	b.n	8004fd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f839 	bl	8004fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f000 fce6 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x24>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e022      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d109      	bne.n	800502e <HAL_TIM_PWM_Start+0x3e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e015      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d109      	bne.n	8005048 <HAL_TIM_PWM_Start+0x58>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e008      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07c      	b.n	800515c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0x82>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	e013      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x92>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005080:	e00b      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005090:	e003      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff3c 	bl	8005f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <HAL_TIM_PWM_Start+0x174>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_PWM_Start+0xcc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <HAL_TIM_PWM_Start+0x178>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_TIM_PWM_Start+0xd0>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_TIM_PWM_Start+0xd2>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_PWM_Start+0x174>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d022      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d01d      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_PWM_Start+0x17c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <HAL_TIM_PWM_Start+0x180>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_TIM_PWM_Start+0x184>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a16      	ldr	r2, [pc, #88]	; (8005168 <HAL_TIM_PWM_Start+0x178>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_TIM_PWM_Start+0x188>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_TIM_PWM_Start+0x136>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_TIM_PWM_Start+0x18c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d111      	bne.n	800514a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b06      	cmp	r3, #6
 8005136:	d010      	beq.n	800515a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	e007      	b.n	800515a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40014000 	.word	0x40014000
 800517c:	40001800 	.word	0x40001800

08005180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e097      	b.n	80052c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fd fdc9 	bl	8002d40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c4:	f023 0307 	bic.w	r3, r3, #7
 80051c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f000 fbb9 	bl	800594c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	4313      	orrs	r3, r2
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005220:	f023 030c 	bic.w	r3, r3, #12
 8005224:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800522c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	4313      	orrs	r3, r2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	031b      	lsls	r3, r3, #12
 8005250:	4313      	orrs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	4313      	orrs	r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d110      	bne.n	800531e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005302:	7b7b      	ldrb	r3, [r7, #13]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d001      	beq.n	800530c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e069      	b.n	80053e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	e031      	b.n	8005382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d110      	bne.n	8005346 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d102      	bne.n	8005330 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800532a:	7b3b      	ldrb	r3, [r7, #12]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e055      	b.n	80053e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005344:	e01d      	b.n	8005382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d105      	bne.n	800535e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005352:	7b7b      	ldrb	r3, [r7, #13]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d102      	bne.n	800535e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005358:	7b3b      	ldrb	r3, [r7, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e03e      	b.n	80053e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_TIM_Encoder_Start+0xc4>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d008      	beq.n	80053a0 <HAL_TIM_Encoder_Start+0xd4>
 800538e:	e00f      	b.n	80053b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fdc1 	bl	8005f20 <TIM_CCxChannelCmd>
      break;
 800539e:	e016      	b.n	80053ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2201      	movs	r2, #1
 80053a6:	2104      	movs	r1, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fdb9 	bl	8005f20 <TIM_CCxChannelCmd>
      break;
 80053ae:	e00e      	b.n	80053ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fdb1 	bl	8005f20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	2104      	movs	r1, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fdaa 	bl	8005f20 <TIM_CCxChannelCmd>
      break;
 80053cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0202 	mvn.w	r2, #2
 8005414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa70 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa62 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa73 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0204 	mvn.w	r2, #4
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa46 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa38 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa49 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0208 	mvn.w	r2, #8
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2204      	movs	r2, #4
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa1c 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa0e 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa1f 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b10      	cmp	r3, #16
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0210 	mvn.w	r2, #16
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2208      	movs	r2, #8
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9f2 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9e4 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f9f5 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d10e      	bne.n	800556c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d107      	bne.n	800556c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0201 	mvn.w	r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fcd6 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d10e      	bne.n	8005598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d107      	bne.n	8005598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fdc2 	bl	800611c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9ba 	bl	8005938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0220 	mvn.w	r2, #32
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fd8c 	bl	8006108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800560e:	2302      	movs	r3, #2
 8005610:	e0ac      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	f200 809f 	bhi.w	8005760 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005761 	.word	0x08005761
 8005630:	08005761 	.word	0x08005761
 8005634:	08005761 	.word	0x08005761
 8005638:	0800569d 	.word	0x0800569d
 800563c:	08005761 	.word	0x08005761
 8005640:	08005761 	.word	0x08005761
 8005644:	08005761 	.word	0x08005761
 8005648:	080056df 	.word	0x080056df
 800564c:	08005761 	.word	0x08005761
 8005650:	08005761 	.word	0x08005761
 8005654:	08005761 	.word	0x08005761
 8005658:	0800571f 	.word	0x0800571f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa12 	bl	8005a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e062      	b.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fa62 	bl	8005b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	619a      	str	r2, [r3, #24]
      break;
 80056dc:	e041      	b.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fab7 	bl	8005c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0208 	orr.w	r2, r2, #8
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
      break;
 800571c:	e021      	b.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb0b 	bl	8005d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	61da      	str	r2, [r3, #28]
      break;
 800575e:	e000      	b.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIM_ConfigClockSource+0x18>
 8005788:	2302      	movs	r3, #2
 800578a:	e0b3      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x180>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c4:	d03e      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0xd0>
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	f200 8087 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d2:	f000 8085 	beq.w	80058e0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d87f      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d01a      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0xa2>
 80057e0:	2b70      	cmp	r3, #112	; 0x70
 80057e2:	d87b      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d050      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x116>
 80057e8:	2b60      	cmp	r3, #96	; 0x60
 80057ea:	d877      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d03c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0xf6>
 80057f0:	2b50      	cmp	r3, #80	; 0x50
 80057f2:	d873      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d058      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x136>
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d86f      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d064      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x156>
 8005800:	2b30      	cmp	r3, #48	; 0x30
 8005802:	d86b      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d060      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x156>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d867      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05c      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x156>
 8005810:	2b10      	cmp	r3, #16
 8005812:	d05a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005814:	e062      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6899      	ldr	r1, [r3, #8]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f000 fb5b 	bl	8005ee0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005838:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	609a      	str	r2, [r3, #8]
      break;
 8005842:	e04e      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6899      	ldr	r1, [r3, #8]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f000 fb44 	bl	8005ee0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005866:	609a      	str	r2, [r3, #8]
      break;
 8005868:	e03b      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fab8 	bl	8005dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2150      	movs	r1, #80	; 0x50
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb11 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 8005888:	e02b      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fad7 	bl	8005e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2160      	movs	r1, #96	; 0x60
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fb01 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 80058a8:	e01b      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6859      	ldr	r1, [r3, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f000 fa98 	bl	8005dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 faf1 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 80058c8:	e00b      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 fae8 	bl	8005eaa <TIM_ITRx_SetConfig>
        break;
 80058da:	e002      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058dc:	bf00      	nop
 80058de:	e000      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d00f      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3d      	ldr	r2, [pc, #244]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3c      	ldr	r2, [pc, #240]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <TIM_Base_SetConfig+0x120>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3a      	ldr	r2, [pc, #232]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2f      	ldr	r2, [pc, #188]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d027      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d023      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <TIM_Base_SetConfig+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <TIM_Base_SetConfig+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <TIM_Base_SetConfig+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <TIM_Base_SetConfig+0x134>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a24      	ldr	r2, [pc, #144]	; (8005a84 <TIM_Base_SetConfig+0x138>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a23      	ldr	r2, [pc, #140]	; (8005a88 <TIM_Base_SetConfig+0x13c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d103      	bne.n	8005a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	615a      	str	r2, [r3, #20]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40010400 	.word	0x40010400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800
 8005a80:	40001800 	.word	0x40001800
 8005a84:	40001c00 	.word	0x40001c00
 8005a88:	40002000 	.word	0x40002000

08005a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0302 	bic.w	r3, r3, #2
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <TIM_OC1_SetConfig+0xd8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC1_SetConfig+0x64>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <TIM_OC1_SetConfig+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d10c      	bne.n	8005b0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f023 0308 	bic.w	r3, r3, #8
 8005af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 0304 	bic.w	r3, r3, #4
 8005b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <TIM_OC1_SetConfig+0xd8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_OC1_SetConfig+0x8e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <TIM_OC1_SetConfig+0xdc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d111      	bne.n	8005b3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400

08005b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0210 	bic.w	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0320 	bic.w	r3, r3, #32
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <TIM_OC2_SetConfig+0xe4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC2_SetConfig+0x68>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a21      	ldr	r2, [pc, #132]	; (8005c54 <TIM_OC2_SetConfig+0xe8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10d      	bne.n	8005bf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <TIM_OC2_SetConfig+0xe4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC2_SetConfig+0x94>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <TIM_OC2_SetConfig+0xe8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d113      	bne.n	8005c28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40010400 	.word	0x40010400

08005c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <TIM_OC3_SetConfig+0xe0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_OC3_SetConfig+0x66>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <TIM_OC3_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10d      	bne.n	8005cda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <TIM_OC3_SetConfig+0xe0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_OC3_SetConfig+0x92>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <TIM_OC3_SetConfig+0xe4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d113      	bne.n	8005d12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC4_SetConfig+0xa4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC4_SetConfig+0x68>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <TIM_OC4_SetConfig+0xa8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d109      	bne.n	8005dbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 030a 	bic.w	r3, r3, #10
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0210 	bic.w	r2, r3, #16
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f043 0307 	orr.w	r3, r3, #7
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2201      	movs	r2, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	401a      	ands	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e05a      	b.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d022      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d01d      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d018      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00e      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a15      	ldr	r2, [pc, #84]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d10c      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4313      	orrs	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40001800 	.word	0x40001800

08006064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e03d      	b.n	80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e03f      	b.n	80061c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fd f85a 	bl	8003210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2224      	movs	r2, #36	; 0x24
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd1d 	bl	8006bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b08a      	sub	sp, #40	; 0x28
 80061ce:	af02      	add	r7, sp, #8
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d17c      	bne.n	80062e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_UART_Transmit+0x2c>
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e075      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_UART_Transmit+0x3e>
 8006204:	2302      	movs	r3, #2
 8006206:	e06e      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2221      	movs	r2, #33	; 0x21
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800621e:	f7fd fa1f 	bl	8003660 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d108      	bne.n	800624c <HAL_UART_Transmit+0x82>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e003      	b.n	8006254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800625c:	e02a      	b.n	80062b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fadf 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e036      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800628c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	3302      	adds	r3, #2
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e007      	b.n	80062a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1cf      	bne.n	800625e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	2140      	movs	r1, #64	; 0x40
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 faaf 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e006      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08a      	sub	sp, #40	; 0x28
 80062f2:	af02      	add	r7, sp, #8
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b20      	cmp	r3, #32
 800630c:	f040 808c 	bne.w	8006428 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_UART_Receive+0x2e>
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e084      	b.n	800642a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive+0x40>
 800632a:	2302      	movs	r3, #2
 800632c:	e07d      	b.n	800642a <HAL_UART_Receive+0x13c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2222      	movs	r2, #34	; 0x22
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800634a:	f7fd f989 	bl	8003660 <HAL_GetTick>
 800634e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006364:	d108      	bne.n	8006378 <HAL_UART_Receive+0x8a>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	e003      	b.n	8006380 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800637c:	2300      	movs	r3, #0
 800637e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006388:	e043      	b.n	8006412 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	2120      	movs	r1, #32
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fa49 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e042      	b.n	800642a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3302      	adds	r3, #2
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e01f      	b.n	8006404 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d007      	beq.n	80063de <HAL_UART_Receive+0xf0>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <HAL_UART_Receive+0xfe>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e008      	b.n	80063fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3301      	adds	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1b6      	bne.n	800638a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	4613      	mov	r3, r2
 800643e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	d11d      	bne.n	8006488 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Receive_IT+0x26>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e016      	b.n	800648a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_UART_Receive_IT+0x38>
 8006466:	2302      	movs	r3, #2
 8006468:	e00f      	b.n	800648a <HAL_UART_Receive_IT+0x58>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	461a      	mov	r2, r3
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa1e 	bl	80068c0 <UART_Start_Receive_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	e000      	b.n	800648a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_UART_IRQHandler+0x52>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fad1 	bl	8006a86 <UART_Receive_IT>
      return;
 80064e4:	e17c      	b.n	80067e0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80b1 	beq.w	8006650 <HAL_UART_IRQHandler+0x1bc>
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_UART_IRQHandler+0x70>
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80a6 	beq.w	8006650 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_UART_IRQHandler+0x90>
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f043 0201 	orr.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_UART_IRQHandler+0xb0>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f043 0202 	orr.w	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_UART_IRQHandler+0xd0>
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	f043 0204 	orr.w	r2, r3, #4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00f      	beq.n	800658e <HAL_UART_IRQHandler+0xfa>
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_UART_IRQHandler+0xee>
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0208 	orr.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 811f 	beq.w	80067d6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_UART_IRQHandler+0x11e>
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa6a 	bl	8006a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <HAL_UART_IRQHandler+0x146>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d031      	beq.n	800663e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9aa 	bl	8006934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d123      	bne.n	8006636 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d013      	beq.n	800662e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	4a77      	ldr	r2, [pc, #476]	; (80067e8 <HAL_UART_IRQHandler+0x354>)
 800660c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	4618      	mov	r0, r3
 8006614:	f7fd fc47 	bl	8003ea6 <HAL_DMA_Abort_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e00e      	b.n	800664c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8e6 	bl	8006800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006634:	e00a      	b.n	800664c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8e2 	bl	8006800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	e006      	b.n	800664c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8de 	bl	8006800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800664a:	e0c4      	b.n	80067d6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	bf00      	nop
    return;
 800664e:	e0c2      	b.n	80067d6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	2b01      	cmp	r3, #1
 8006656:	f040 80a2 	bne.w	800679e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 809c 	beq.w	800679e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8096 	beq.w	800679e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d14f      	bne.n	8006736 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066a0:	8a3b      	ldrh	r3, [r7, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 8099 	beq.w	80067da <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ac:	8a3a      	ldrh	r2, [r7, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	f080 8093 	bcs.w	80067da <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8a3a      	ldrh	r2, [r7, #16]
 80066b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d02b      	beq.n	800671e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695a      	ldr	r2, [r3, #20]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0210 	bic.w	r2, r2, #16
 8006712:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	4618      	mov	r0, r3
 800671a:	f7fd fb54 	bl	8003dc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006726:	b29b      	uxth	r3, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	b29b      	uxth	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f870 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006734:	e051      	b.n	80067da <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800673e:	b29b      	uxth	r3, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d047      	beq.n	80067de <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800674e:	8a7b      	ldrh	r3, [r7, #18]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d044      	beq.n	80067de <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006762:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0210 	bic.w	r2, r2, #16
 8006790:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f83c 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800679c:	e01f      	b.n	80067de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_UART_IRQHandler+0x326>
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f8ff 	bl	80069b6 <UART_Transmit_IT>
    return;
 80067b8:	e012      	b.n	80067e0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <HAL_UART_IRQHandler+0x34c>
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f941 	bl	8006a56 <UART_EndTransmit_IT>
    return;
 80067d4:	e004      	b.n	80067e0 <HAL_UART_IRQHandler+0x34c>
    return;
 80067d6:	bf00      	nop
 80067d8:	e002      	b.n	80067e0 <HAL_UART_IRQHandler+0x34c>
      return;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_UART_IRQHandler+0x34c>
      return;
 80067de:	bf00      	nop
  }
}
 80067e0:	3728      	adds	r7, #40	; 0x28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	0800698f 	.word	0x0800698f

080067ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	e02c      	b.n	8006898 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d028      	beq.n	8006898 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <UART_WaitOnFlagUntilTimeout+0x30>
 800684c:	f7fc ff08 	bl	8003660 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	d21d      	bcs.n	8006898 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800686a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e00f      	b.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d0c3      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2222      	movs	r2, #34	; 0x22
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006904:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0220 	orr.w	r2, r2, #32
 8006924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800694a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d107      	bne.n	8006974 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0210 	bic.w	r2, r2, #16
 8006972:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff ff29 	bl	8006800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b21      	cmp	r3, #33	; 0x21
 80069c8:	d13e      	bne.n	8006a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d2:	d114      	bne.n	80069fe <UART_Transmit_IT+0x48>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d110      	bne.n	80069fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	1c9a      	adds	r2, r3, #2
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	621a      	str	r2, [r3, #32]
 80069fc:	e008      	b.n	8006a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6211      	str	r1, [r2, #32]
 8006a08:	781a      	ldrb	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10f      	bne.n	8006a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff feb8 	bl	80067ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b22      	cmp	r3, #34	; 0x22
 8006a98:	f040 8087 	bne.w	8006baa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d117      	bne.n	8006ad6 <UART_Receive_IT+0x50>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d113      	bne.n	8006ad6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad4:	e026      	b.n	8006b24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d007      	beq.n	8006afa <UART_Receive_IT+0x74>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <UART_Receive_IT+0x82>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e008      	b.n	8006b1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	4619      	mov	r1, r3
 8006b32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d136      	bne.n	8006ba6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0220 	bic.w	r2, r2, #32
 8006b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d10e      	bne.n	8006b96 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0210 	bic.w	r2, r2, #16
 8006b86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fe40 	bl	8006814 <HAL_UARTEx_RxEventCallback>
 8006b94:	e002      	b.n	8006b9c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb fa56 	bl	8002048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e002      	b.n	8006bac <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e000      	b.n	8006bac <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	b09f      	sub	sp, #124	; 0x7c
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	ea40 0301 	orr.w	r3, r0, r1
 8006bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bf8:	f021 010c 	bic.w	r1, r1, #12
 8006bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c02:	430b      	orrs	r3, r1
 8006c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c12:	6999      	ldr	r1, [r3, #24]
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	ea40 0301 	orr.w	r3, r0, r1
 8006c1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4bc5      	ldr	r3, [pc, #788]	; (8006f38 <UART_SetConfig+0x384>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d004      	beq.n	8006c32 <UART_SetConfig+0x7e>
 8006c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4bc3      	ldr	r3, [pc, #780]	; (8006f3c <UART_SetConfig+0x388>)
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d103      	bne.n	8006c3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c32:	f7fd fc5f 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 8006c36:	6778      	str	r0, [r7, #116]	; 0x74
 8006c38:	e002      	b.n	8006c40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c3a:	f7fd fc47 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 8006c3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c48:	f040 80b6 	bne.w	8006db8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4e:	461c      	mov	r4, r3
 8006c50:	f04f 0500 	mov.w	r5, #0
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	1891      	adds	r1, r2, r2
 8006c5a:	6439      	str	r1, [r7, #64]	; 0x40
 8006c5c:	415b      	adcs	r3, r3
 8006c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c64:	1912      	adds	r2, r2, r4
 8006c66:	eb45 0303 	adc.w	r3, r5, r3
 8006c6a:	f04f 0000 	mov.w	r0, #0
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	00d9      	lsls	r1, r3, #3
 8006c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c78:	00d0      	lsls	r0, r2, #3
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	1911      	adds	r1, r2, r4
 8006c80:	6639      	str	r1, [r7, #96]	; 0x60
 8006c82:	416b      	adcs	r3, r5
 8006c84:	667b      	str	r3, [r7, #100]	; 0x64
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	1891      	adds	r1, r2, r2
 8006c92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c94:	415b      	adcs	r3, r3
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ca0:	f7fa f812 	bl	8000cc8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4ba5      	ldr	r3, [pc, #660]	; (8006f40 <UART_SetConfig+0x38c>)
 8006caa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	011e      	lsls	r6, r3, #4
 8006cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb4:	461c      	mov	r4, r3
 8006cb6:	f04f 0500 	mov.w	r5, #0
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	6339      	str	r1, [r7, #48]	; 0x30
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cca:	1912      	adds	r2, r2, r4
 8006ccc:	eb45 0303 	adc.w	r3, r5, r3
 8006cd0:	f04f 0000 	mov.w	r0, #0
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	00d9      	lsls	r1, r3, #3
 8006cda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cde:	00d0      	lsls	r0, r2, #3
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	1911      	adds	r1, r2, r4
 8006ce6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ce8:	416b      	adcs	r3, r5
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	1891      	adds	r1, r2, r2
 8006cf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cfa:	415b      	adcs	r3, r3
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d06:	f7f9 ffdf 	bl	8000cc8 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4b8c      	ldr	r3, [pc, #560]	; (8006f40 <UART_SetConfig+0x38c>)
 8006d10:	fba3 1302 	umull	r1, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	2164      	movs	r1, #100	; 0x64
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	3332      	adds	r3, #50	; 0x32
 8006d22:	4a87      	ldr	r2, [pc, #540]	; (8006f40 <UART_SetConfig+0x38c>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d30:	441e      	add	r6, r3
 8006d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d34:	4618      	mov	r0, r3
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	1894      	adds	r4, r2, r2
 8006d40:	623c      	str	r4, [r7, #32]
 8006d42:	415b      	adcs	r3, r3
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d4a:	1812      	adds	r2, r2, r0
 8006d4c:	eb41 0303 	adc.w	r3, r1, r3
 8006d50:	f04f 0400 	mov.w	r4, #0
 8006d54:	f04f 0500 	mov.w	r5, #0
 8006d58:	00dd      	lsls	r5, r3, #3
 8006d5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d5e:	00d4      	lsls	r4, r2, #3
 8006d60:	4622      	mov	r2, r4
 8006d62:	462b      	mov	r3, r5
 8006d64:	1814      	adds	r4, r2, r0
 8006d66:	653c      	str	r4, [r7, #80]	; 0x50
 8006d68:	414b      	adcs	r3, r1
 8006d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f04f 0300 	mov.w	r3, #0
 8006d76:	1891      	adds	r1, r2, r2
 8006d78:	61b9      	str	r1, [r7, #24]
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d86:	f7f9 ff9f 	bl	8000cc8 <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <UART_SetConfig+0x38c>)
 8006d90:	fba3 1302 	umull	r1, r3, r3, r2
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	2164      	movs	r1, #100	; 0x64
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	3332      	adds	r3, #50	; 0x32
 8006da2:	4a67      	ldr	r2, [pc, #412]	; (8006f40 <UART_SetConfig+0x38c>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	f003 0207 	and.w	r2, r3, #7
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4432      	add	r2, r6
 8006db4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006db6:	e0b9      	b.n	8006f2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dba:	461c      	mov	r4, r3
 8006dbc:	f04f 0500 	mov.w	r5, #0
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	462b      	mov	r3, r5
 8006dc4:	1891      	adds	r1, r2, r2
 8006dc6:	6139      	str	r1, [r7, #16]
 8006dc8:	415b      	adcs	r3, r3
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dd0:	1912      	adds	r2, r2, r4
 8006dd2:	eb45 0303 	adc.w	r3, r5, r3
 8006dd6:	f04f 0000 	mov.w	r0, #0
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	00d9      	lsls	r1, r3, #3
 8006de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006de4:	00d0      	lsls	r0, r2, #3
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	eb12 0804 	adds.w	r8, r2, r4
 8006dee:	eb43 0905 	adc.w	r9, r3, r5
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	008b      	lsls	r3, r1, #2
 8006e06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e0a:	0082      	lsls	r2, r0, #2
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	4649      	mov	r1, r9
 8006e10:	f7f9 ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4b49      	ldr	r3, [pc, #292]	; (8006f40 <UART_SetConfig+0x38c>)
 8006e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	011e      	lsls	r6, r3, #4
 8006e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e24:	4618      	mov	r0, r3
 8006e26:	f04f 0100 	mov.w	r1, #0
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	1894      	adds	r4, r2, r2
 8006e30:	60bc      	str	r4, [r7, #8]
 8006e32:	415b      	adcs	r3, r3
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e3a:	1812      	adds	r2, r2, r0
 8006e3c:	eb41 0303 	adc.w	r3, r1, r3
 8006e40:	f04f 0400 	mov.w	r4, #0
 8006e44:	f04f 0500 	mov.w	r5, #0
 8006e48:	00dd      	lsls	r5, r3, #3
 8006e4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e4e:	00d4      	lsls	r4, r2, #3
 8006e50:	4622      	mov	r2, r4
 8006e52:	462b      	mov	r3, r5
 8006e54:	1814      	adds	r4, r2, r0
 8006e56:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e58:	414b      	adcs	r3, r1
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	008b      	lsls	r3, r1, #2
 8006e70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e74:	0082      	lsls	r2, r0, #2
 8006e76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e7a:	f7f9 ff25 	bl	8000cc8 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <UART_SetConfig+0x38c>)
 8006e84:	fba3 1302 	umull	r1, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2164      	movs	r1, #100	; 0x64
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	3332      	adds	r3, #50	; 0x32
 8006e96:	4a2a      	ldr	r2, [pc, #168]	; (8006f40 <UART_SetConfig+0x38c>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea2:	441e      	add	r6, r3
 8006ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	1894      	adds	r4, r2, r2
 8006eb2:	603c      	str	r4, [r7, #0]
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebc:	1812      	adds	r2, r2, r0
 8006ebe:	eb41 0303 	adc.w	r3, r1, r3
 8006ec2:	f04f 0400 	mov.w	r4, #0
 8006ec6:	f04f 0500 	mov.w	r5, #0
 8006eca:	00dd      	lsls	r5, r3, #3
 8006ecc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ed0:	00d4      	lsls	r4, r2, #3
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	eb12 0a00 	adds.w	sl, r2, r0
 8006eda:	eb43 0b01 	adc.w	fp, r3, r1
 8006ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	008b      	lsls	r3, r1, #2
 8006ef2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ef6:	0082      	lsls	r2, r0, #2
 8006ef8:	4650      	mov	r0, sl
 8006efa:	4659      	mov	r1, fp
 8006efc:	f7f9 fee4 	bl	8000cc8 <__aeabi_uldivmod>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <UART_SetConfig+0x38c>)
 8006f06:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	2164      	movs	r1, #100	; 0x64
 8006f0e:	fb01 f303 	mul.w	r3, r1, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	3332      	adds	r3, #50	; 0x32
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <UART_SetConfig+0x38c>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4432      	add	r2, r6
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	377c      	adds	r7, #124	; 0x7c
 8006f30:	46bd      	mov	sp, r7
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	bf00      	nop
 8006f38:	40011000 	.word	0x40011000
 8006f3c:	40011400 	.word	0x40011400
 8006f40:	51eb851f 	.word	0x51eb851f

08006f44 <__errno>:
 8006f44:	4b01      	ldr	r3, [pc, #4]	; (8006f4c <__errno+0x8>)
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200001c4 	.word	0x200001c4

08006f50 <__libc_init_array>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	4d0d      	ldr	r5, [pc, #52]	; (8006f88 <__libc_init_array+0x38>)
 8006f54:	4c0d      	ldr	r4, [pc, #52]	; (8006f8c <__libc_init_array+0x3c>)
 8006f56:	1b64      	subs	r4, r4, r5
 8006f58:	10a4      	asrs	r4, r4, #2
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	42a6      	cmp	r6, r4
 8006f5e:	d109      	bne.n	8006f74 <__libc_init_array+0x24>
 8006f60:	4d0b      	ldr	r5, [pc, #44]	; (8006f90 <__libc_init_array+0x40>)
 8006f62:	4c0c      	ldr	r4, [pc, #48]	; (8006f94 <__libc_init_array+0x44>)
 8006f64:	f003 fef0 	bl	800ad48 <_init>
 8006f68:	1b64      	subs	r4, r4, r5
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	42a6      	cmp	r6, r4
 8006f70:	d105      	bne.n	8006f7e <__libc_init_array+0x2e>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f78:	4798      	blx	r3
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	e7ee      	b.n	8006f5c <__libc_init_array+0xc>
 8006f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f82:	4798      	blx	r3
 8006f84:	3601      	adds	r6, #1
 8006f86:	e7f2      	b.n	8006f6e <__libc_init_array+0x1e>
 8006f88:	0800b3a8 	.word	0x0800b3a8
 8006f8c:	0800b3a8 	.word	0x0800b3a8
 8006f90:	0800b3a8 	.word	0x0800b3a8
 8006f94:	0800b3ac 	.word	0x0800b3ac

08006f98 <memset>:
 8006f98:	4402      	add	r2, r0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d100      	bne.n	8006fa2 <memset+0xa>
 8006fa0:	4770      	bx	lr
 8006fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa6:	e7f9      	b.n	8006f9c <memset+0x4>

08006fa8 <__cvt>:
 8006fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	ec55 4b10 	vmov	r4, r5, d0
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	460e      	mov	r6, r1
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	bfbb      	ittet	lt
 8006fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fbe:	461d      	movlt	r5, r3
 8006fc0:	2300      	movge	r3, #0
 8006fc2:	232d      	movlt	r3, #45	; 0x2d
 8006fc4:	700b      	strb	r3, [r1, #0]
 8006fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fcc:	4691      	mov	r9, r2
 8006fce:	f023 0820 	bic.w	r8, r3, #32
 8006fd2:	bfbc      	itt	lt
 8006fd4:	4622      	movlt	r2, r4
 8006fd6:	4614      	movlt	r4, r2
 8006fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fdc:	d005      	beq.n	8006fea <__cvt+0x42>
 8006fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fe2:	d100      	bne.n	8006fe6 <__cvt+0x3e>
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	e000      	b.n	8006fec <__cvt+0x44>
 8006fea:	2103      	movs	r1, #3
 8006fec:	ab03      	add	r3, sp, #12
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	ab02      	add	r3, sp, #8
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	ec45 4b10 	vmov	d0, r4, r5
 8006ff8:	4653      	mov	r3, sl
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	f000 fef0 	bl	8007de0 <_dtoa_r>
 8007000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007004:	4607      	mov	r7, r0
 8007006:	d102      	bne.n	800700e <__cvt+0x66>
 8007008:	f019 0f01 	tst.w	r9, #1
 800700c:	d022      	beq.n	8007054 <__cvt+0xac>
 800700e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007012:	eb07 0906 	add.w	r9, r7, r6
 8007016:	d110      	bne.n	800703a <__cvt+0x92>
 8007018:	783b      	ldrb	r3, [r7, #0]
 800701a:	2b30      	cmp	r3, #48	; 0x30
 800701c:	d10a      	bne.n	8007034 <__cvt+0x8c>
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 fd6f 	bl	8000b08 <__aeabi_dcmpeq>
 800702a:	b918      	cbnz	r0, 8007034 <__cvt+0x8c>
 800702c:	f1c6 0601 	rsb	r6, r6, #1
 8007030:	f8ca 6000 	str.w	r6, [sl]
 8007034:	f8da 3000 	ldr.w	r3, [sl]
 8007038:	4499      	add	r9, r3
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8007046:	b108      	cbz	r0, 800704c <__cvt+0xa4>
 8007048:	f8cd 900c 	str.w	r9, [sp, #12]
 800704c:	2230      	movs	r2, #48	; 0x30
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	454b      	cmp	r3, r9
 8007052:	d307      	bcc.n	8007064 <__cvt+0xbc>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007058:	1bdb      	subs	r3, r3, r7
 800705a:	4638      	mov	r0, r7
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	b004      	add	sp, #16
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	1c59      	adds	r1, r3, #1
 8007066:	9103      	str	r1, [sp, #12]
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e7f0      	b.n	800704e <__cvt+0xa6>

0800706c <__exponent>:
 800706c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800706e:	4603      	mov	r3, r0
 8007070:	2900      	cmp	r1, #0
 8007072:	bfb8      	it	lt
 8007074:	4249      	neglt	r1, r1
 8007076:	f803 2b02 	strb.w	r2, [r3], #2
 800707a:	bfb4      	ite	lt
 800707c:	222d      	movlt	r2, #45	; 0x2d
 800707e:	222b      	movge	r2, #43	; 0x2b
 8007080:	2909      	cmp	r1, #9
 8007082:	7042      	strb	r2, [r0, #1]
 8007084:	dd2a      	ble.n	80070dc <__exponent+0x70>
 8007086:	f10d 0407 	add.w	r4, sp, #7
 800708a:	46a4      	mov	ip, r4
 800708c:	270a      	movs	r7, #10
 800708e:	46a6      	mov	lr, r4
 8007090:	460a      	mov	r2, r1
 8007092:	fb91 f6f7 	sdiv	r6, r1, r7
 8007096:	fb07 1516 	mls	r5, r7, r6, r1
 800709a:	3530      	adds	r5, #48	; 0x30
 800709c:	2a63      	cmp	r2, #99	; 0x63
 800709e:	f104 34ff 	add.w	r4, r4, #4294967295
 80070a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070a6:	4631      	mov	r1, r6
 80070a8:	dcf1      	bgt.n	800708e <__exponent+0x22>
 80070aa:	3130      	adds	r1, #48	; 0x30
 80070ac:	f1ae 0502 	sub.w	r5, lr, #2
 80070b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070b4:	1c44      	adds	r4, r0, #1
 80070b6:	4629      	mov	r1, r5
 80070b8:	4561      	cmp	r1, ip
 80070ba:	d30a      	bcc.n	80070d2 <__exponent+0x66>
 80070bc:	f10d 0209 	add.w	r2, sp, #9
 80070c0:	eba2 020e 	sub.w	r2, r2, lr
 80070c4:	4565      	cmp	r5, ip
 80070c6:	bf88      	it	hi
 80070c8:	2200      	movhi	r2, #0
 80070ca:	4413      	add	r3, r2
 80070cc:	1a18      	subs	r0, r3, r0
 80070ce:	b003      	add	sp, #12
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070da:	e7ed      	b.n	80070b8 <__exponent+0x4c>
 80070dc:	2330      	movs	r3, #48	; 0x30
 80070de:	3130      	adds	r1, #48	; 0x30
 80070e0:	7083      	strb	r3, [r0, #2]
 80070e2:	70c1      	strb	r1, [r0, #3]
 80070e4:	1d03      	adds	r3, r0, #4
 80070e6:	e7f1      	b.n	80070cc <__exponent+0x60>

080070e8 <_printf_float>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	ed2d 8b02 	vpush	{d8}
 80070f0:	b08d      	sub	sp, #52	; 0x34
 80070f2:	460c      	mov	r4, r1
 80070f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070f8:	4616      	mov	r6, r2
 80070fa:	461f      	mov	r7, r3
 80070fc:	4605      	mov	r5, r0
 80070fe:	f001 fe13 	bl	8008d28 <_localeconv_r>
 8007102:	f8d0 a000 	ldr.w	sl, [r0]
 8007106:	4650      	mov	r0, sl
 8007108:	f7f9 f882 	bl	8000210 <strlen>
 800710c:	2300      	movs	r3, #0
 800710e:	930a      	str	r3, [sp, #40]	; 0x28
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	f8d8 3000 	ldr.w	r3, [r8]
 8007118:	f894 b018 	ldrb.w	fp, [r4, #24]
 800711c:	3307      	adds	r3, #7
 800711e:	f023 0307 	bic.w	r3, r3, #7
 8007122:	f103 0208 	add.w	r2, r3, #8
 8007126:	f8c8 2000 	str.w	r2, [r8]
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007140:	ee08 0a10 	vmov	s16, r0
 8007144:	4b9f      	ldr	r3, [pc, #636]	; (80073c4 <_printf_float+0x2dc>)
 8007146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800714a:	f04f 32ff 	mov.w	r2, #4294967295
 800714e:	f7f9 fd0d 	bl	8000b6c <__aeabi_dcmpun>
 8007152:	bb88      	cbnz	r0, 80071b8 <_printf_float+0xd0>
 8007154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007158:	4b9a      	ldr	r3, [pc, #616]	; (80073c4 <_printf_float+0x2dc>)
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	f7f9 fce7 	bl	8000b30 <__aeabi_dcmple>
 8007162:	bb48      	cbnz	r0, 80071b8 <_printf_float+0xd0>
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	4640      	mov	r0, r8
 800716a:	4649      	mov	r1, r9
 800716c:	f7f9 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 8007170:	b110      	cbz	r0, 8007178 <_printf_float+0x90>
 8007172:	232d      	movs	r3, #45	; 0x2d
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	4b93      	ldr	r3, [pc, #588]	; (80073c8 <_printf_float+0x2e0>)
 800717a:	4894      	ldr	r0, [pc, #592]	; (80073cc <_printf_float+0x2e4>)
 800717c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007180:	bf94      	ite	ls
 8007182:	4698      	movls	r8, r3
 8007184:	4680      	movhi	r8, r0
 8007186:	2303      	movs	r3, #3
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	9b05      	ldr	r3, [sp, #20]
 800718c:	f023 0204 	bic.w	r2, r3, #4
 8007190:	6022      	str	r2, [r4, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	9700      	str	r7, [sp, #0]
 8007198:	4633      	mov	r3, r6
 800719a:	aa0b      	add	r2, sp, #44	; 0x2c
 800719c:	4621      	mov	r1, r4
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f9d8 	bl	8007554 <_printf_common>
 80071a4:	3001      	adds	r0, #1
 80071a6:	f040 8090 	bne.w	80072ca <_printf_float+0x1e2>
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	b00d      	add	sp, #52	; 0x34
 80071b0:	ecbd 8b02 	vpop	{d8}
 80071b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	4640      	mov	r0, r8
 80071be:	4649      	mov	r1, r9
 80071c0:	f7f9 fcd4 	bl	8000b6c <__aeabi_dcmpun>
 80071c4:	b140      	cbz	r0, 80071d8 <_printf_float+0xf0>
 80071c6:	464b      	mov	r3, r9
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfbc      	itt	lt
 80071cc:	232d      	movlt	r3, #45	; 0x2d
 80071ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071d2:	487f      	ldr	r0, [pc, #508]	; (80073d0 <_printf_float+0x2e8>)
 80071d4:	4b7f      	ldr	r3, [pc, #508]	; (80073d4 <_printf_float+0x2ec>)
 80071d6:	e7d1      	b.n	800717c <_printf_float+0x94>
 80071d8:	6863      	ldr	r3, [r4, #4]
 80071da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071de:	9206      	str	r2, [sp, #24]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	d13f      	bne.n	8007264 <_printf_float+0x17c>
 80071e4:	2306      	movs	r3, #6
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	9b05      	ldr	r3, [sp, #20]
 80071ea:	6861      	ldr	r1, [r4, #4]
 80071ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071f0:	2300      	movs	r3, #0
 80071f2:	9303      	str	r3, [sp, #12]
 80071f4:	ab0a      	add	r3, sp, #40	; 0x28
 80071f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071fa:	ab09      	add	r3, sp, #36	; 0x24
 80071fc:	ec49 8b10 	vmov	d0, r8, r9
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fecd 	bl	8006fa8 <__cvt>
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007212:	2b47      	cmp	r3, #71	; 0x47
 8007214:	4680      	mov	r8, r0
 8007216:	d108      	bne.n	800722a <_printf_float+0x142>
 8007218:	1cc8      	adds	r0, r1, #3
 800721a:	db02      	blt.n	8007222 <_printf_float+0x13a>
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	4299      	cmp	r1, r3
 8007220:	dd41      	ble.n	80072a6 <_printf_float+0x1be>
 8007222:	f1ab 0b02 	sub.w	fp, fp, #2
 8007226:	fa5f fb8b 	uxtb.w	fp, fp
 800722a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800722e:	d820      	bhi.n	8007272 <_printf_float+0x18a>
 8007230:	3901      	subs	r1, #1
 8007232:	465a      	mov	r2, fp
 8007234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007238:	9109      	str	r1, [sp, #36]	; 0x24
 800723a:	f7ff ff17 	bl	800706c <__exponent>
 800723e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007240:	1813      	adds	r3, r2, r0
 8007242:	2a01      	cmp	r2, #1
 8007244:	4681      	mov	r9, r0
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	dc02      	bgt.n	8007250 <_printf_float+0x168>
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	07d2      	lsls	r2, r2, #31
 800724e:	d501      	bpl.n	8007254 <_printf_float+0x16c>
 8007250:	3301      	adds	r3, #1
 8007252:	6123      	str	r3, [r4, #16]
 8007254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007258:	2b00      	cmp	r3, #0
 800725a:	d09c      	beq.n	8007196 <_printf_float+0xae>
 800725c:	232d      	movs	r3, #45	; 0x2d
 800725e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007262:	e798      	b.n	8007196 <_printf_float+0xae>
 8007264:	9a06      	ldr	r2, [sp, #24]
 8007266:	2a47      	cmp	r2, #71	; 0x47
 8007268:	d1be      	bne.n	80071e8 <_printf_float+0x100>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1bc      	bne.n	80071e8 <_printf_float+0x100>
 800726e:	2301      	movs	r3, #1
 8007270:	e7b9      	b.n	80071e6 <_printf_float+0xfe>
 8007272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007276:	d118      	bne.n	80072aa <_printf_float+0x1c2>
 8007278:	2900      	cmp	r1, #0
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	dd0b      	ble.n	8007296 <_printf_float+0x1ae>
 800727e:	6121      	str	r1, [r4, #16]
 8007280:	b913      	cbnz	r3, 8007288 <_printf_float+0x1a0>
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	07d0      	lsls	r0, r2, #31
 8007286:	d502      	bpl.n	800728e <_printf_float+0x1a6>
 8007288:	3301      	adds	r3, #1
 800728a:	440b      	add	r3, r1
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007290:	f04f 0900 	mov.w	r9, #0
 8007294:	e7de      	b.n	8007254 <_printf_float+0x16c>
 8007296:	b913      	cbnz	r3, 800729e <_printf_float+0x1b6>
 8007298:	6822      	ldr	r2, [r4, #0]
 800729a:	07d2      	lsls	r2, r2, #31
 800729c:	d501      	bpl.n	80072a2 <_printf_float+0x1ba>
 800729e:	3302      	adds	r3, #2
 80072a0:	e7f4      	b.n	800728c <_printf_float+0x1a4>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7f2      	b.n	800728c <_printf_float+0x1a4>
 80072a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ac:	4299      	cmp	r1, r3
 80072ae:	db05      	blt.n	80072bc <_printf_float+0x1d4>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	6121      	str	r1, [r4, #16]
 80072b4:	07d8      	lsls	r0, r3, #31
 80072b6:	d5ea      	bpl.n	800728e <_printf_float+0x1a6>
 80072b8:	1c4b      	adds	r3, r1, #1
 80072ba:	e7e7      	b.n	800728c <_printf_float+0x1a4>
 80072bc:	2900      	cmp	r1, #0
 80072be:	bfd4      	ite	le
 80072c0:	f1c1 0202 	rsble	r2, r1, #2
 80072c4:	2201      	movgt	r2, #1
 80072c6:	4413      	add	r3, r2
 80072c8:	e7e0      	b.n	800728c <_printf_float+0x1a4>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	055a      	lsls	r2, r3, #21
 80072ce:	d407      	bmi.n	80072e0 <_printf_float+0x1f8>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	4642      	mov	r2, r8
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	d12c      	bne.n	8007338 <_printf_float+0x250>
 80072de:	e764      	b.n	80071aa <_printf_float+0xc2>
 80072e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072e4:	f240 80e0 	bls.w	80074a8 <_printf_float+0x3c0>
 80072e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072ec:	2200      	movs	r2, #0
 80072ee:	2300      	movs	r3, #0
 80072f0:	f7f9 fc0a 	bl	8000b08 <__aeabi_dcmpeq>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d034      	beq.n	8007362 <_printf_float+0x27a>
 80072f8:	4a37      	ldr	r2, [pc, #220]	; (80073d8 <_printf_float+0x2f0>)
 80072fa:	2301      	movs	r3, #1
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af51 	beq.w	80071aa <_printf_float+0xc2>
 8007308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800730c:	429a      	cmp	r2, r3
 800730e:	db02      	blt.n	8007316 <_printf_float+0x22e>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07d8      	lsls	r0, r3, #31
 8007314:	d510      	bpl.n	8007338 <_printf_float+0x250>
 8007316:	ee18 3a10 	vmov	r3, s16
 800731a:	4652      	mov	r2, sl
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af41 	beq.w	80071aa <_printf_float+0xc2>
 8007328:	f04f 0800 	mov.w	r8, #0
 800732c:	f104 091a 	add.w	r9, r4, #26
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	3b01      	subs	r3, #1
 8007334:	4543      	cmp	r3, r8
 8007336:	dc09      	bgt.n	800734c <_printf_float+0x264>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	079b      	lsls	r3, r3, #30
 800733c:	f100 8105 	bmi.w	800754a <_printf_float+0x462>
 8007340:	68e0      	ldr	r0, [r4, #12]
 8007342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007344:	4298      	cmp	r0, r3
 8007346:	bfb8      	it	lt
 8007348:	4618      	movlt	r0, r3
 800734a:	e730      	b.n	80071ae <_printf_float+0xc6>
 800734c:	2301      	movs	r3, #1
 800734e:	464a      	mov	r2, r9
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af27 	beq.w	80071aa <_printf_float+0xc2>
 800735c:	f108 0801 	add.w	r8, r8, #1
 8007360:	e7e6      	b.n	8007330 <_printf_float+0x248>
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	dc39      	bgt.n	80073dc <_printf_float+0x2f4>
 8007368:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <_printf_float+0x2f0>)
 800736a:	2301      	movs	r3, #1
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af19 	beq.w	80071aa <_printf_float+0xc2>
 8007378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800737c:	4313      	orrs	r3, r2
 800737e:	d102      	bne.n	8007386 <_printf_float+0x29e>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07d9      	lsls	r1, r3, #31
 8007384:	d5d8      	bpl.n	8007338 <_printf_float+0x250>
 8007386:	ee18 3a10 	vmov	r3, s16
 800738a:	4652      	mov	r2, sl
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f af09 	beq.w	80071aa <_printf_float+0xc2>
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	f104 0a1a 	add.w	sl, r4, #26
 80073a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a2:	425b      	negs	r3, r3
 80073a4:	454b      	cmp	r3, r9
 80073a6:	dc01      	bgt.n	80073ac <_printf_float+0x2c4>
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	e792      	b.n	80072d2 <_printf_float+0x1ea>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4652      	mov	r2, sl
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f aef7 	beq.w	80071aa <_printf_float+0xc2>
 80073bc:	f109 0901 	add.w	r9, r9, #1
 80073c0:	e7ee      	b.n	80073a0 <_printf_float+0x2b8>
 80073c2:	bf00      	nop
 80073c4:	7fefffff 	.word	0x7fefffff
 80073c8:	0800ade4 	.word	0x0800ade4
 80073cc:	0800ade8 	.word	0x0800ade8
 80073d0:	0800adf0 	.word	0x0800adf0
 80073d4:	0800adec 	.word	0x0800adec
 80073d8:	0800adf4 	.word	0x0800adf4
 80073dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073e0:	429a      	cmp	r2, r3
 80073e2:	bfa8      	it	ge
 80073e4:	461a      	movge	r2, r3
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	4691      	mov	r9, r2
 80073ea:	dc37      	bgt.n	800745c <_printf_float+0x374>
 80073ec:	f04f 0b00 	mov.w	fp, #0
 80073f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073f4:	f104 021a 	add.w	r2, r4, #26
 80073f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	eba3 0309 	sub.w	r3, r3, r9
 8007400:	455b      	cmp	r3, fp
 8007402:	dc33      	bgt.n	800746c <_printf_float+0x384>
 8007404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	db3b      	blt.n	8007484 <_printf_float+0x39c>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	07da      	lsls	r2, r3, #31
 8007410:	d438      	bmi.n	8007484 <_printf_float+0x39c>
 8007412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007414:	9b05      	ldr	r3, [sp, #20]
 8007416:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	eba2 0901 	sub.w	r9, r2, r1
 800741e:	4599      	cmp	r9, r3
 8007420:	bfa8      	it	ge
 8007422:	4699      	movge	r9, r3
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	dc35      	bgt.n	8007496 <_printf_float+0x3ae>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007432:	f104 0a1a 	add.w	sl, r4, #26
 8007436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	eba3 0309 	sub.w	r3, r3, r9
 8007440:	4543      	cmp	r3, r8
 8007442:	f77f af79 	ble.w	8007338 <_printf_float+0x250>
 8007446:	2301      	movs	r3, #1
 8007448:	4652      	mov	r2, sl
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	f43f aeaa 	beq.w	80071aa <_printf_float+0xc2>
 8007456:	f108 0801 	add.w	r8, r8, #1
 800745a:	e7ec      	b.n	8007436 <_printf_float+0x34e>
 800745c:	4613      	mov	r3, r2
 800745e:	4631      	mov	r1, r6
 8007460:	4642      	mov	r2, r8
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	d1c0      	bne.n	80073ec <_printf_float+0x304>
 800746a:	e69e      	b.n	80071aa <_printf_float+0xc2>
 800746c:	2301      	movs	r3, #1
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	9205      	str	r2, [sp, #20]
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f ae97 	beq.w	80071aa <_printf_float+0xc2>
 800747c:	9a05      	ldr	r2, [sp, #20]
 800747e:	f10b 0b01 	add.w	fp, fp, #1
 8007482:	e7b9      	b.n	80073f8 <_printf_float+0x310>
 8007484:	ee18 3a10 	vmov	r3, s16
 8007488:	4652      	mov	r2, sl
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	d1be      	bne.n	8007412 <_printf_float+0x32a>
 8007494:	e689      	b.n	80071aa <_printf_float+0xc2>
 8007496:	9a05      	ldr	r2, [sp, #20]
 8007498:	464b      	mov	r3, r9
 800749a:	4442      	add	r2, r8
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	d1c1      	bne.n	800742a <_printf_float+0x342>
 80074a6:	e680      	b.n	80071aa <_printf_float+0xc2>
 80074a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074aa:	2a01      	cmp	r2, #1
 80074ac:	dc01      	bgt.n	80074b2 <_printf_float+0x3ca>
 80074ae:	07db      	lsls	r3, r3, #31
 80074b0:	d538      	bpl.n	8007524 <_printf_float+0x43c>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4642      	mov	r2, r8
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	f43f ae74 	beq.w	80071aa <_printf_float+0xc2>
 80074c2:	ee18 3a10 	vmov	r3, s16
 80074c6:	4652      	mov	r2, sl
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f ae6b 	beq.w	80071aa <_printf_float+0xc2>
 80074d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074d8:	2200      	movs	r2, #0
 80074da:	2300      	movs	r3, #0
 80074dc:	f7f9 fb14 	bl	8000b08 <__aeabi_dcmpeq>
 80074e0:	b9d8      	cbnz	r0, 800751a <_printf_float+0x432>
 80074e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e4:	f108 0201 	add.w	r2, r8, #1
 80074e8:	3b01      	subs	r3, #1
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	d10e      	bne.n	8007512 <_printf_float+0x42a>
 80074f4:	e659      	b.n	80071aa <_printf_float+0xc2>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4652      	mov	r2, sl
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	f43f ae52 	beq.w	80071aa <_printf_float+0xc2>
 8007506:	f108 0801 	add.w	r8, r8, #1
 800750a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750c:	3b01      	subs	r3, #1
 800750e:	4543      	cmp	r3, r8
 8007510:	dcf1      	bgt.n	80074f6 <_printf_float+0x40e>
 8007512:	464b      	mov	r3, r9
 8007514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007518:	e6dc      	b.n	80072d4 <_printf_float+0x1ec>
 800751a:	f04f 0800 	mov.w	r8, #0
 800751e:	f104 0a1a 	add.w	sl, r4, #26
 8007522:	e7f2      	b.n	800750a <_printf_float+0x422>
 8007524:	2301      	movs	r3, #1
 8007526:	4642      	mov	r2, r8
 8007528:	e7df      	b.n	80074ea <_printf_float+0x402>
 800752a:	2301      	movs	r3, #1
 800752c:	464a      	mov	r2, r9
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f ae38 	beq.w	80071aa <_printf_float+0xc2>
 800753a:	f108 0801 	add.w	r8, r8, #1
 800753e:	68e3      	ldr	r3, [r4, #12]
 8007540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007542:	1a5b      	subs	r3, r3, r1
 8007544:	4543      	cmp	r3, r8
 8007546:	dcf0      	bgt.n	800752a <_printf_float+0x442>
 8007548:	e6fa      	b.n	8007340 <_printf_float+0x258>
 800754a:	f04f 0800 	mov.w	r8, #0
 800754e:	f104 0919 	add.w	r9, r4, #25
 8007552:	e7f4      	b.n	800753e <_printf_float+0x456>

08007554 <_printf_common>:
 8007554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007558:	4616      	mov	r6, r2
 800755a:	4699      	mov	r9, r3
 800755c:	688a      	ldr	r2, [r1, #8]
 800755e:	690b      	ldr	r3, [r1, #16]
 8007560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007564:	4293      	cmp	r3, r2
 8007566:	bfb8      	it	lt
 8007568:	4613      	movlt	r3, r2
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007570:	4607      	mov	r7, r0
 8007572:	460c      	mov	r4, r1
 8007574:	b10a      	cbz	r2, 800757a <_printf_common+0x26>
 8007576:	3301      	adds	r3, #1
 8007578:	6033      	str	r3, [r6, #0]
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	0699      	lsls	r1, r3, #26
 800757e:	bf42      	ittt	mi
 8007580:	6833      	ldrmi	r3, [r6, #0]
 8007582:	3302      	addmi	r3, #2
 8007584:	6033      	strmi	r3, [r6, #0]
 8007586:	6825      	ldr	r5, [r4, #0]
 8007588:	f015 0506 	ands.w	r5, r5, #6
 800758c:	d106      	bne.n	800759c <_printf_common+0x48>
 800758e:	f104 0a19 	add.w	sl, r4, #25
 8007592:	68e3      	ldr	r3, [r4, #12]
 8007594:	6832      	ldr	r2, [r6, #0]
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	42ab      	cmp	r3, r5
 800759a:	dc26      	bgt.n	80075ea <_printf_common+0x96>
 800759c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075a0:	1e13      	subs	r3, r2, #0
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	bf18      	it	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	0692      	lsls	r2, r2, #26
 80075aa:	d42b      	bmi.n	8007604 <_printf_common+0xb0>
 80075ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075b0:	4649      	mov	r1, r9
 80075b2:	4638      	mov	r0, r7
 80075b4:	47c0      	blx	r8
 80075b6:	3001      	adds	r0, #1
 80075b8:	d01e      	beq.n	80075f8 <_printf_common+0xa4>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	68e5      	ldr	r5, [r4, #12]
 80075be:	6832      	ldr	r2, [r6, #0]
 80075c0:	f003 0306 	and.w	r3, r3, #6
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	bf08      	it	eq
 80075c8:	1aad      	subeq	r5, r5, r2
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	6922      	ldr	r2, [r4, #16]
 80075ce:	bf0c      	ite	eq
 80075d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075d4:	2500      	movne	r5, #0
 80075d6:	4293      	cmp	r3, r2
 80075d8:	bfc4      	itt	gt
 80075da:	1a9b      	subgt	r3, r3, r2
 80075dc:	18ed      	addgt	r5, r5, r3
 80075de:	2600      	movs	r6, #0
 80075e0:	341a      	adds	r4, #26
 80075e2:	42b5      	cmp	r5, r6
 80075e4:	d11a      	bne.n	800761c <_printf_common+0xc8>
 80075e6:	2000      	movs	r0, #0
 80075e8:	e008      	b.n	80075fc <_printf_common+0xa8>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4652      	mov	r2, sl
 80075ee:	4649      	mov	r1, r9
 80075f0:	4638      	mov	r0, r7
 80075f2:	47c0      	blx	r8
 80075f4:	3001      	adds	r0, #1
 80075f6:	d103      	bne.n	8007600 <_printf_common+0xac>
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007600:	3501      	adds	r5, #1
 8007602:	e7c6      	b.n	8007592 <_printf_common+0x3e>
 8007604:	18e1      	adds	r1, r4, r3
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	2030      	movs	r0, #48	; 0x30
 800760a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800760e:	4422      	add	r2, r4
 8007610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007618:	3302      	adds	r3, #2
 800761a:	e7c7      	b.n	80075ac <_printf_common+0x58>
 800761c:	2301      	movs	r3, #1
 800761e:	4622      	mov	r2, r4
 8007620:	4649      	mov	r1, r9
 8007622:	4638      	mov	r0, r7
 8007624:	47c0      	blx	r8
 8007626:	3001      	adds	r0, #1
 8007628:	d0e6      	beq.n	80075f8 <_printf_common+0xa4>
 800762a:	3601      	adds	r6, #1
 800762c:	e7d9      	b.n	80075e2 <_printf_common+0x8e>
	...

08007630 <_printf_i>:
 8007630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	4691      	mov	r9, r2
 8007638:	7e27      	ldrb	r7, [r4, #24]
 800763a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800763c:	2f78      	cmp	r7, #120	; 0x78
 800763e:	4680      	mov	r8, r0
 8007640:	469a      	mov	sl, r3
 8007642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007646:	d807      	bhi.n	8007658 <_printf_i+0x28>
 8007648:	2f62      	cmp	r7, #98	; 0x62
 800764a:	d80a      	bhi.n	8007662 <_printf_i+0x32>
 800764c:	2f00      	cmp	r7, #0
 800764e:	f000 80d8 	beq.w	8007802 <_printf_i+0x1d2>
 8007652:	2f58      	cmp	r7, #88	; 0x58
 8007654:	f000 80a3 	beq.w	800779e <_printf_i+0x16e>
 8007658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800765c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007660:	e03a      	b.n	80076d8 <_printf_i+0xa8>
 8007662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007666:	2b15      	cmp	r3, #21
 8007668:	d8f6      	bhi.n	8007658 <_printf_i+0x28>
 800766a:	a001      	add	r0, pc, #4	; (adr r0, 8007670 <_printf_i+0x40>)
 800766c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007670:	080076c9 	.word	0x080076c9
 8007674:	080076dd 	.word	0x080076dd
 8007678:	08007659 	.word	0x08007659
 800767c:	08007659 	.word	0x08007659
 8007680:	08007659 	.word	0x08007659
 8007684:	08007659 	.word	0x08007659
 8007688:	080076dd 	.word	0x080076dd
 800768c:	08007659 	.word	0x08007659
 8007690:	08007659 	.word	0x08007659
 8007694:	08007659 	.word	0x08007659
 8007698:	08007659 	.word	0x08007659
 800769c:	080077e9 	.word	0x080077e9
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	080077cb 	.word	0x080077cb
 80076a8:	08007659 	.word	0x08007659
 80076ac:	08007659 	.word	0x08007659
 80076b0:	0800780b 	.word	0x0800780b
 80076b4:	08007659 	.word	0x08007659
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	08007659 	.word	0x08007659
 80076c0:	08007659 	.word	0x08007659
 80076c4:	080077d3 	.word	0x080077d3
 80076c8:	680b      	ldr	r3, [r1, #0]
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	600a      	str	r2, [r1, #0]
 80076d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d8:	2301      	movs	r3, #1
 80076da:	e0a3      	b.n	8007824 <_printf_i+0x1f4>
 80076dc:	6825      	ldr	r5, [r4, #0]
 80076de:	6808      	ldr	r0, [r1, #0]
 80076e0:	062e      	lsls	r6, r5, #24
 80076e2:	f100 0304 	add.w	r3, r0, #4
 80076e6:	d50a      	bpl.n	80076fe <_printf_i+0xce>
 80076e8:	6805      	ldr	r5, [r0, #0]
 80076ea:	600b      	str	r3, [r1, #0]
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	da03      	bge.n	80076f8 <_printf_i+0xc8>
 80076f0:	232d      	movs	r3, #45	; 0x2d
 80076f2:	426d      	negs	r5, r5
 80076f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f8:	485e      	ldr	r0, [pc, #376]	; (8007874 <_printf_i+0x244>)
 80076fa:	230a      	movs	r3, #10
 80076fc:	e019      	b.n	8007732 <_printf_i+0x102>
 80076fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007702:	6805      	ldr	r5, [r0, #0]
 8007704:	600b      	str	r3, [r1, #0]
 8007706:	bf18      	it	ne
 8007708:	b22d      	sxthne	r5, r5
 800770a:	e7ef      	b.n	80076ec <_printf_i+0xbc>
 800770c:	680b      	ldr	r3, [r1, #0]
 800770e:	6825      	ldr	r5, [r4, #0]
 8007710:	1d18      	adds	r0, r3, #4
 8007712:	6008      	str	r0, [r1, #0]
 8007714:	0628      	lsls	r0, r5, #24
 8007716:	d501      	bpl.n	800771c <_printf_i+0xec>
 8007718:	681d      	ldr	r5, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0xf2>
 800771c:	0669      	lsls	r1, r5, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0xe8>
 8007720:	881d      	ldrh	r5, [r3, #0]
 8007722:	4854      	ldr	r0, [pc, #336]	; (8007874 <_printf_i+0x244>)
 8007724:	2f6f      	cmp	r7, #111	; 0x6f
 8007726:	bf0c      	ite	eq
 8007728:	2308      	moveq	r3, #8
 800772a:	230a      	movne	r3, #10
 800772c:	2100      	movs	r1, #0
 800772e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007732:	6866      	ldr	r6, [r4, #4]
 8007734:	60a6      	str	r6, [r4, #8]
 8007736:	2e00      	cmp	r6, #0
 8007738:	bfa2      	ittt	ge
 800773a:	6821      	ldrge	r1, [r4, #0]
 800773c:	f021 0104 	bicge.w	r1, r1, #4
 8007740:	6021      	strge	r1, [r4, #0]
 8007742:	b90d      	cbnz	r5, 8007748 <_printf_i+0x118>
 8007744:	2e00      	cmp	r6, #0
 8007746:	d04d      	beq.n	80077e4 <_printf_i+0x1b4>
 8007748:	4616      	mov	r6, r2
 800774a:	fbb5 f1f3 	udiv	r1, r5, r3
 800774e:	fb03 5711 	mls	r7, r3, r1, r5
 8007752:	5dc7      	ldrb	r7, [r0, r7]
 8007754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007758:	462f      	mov	r7, r5
 800775a:	42bb      	cmp	r3, r7
 800775c:	460d      	mov	r5, r1
 800775e:	d9f4      	bls.n	800774a <_printf_i+0x11a>
 8007760:	2b08      	cmp	r3, #8
 8007762:	d10b      	bne.n	800777c <_printf_i+0x14c>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	07df      	lsls	r7, r3, #31
 8007768:	d508      	bpl.n	800777c <_printf_i+0x14c>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	4299      	cmp	r1, r3
 8007770:	bfde      	ittt	le
 8007772:	2330      	movle	r3, #48	; 0x30
 8007774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800777c:	1b92      	subs	r2, r2, r6
 800777e:	6122      	str	r2, [r4, #16]
 8007780:	f8cd a000 	str.w	sl, [sp]
 8007784:	464b      	mov	r3, r9
 8007786:	aa03      	add	r2, sp, #12
 8007788:	4621      	mov	r1, r4
 800778a:	4640      	mov	r0, r8
 800778c:	f7ff fee2 	bl	8007554 <_printf_common>
 8007790:	3001      	adds	r0, #1
 8007792:	d14c      	bne.n	800782e <_printf_i+0x1fe>
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	b004      	add	sp, #16
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	4835      	ldr	r0, [pc, #212]	; (8007874 <_printf_i+0x244>)
 80077a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	680e      	ldr	r6, [r1, #0]
 80077a8:	061f      	lsls	r7, r3, #24
 80077aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80077ae:	600e      	str	r6, [r1, #0]
 80077b0:	d514      	bpl.n	80077dc <_printf_i+0x1ac>
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	bf44      	itt	mi
 80077b6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ba:	6023      	strmi	r3, [r4, #0]
 80077bc:	b91d      	cbnz	r5, 80077c6 <_printf_i+0x196>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	f023 0320 	bic.w	r3, r3, #32
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	2310      	movs	r3, #16
 80077c8:	e7b0      	b.n	800772c <_printf_i+0xfc>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	f043 0320 	orr.w	r3, r3, #32
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	2378      	movs	r3, #120	; 0x78
 80077d4:	4828      	ldr	r0, [pc, #160]	; (8007878 <_printf_i+0x248>)
 80077d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077da:	e7e3      	b.n	80077a4 <_printf_i+0x174>
 80077dc:	065e      	lsls	r6, r3, #25
 80077de:	bf48      	it	mi
 80077e0:	b2ad      	uxthmi	r5, r5
 80077e2:	e7e6      	b.n	80077b2 <_printf_i+0x182>
 80077e4:	4616      	mov	r6, r2
 80077e6:	e7bb      	b.n	8007760 <_printf_i+0x130>
 80077e8:	680b      	ldr	r3, [r1, #0]
 80077ea:	6826      	ldr	r6, [r4, #0]
 80077ec:	6960      	ldr	r0, [r4, #20]
 80077ee:	1d1d      	adds	r5, r3, #4
 80077f0:	600d      	str	r5, [r1, #0]
 80077f2:	0635      	lsls	r5, r6, #24
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	d501      	bpl.n	80077fc <_printf_i+0x1cc>
 80077f8:	6018      	str	r0, [r3, #0]
 80077fa:	e002      	b.n	8007802 <_printf_i+0x1d2>
 80077fc:	0671      	lsls	r1, r6, #25
 80077fe:	d5fb      	bpl.n	80077f8 <_printf_i+0x1c8>
 8007800:	8018      	strh	r0, [r3, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	4616      	mov	r6, r2
 8007808:	e7ba      	b.n	8007780 <_printf_i+0x150>
 800780a:	680b      	ldr	r3, [r1, #0]
 800780c:	1d1a      	adds	r2, r3, #4
 800780e:	600a      	str	r2, [r1, #0]
 8007810:	681e      	ldr	r6, [r3, #0]
 8007812:	6862      	ldr	r2, [r4, #4]
 8007814:	2100      	movs	r1, #0
 8007816:	4630      	mov	r0, r6
 8007818:	f7f8 fd02 	bl	8000220 <memchr>
 800781c:	b108      	cbz	r0, 8007822 <_printf_i+0x1f2>
 800781e:	1b80      	subs	r0, r0, r6
 8007820:	6060      	str	r0, [r4, #4]
 8007822:	6863      	ldr	r3, [r4, #4]
 8007824:	6123      	str	r3, [r4, #16]
 8007826:	2300      	movs	r3, #0
 8007828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782c:	e7a8      	b.n	8007780 <_printf_i+0x150>
 800782e:	6923      	ldr	r3, [r4, #16]
 8007830:	4632      	mov	r2, r6
 8007832:	4649      	mov	r1, r9
 8007834:	4640      	mov	r0, r8
 8007836:	47d0      	blx	sl
 8007838:	3001      	adds	r0, #1
 800783a:	d0ab      	beq.n	8007794 <_printf_i+0x164>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	079b      	lsls	r3, r3, #30
 8007840:	d413      	bmi.n	800786a <_printf_i+0x23a>
 8007842:	68e0      	ldr	r0, [r4, #12]
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	4298      	cmp	r0, r3
 8007848:	bfb8      	it	lt
 800784a:	4618      	movlt	r0, r3
 800784c:	e7a4      	b.n	8007798 <_printf_i+0x168>
 800784e:	2301      	movs	r3, #1
 8007850:	4632      	mov	r2, r6
 8007852:	4649      	mov	r1, r9
 8007854:	4640      	mov	r0, r8
 8007856:	47d0      	blx	sl
 8007858:	3001      	adds	r0, #1
 800785a:	d09b      	beq.n	8007794 <_printf_i+0x164>
 800785c:	3501      	adds	r5, #1
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	9903      	ldr	r1, [sp, #12]
 8007862:	1a5b      	subs	r3, r3, r1
 8007864:	42ab      	cmp	r3, r5
 8007866:	dcf2      	bgt.n	800784e <_printf_i+0x21e>
 8007868:	e7eb      	b.n	8007842 <_printf_i+0x212>
 800786a:	2500      	movs	r5, #0
 800786c:	f104 0619 	add.w	r6, r4, #25
 8007870:	e7f5      	b.n	800785e <_printf_i+0x22e>
 8007872:	bf00      	nop
 8007874:	0800adf6 	.word	0x0800adf6
 8007878:	0800ae07 	.word	0x0800ae07

0800787c <iprintf>:
 800787c:	b40f      	push	{r0, r1, r2, r3}
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <iprintf+0x2c>)
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	b124      	cbz	r4, 8007890 <iprintf+0x14>
 8007886:	69a3      	ldr	r3, [r4, #24]
 8007888:	b913      	cbnz	r3, 8007890 <iprintf+0x14>
 800788a:	4620      	mov	r0, r4
 800788c:	f001 f9ae 	bl	8008bec <__sinit>
 8007890:	ab05      	add	r3, sp, #20
 8007892:	9a04      	ldr	r2, [sp, #16]
 8007894:	68a1      	ldr	r1, [r4, #8]
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	4620      	mov	r0, r4
 800789a:	f001 ff29 	bl	80096f0 <_vfiprintf_r>
 800789e:	b002      	add	sp, #8
 80078a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a4:	b004      	add	sp, #16
 80078a6:	4770      	bx	lr
 80078a8:	200001c4 	.word	0x200001c4

080078ac <_puts_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	460e      	mov	r6, r1
 80078b0:	4605      	mov	r5, r0
 80078b2:	b118      	cbz	r0, 80078bc <_puts_r+0x10>
 80078b4:	6983      	ldr	r3, [r0, #24]
 80078b6:	b90b      	cbnz	r3, 80078bc <_puts_r+0x10>
 80078b8:	f001 f998 	bl	8008bec <__sinit>
 80078bc:	69ab      	ldr	r3, [r5, #24]
 80078be:	68ac      	ldr	r4, [r5, #8]
 80078c0:	b913      	cbnz	r3, 80078c8 <_puts_r+0x1c>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f001 f992 	bl	8008bec <__sinit>
 80078c8:	4b2c      	ldr	r3, [pc, #176]	; (800797c <_puts_r+0xd0>)
 80078ca:	429c      	cmp	r4, r3
 80078cc:	d120      	bne.n	8007910 <_puts_r+0x64>
 80078ce:	686c      	ldr	r4, [r5, #4]
 80078d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_puts_r+0x36>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_puts_r+0x36>
 80078dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078de:	f001 fa28 	bl	8008d32 <__retarget_lock_acquire_recursive>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	0719      	lsls	r1, r3, #28
 80078e6:	d51d      	bpl.n	8007924 <_puts_r+0x78>
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	b1db      	cbz	r3, 8007924 <_puts_r+0x78>
 80078ec:	3e01      	subs	r6, #1
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f4:	3b01      	subs	r3, #1
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	bb39      	cbnz	r1, 800794a <_puts_r+0x9e>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da38      	bge.n	8007970 <_puts_r+0xc4>
 80078fe:	4622      	mov	r2, r4
 8007900:	210a      	movs	r1, #10
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f91e 	bl	8007b44 <__swbuf_r>
 8007908:	3001      	adds	r0, #1
 800790a:	d011      	beq.n	8007930 <_puts_r+0x84>
 800790c:	250a      	movs	r5, #10
 800790e:	e011      	b.n	8007934 <_puts_r+0x88>
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <_puts_r+0xd4>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <_puts_r+0x6e>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7da      	b.n	80078d0 <_puts_r+0x24>
 800791a:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <_puts_r+0xd8>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7d5      	b.n	80078d0 <_puts_r+0x24>
 8007924:	4621      	mov	r1, r4
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f95e 	bl	8007be8 <__swsetup_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	d0dd      	beq.n	80078ec <_puts_r+0x40>
 8007930:	f04f 35ff 	mov.w	r5, #4294967295
 8007934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007936:	07da      	lsls	r2, r3, #31
 8007938:	d405      	bmi.n	8007946 <_puts_r+0x9a>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	059b      	lsls	r3, r3, #22
 800793e:	d402      	bmi.n	8007946 <_puts_r+0x9a>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f001 f9f7 	bl	8008d34 <__retarget_lock_release_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	bd70      	pop	{r4, r5, r6, pc}
 800794a:	2b00      	cmp	r3, #0
 800794c:	da04      	bge.n	8007958 <_puts_r+0xac>
 800794e:	69a2      	ldr	r2, [r4, #24]
 8007950:	429a      	cmp	r2, r3
 8007952:	dc06      	bgt.n	8007962 <_puts_r+0xb6>
 8007954:	290a      	cmp	r1, #10
 8007956:	d004      	beq.n	8007962 <_puts_r+0xb6>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	6022      	str	r2, [r4, #0]
 800795e:	7019      	strb	r1, [r3, #0]
 8007960:	e7c5      	b.n	80078ee <_puts_r+0x42>
 8007962:	4622      	mov	r2, r4
 8007964:	4628      	mov	r0, r5
 8007966:	f000 f8ed 	bl	8007b44 <__swbuf_r>
 800796a:	3001      	adds	r0, #1
 800796c:	d1bf      	bne.n	80078ee <_puts_r+0x42>
 800796e:	e7df      	b.n	8007930 <_puts_r+0x84>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	250a      	movs	r5, #10
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	701d      	strb	r5, [r3, #0]
 800797a:	e7db      	b.n	8007934 <_puts_r+0x88>
 800797c:	0800afd0 	.word	0x0800afd0
 8007980:	0800aff0 	.word	0x0800aff0
 8007984:	0800afb0 	.word	0x0800afb0

08007988 <puts>:
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <puts+0xc>)
 800798a:	4601      	mov	r1, r0
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f7ff bf8d 	b.w	80078ac <_puts_r>
 8007992:	bf00      	nop
 8007994:	200001c4 	.word	0x200001c4

08007998 <setvbuf>:
 8007998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800799c:	461d      	mov	r5, r3
 800799e:	4b5d      	ldr	r3, [pc, #372]	; (8007b14 <setvbuf+0x17c>)
 80079a0:	681f      	ldr	r7, [r3, #0]
 80079a2:	4604      	mov	r4, r0
 80079a4:	460e      	mov	r6, r1
 80079a6:	4690      	mov	r8, r2
 80079a8:	b127      	cbz	r7, 80079b4 <setvbuf+0x1c>
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	b913      	cbnz	r3, 80079b4 <setvbuf+0x1c>
 80079ae:	4638      	mov	r0, r7
 80079b0:	f001 f91c 	bl	8008bec <__sinit>
 80079b4:	4b58      	ldr	r3, [pc, #352]	; (8007b18 <setvbuf+0x180>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	d167      	bne.n	8007a8a <setvbuf+0xf2>
 80079ba:	687c      	ldr	r4, [r7, #4]
 80079bc:	f1b8 0f02 	cmp.w	r8, #2
 80079c0:	d006      	beq.n	80079d0 <setvbuf+0x38>
 80079c2:	f1b8 0f01 	cmp.w	r8, #1
 80079c6:	f200 809f 	bhi.w	8007b08 <setvbuf+0x170>
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	f2c0 809c 	blt.w	8007b08 <setvbuf+0x170>
 80079d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d2:	07db      	lsls	r3, r3, #31
 80079d4:	d405      	bmi.n	80079e2 <setvbuf+0x4a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	0598      	lsls	r0, r3, #22
 80079da:	d402      	bmi.n	80079e2 <setvbuf+0x4a>
 80079dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079de:	f001 f9a8 	bl	8008d32 <__retarget_lock_acquire_recursive>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4638      	mov	r0, r7
 80079e6:	f001 f86d 	bl	8008ac4 <_fflush_r>
 80079ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ec:	b141      	cbz	r1, 8007a00 <setvbuf+0x68>
 80079ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f2:	4299      	cmp	r1, r3
 80079f4:	d002      	beq.n	80079fc <setvbuf+0x64>
 80079f6:	4638      	mov	r0, r7
 80079f8:	f001 fda6 	bl	8009548 <_free_r>
 80079fc:	2300      	movs	r3, #0
 80079fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007a00:	2300      	movs	r3, #0
 8007a02:	61a3      	str	r3, [r4, #24]
 8007a04:	6063      	str	r3, [r4, #4]
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	0619      	lsls	r1, r3, #24
 8007a0a:	d503      	bpl.n	8007a14 <setvbuf+0x7c>
 8007a0c:	6921      	ldr	r1, [r4, #16]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f001 fd9a 	bl	8009548 <_free_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	f1b8 0f02 	cmp.w	r8, #2
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	d06c      	beq.n	8007b00 <setvbuf+0x168>
 8007a26:	ab01      	add	r3, sp, #4
 8007a28:	466a      	mov	r2, sp
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f001 f982 	bl	8008d36 <__swhatbuf_r>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	4318      	orrs	r0, r3
 8007a36:	81a0      	strh	r0, [r4, #12]
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	d130      	bne.n	8007a9e <setvbuf+0x106>
 8007a3c:	9d00      	ldr	r5, [sp, #0]
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f001 f9de 	bl	8008e00 <malloc>
 8007a44:	4606      	mov	r6, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d155      	bne.n	8007af6 <setvbuf+0x15e>
 8007a4a:	f8dd 9000 	ldr.w	r9, [sp]
 8007a4e:	45a9      	cmp	r9, r5
 8007a50:	d14a      	bne.n	8007ae8 <setvbuf+0x150>
 8007a52:	f04f 35ff 	mov.w	r5, #4294967295
 8007a56:	2200      	movs	r2, #0
 8007a58:	60a2      	str	r2, [r4, #8]
 8007a5a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	6122      	str	r2, [r4, #16]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a68:	6162      	str	r2, [r4, #20]
 8007a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a6c:	f043 0302 	orr.w	r3, r3, #2
 8007a70:	07d2      	lsls	r2, r2, #31
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	d405      	bmi.n	8007a82 <setvbuf+0xea>
 8007a76:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007a7a:	d102      	bne.n	8007a82 <setvbuf+0xea>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f001 f959 	bl	8008d34 <__retarget_lock_release_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	b003      	add	sp, #12
 8007a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a8a:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <setvbuf+0x184>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d101      	bne.n	8007a94 <setvbuf+0xfc>
 8007a90:	68bc      	ldr	r4, [r7, #8]
 8007a92:	e793      	b.n	80079bc <setvbuf+0x24>
 8007a94:	4b22      	ldr	r3, [pc, #136]	; (8007b20 <setvbuf+0x188>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	bf08      	it	eq
 8007a9a:	68fc      	ldreq	r4, [r7, #12]
 8007a9c:	e78e      	b.n	80079bc <setvbuf+0x24>
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d0cd      	beq.n	8007a3e <setvbuf+0xa6>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	b913      	cbnz	r3, 8007aac <setvbuf+0x114>
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f001 f8a0 	bl	8008bec <__sinit>
 8007aac:	f1b8 0f01 	cmp.w	r8, #1
 8007ab0:	bf08      	it	eq
 8007ab2:	89a3      	ldrheq	r3, [r4, #12]
 8007ab4:	6026      	str	r6, [r4, #0]
 8007ab6:	bf04      	itt	eq
 8007ab8:	f043 0301 	orreq.w	r3, r3, #1
 8007abc:	81a3      	strheq	r3, [r4, #12]
 8007abe:	89a2      	ldrh	r2, [r4, #12]
 8007ac0:	f012 0308 	ands.w	r3, r2, #8
 8007ac4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007ac8:	d01c      	beq.n	8007b04 <setvbuf+0x16c>
 8007aca:	07d3      	lsls	r3, r2, #31
 8007acc:	bf41      	itttt	mi
 8007ace:	2300      	movmi	r3, #0
 8007ad0:	426d      	negmi	r5, r5
 8007ad2:	60a3      	strmi	r3, [r4, #8]
 8007ad4:	61a5      	strmi	r5, [r4, #24]
 8007ad6:	bf58      	it	pl
 8007ad8:	60a5      	strpl	r5, [r4, #8]
 8007ada:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007adc:	f015 0501 	ands.w	r5, r5, #1
 8007ae0:	d115      	bne.n	8007b0e <setvbuf+0x176>
 8007ae2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007ae6:	e7c8      	b.n	8007a7a <setvbuf+0xe2>
 8007ae8:	4648      	mov	r0, r9
 8007aea:	f001 f989 	bl	8008e00 <malloc>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0ae      	beq.n	8007a52 <setvbuf+0xba>
 8007af4:	464d      	mov	r5, r9
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	e7d0      	b.n	8007aa2 <setvbuf+0x10a>
 8007b00:	2500      	movs	r5, #0
 8007b02:	e7a8      	b.n	8007a56 <setvbuf+0xbe>
 8007b04:	60a3      	str	r3, [r4, #8]
 8007b06:	e7e8      	b.n	8007ada <setvbuf+0x142>
 8007b08:	f04f 35ff 	mov.w	r5, #4294967295
 8007b0c:	e7b9      	b.n	8007a82 <setvbuf+0xea>
 8007b0e:	2500      	movs	r5, #0
 8007b10:	e7b7      	b.n	8007a82 <setvbuf+0xea>
 8007b12:	bf00      	nop
 8007b14:	200001c4 	.word	0x200001c4
 8007b18:	0800afd0 	.word	0x0800afd0
 8007b1c:	0800aff0 	.word	0x0800aff0
 8007b20:	0800afb0 	.word	0x0800afb0

08007b24 <strcat>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	4602      	mov	r2, r0
 8007b28:	7814      	ldrb	r4, [r2, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	3201      	adds	r2, #1
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d1fa      	bne.n	8007b28 <strcat+0x4>
 8007b32:	3b01      	subs	r3, #1
 8007b34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	d1f9      	bne.n	8007b34 <strcat+0x10>
 8007b40:	bd10      	pop	{r4, pc}
	...

08007b44 <__swbuf_r>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	b118      	cbz	r0, 8007b56 <__swbuf_r+0x12>
 8007b4e:	6983      	ldr	r3, [r0, #24]
 8007b50:	b90b      	cbnz	r3, 8007b56 <__swbuf_r+0x12>
 8007b52:	f001 f84b 	bl	8008bec <__sinit>
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <__swbuf_r+0x98>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d12b      	bne.n	8007bb4 <__swbuf_r+0x70>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	69a3      	ldr	r3, [r4, #24]
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	071a      	lsls	r2, r3, #28
 8007b66:	d52f      	bpl.n	8007bc8 <__swbuf_r+0x84>
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	b36b      	cbz	r3, 8007bc8 <__swbuf_r+0x84>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	6963      	ldr	r3, [r4, #20]
 8007b74:	b2f6      	uxtb	r6, r6
 8007b76:	4283      	cmp	r3, r0
 8007b78:	4637      	mov	r7, r6
 8007b7a:	dc04      	bgt.n	8007b86 <__swbuf_r+0x42>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 ffa0 	bl	8008ac4 <_fflush_r>
 8007b84:	bb30      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	701e      	strb	r6, [r3, #0]
 8007b94:	6963      	ldr	r3, [r4, #20]
 8007b96:	3001      	adds	r0, #1
 8007b98:	4283      	cmp	r3, r0
 8007b9a:	d004      	beq.n	8007ba6 <__swbuf_r+0x62>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d506      	bpl.n	8007bb0 <__swbuf_r+0x6c>
 8007ba2:	2e0a      	cmp	r6, #10
 8007ba4:	d104      	bne.n	8007bb0 <__swbuf_r+0x6c>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 ff8b 	bl	8008ac4 <_fflush_r>
 8007bae:	b988      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <__swbuf_r+0x9c>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d101      	bne.n	8007bbe <__swbuf_r+0x7a>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	e7cf      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <__swbuf_r+0xa0>)
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	bf08      	it	eq
 8007bc4:	68ec      	ldreq	r4, [r5, #12]
 8007bc6:	e7ca      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f80c 	bl	8007be8 <__swsetup_r>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0cb      	beq.n	8007b6c <__swbuf_r+0x28>
 8007bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8007bd8:	e7ea      	b.n	8007bb0 <__swbuf_r+0x6c>
 8007bda:	bf00      	nop
 8007bdc:	0800afd0 	.word	0x0800afd0
 8007be0:	0800aff0 	.word	0x0800aff0
 8007be4:	0800afb0 	.word	0x0800afb0

08007be8 <__swsetup_r>:
 8007be8:	4b32      	ldr	r3, [pc, #200]	; (8007cb4 <__swsetup_r+0xcc>)
 8007bea:	b570      	push	{r4, r5, r6, lr}
 8007bec:	681d      	ldr	r5, [r3, #0]
 8007bee:	4606      	mov	r6, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	b125      	cbz	r5, 8007bfe <__swsetup_r+0x16>
 8007bf4:	69ab      	ldr	r3, [r5, #24]
 8007bf6:	b913      	cbnz	r3, 8007bfe <__swsetup_r+0x16>
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fff7 	bl	8008bec <__sinit>
 8007bfe:	4b2e      	ldr	r3, [pc, #184]	; (8007cb8 <__swsetup_r+0xd0>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	d10f      	bne.n	8007c24 <__swsetup_r+0x3c>
 8007c04:	686c      	ldr	r4, [r5, #4]
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c0c:	0719      	lsls	r1, r3, #28
 8007c0e:	d42c      	bmi.n	8007c6a <__swsetup_r+0x82>
 8007c10:	06dd      	lsls	r5, r3, #27
 8007c12:	d411      	bmi.n	8007c38 <__swsetup_r+0x50>
 8007c14:	2309      	movs	r3, #9
 8007c16:	6033      	str	r3, [r6, #0]
 8007c18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	e03e      	b.n	8007ca2 <__swsetup_r+0xba>
 8007c24:	4b25      	ldr	r3, [pc, #148]	; (8007cbc <__swsetup_r+0xd4>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d101      	bne.n	8007c2e <__swsetup_r+0x46>
 8007c2a:	68ac      	ldr	r4, [r5, #8]
 8007c2c:	e7eb      	b.n	8007c06 <__swsetup_r+0x1e>
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <__swsetup_r+0xd8>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	bf08      	it	eq
 8007c34:	68ec      	ldreq	r4, [r5, #12]
 8007c36:	e7e6      	b.n	8007c06 <__swsetup_r+0x1e>
 8007c38:	0758      	lsls	r0, r3, #29
 8007c3a:	d512      	bpl.n	8007c62 <__swsetup_r+0x7a>
 8007c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c3e:	b141      	cbz	r1, 8007c52 <__swsetup_r+0x6a>
 8007c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c44:	4299      	cmp	r1, r3
 8007c46:	d002      	beq.n	8007c4e <__swsetup_r+0x66>
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f001 fc7d 	bl	8009548 <_free_r>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6363      	str	r3, [r4, #52]	; 0x34
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6063      	str	r3, [r4, #4]
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f043 0308 	orr.w	r3, r3, #8
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	b94b      	cbnz	r3, 8007c82 <__swsetup_r+0x9a>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c78:	d003      	beq.n	8007c82 <__swsetup_r+0x9a>
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f001 f87f 	bl	8008d80 <__smakebuf_r>
 8007c82:	89a0      	ldrh	r0, [r4, #12]
 8007c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c88:	f010 0301 	ands.w	r3, r0, #1
 8007c8c:	d00a      	beq.n	8007ca4 <__swsetup_r+0xbc>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60a3      	str	r3, [r4, #8]
 8007c92:	6963      	ldr	r3, [r4, #20]
 8007c94:	425b      	negs	r3, r3
 8007c96:	61a3      	str	r3, [r4, #24]
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	b943      	cbnz	r3, 8007cae <__swsetup_r+0xc6>
 8007c9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ca0:	d1ba      	bne.n	8007c18 <__swsetup_r+0x30>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	0781      	lsls	r1, r0, #30
 8007ca6:	bf58      	it	pl
 8007ca8:	6963      	ldrpl	r3, [r4, #20]
 8007caa:	60a3      	str	r3, [r4, #8]
 8007cac:	e7f4      	b.n	8007c98 <__swsetup_r+0xb0>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e7f7      	b.n	8007ca2 <__swsetup_r+0xba>
 8007cb2:	bf00      	nop
 8007cb4:	200001c4 	.word	0x200001c4
 8007cb8:	0800afd0 	.word	0x0800afd0
 8007cbc:	0800aff0 	.word	0x0800aff0
 8007cc0:	0800afb0 	.word	0x0800afb0

08007cc4 <quorem>:
 8007cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	6903      	ldr	r3, [r0, #16]
 8007cca:	690c      	ldr	r4, [r1, #16]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f2c0 8081 	blt.w	8007dd6 <quorem+0x112>
 8007cd4:	3c01      	subs	r4, #1
 8007cd6:	f101 0814 	add.w	r8, r1, #20
 8007cda:	f100 0514 	add.w	r5, r0, #20
 8007cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cec:	3301      	adds	r3, #1
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cfc:	d331      	bcc.n	8007d62 <quorem+0x9e>
 8007cfe:	f04f 0e00 	mov.w	lr, #0
 8007d02:	4640      	mov	r0, r8
 8007d04:	46ac      	mov	ip, r5
 8007d06:	46f2      	mov	sl, lr
 8007d08:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d0c:	b293      	uxth	r3, r2
 8007d0e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ebaa 0303 	sub.w	r3, sl, r3
 8007d1c:	0c12      	lsrs	r2, r2, #16
 8007d1e:	f8dc a000 	ldr.w	sl, [ip]
 8007d22:	fb06 e202 	mla	r2, r6, r2, lr
 8007d26:	fa13 f38a 	uxtah	r3, r3, sl
 8007d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d2e:	fa1f fa82 	uxth.w	sl, r2
 8007d32:	f8dc 2000 	ldr.w	r2, [ip]
 8007d36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d44:	4581      	cmp	r9, r0
 8007d46:	f84c 3b04 	str.w	r3, [ip], #4
 8007d4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d4e:	d2db      	bcs.n	8007d08 <quorem+0x44>
 8007d50:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d54:	b92b      	cbnz	r3, 8007d62 <quorem+0x9e>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	d32e      	bcc.n	8007dbe <quorem+0xfa>
 8007d60:	613c      	str	r4, [r7, #16]
 8007d62:	4638      	mov	r0, r7
 8007d64:	f001 fae0 	bl	8009328 <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	db24      	blt.n	8007db6 <quorem+0xf2>
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d78:	f8d0 e000 	ldr.w	lr, [r0]
 8007d7c:	b293      	uxth	r3, r2
 8007d7e:	ebac 0303 	sub.w	r3, ip, r3
 8007d82:	0c12      	lsrs	r2, r2, #16
 8007d84:	fa13 f38e 	uxtah	r3, r3, lr
 8007d88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d96:	45c1      	cmp	r9, r8
 8007d98:	f840 3b04 	str.w	r3, [r0], #4
 8007d9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007da0:	d2e8      	bcs.n	8007d74 <quorem+0xb0>
 8007da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007daa:	b922      	cbnz	r2, 8007db6 <quorem+0xf2>
 8007dac:	3b04      	subs	r3, #4
 8007dae:	429d      	cmp	r5, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	d30a      	bcc.n	8007dca <quorem+0x106>
 8007db4:	613c      	str	r4, [r7, #16]
 8007db6:	4630      	mov	r0, r6
 8007db8:	b003      	add	sp, #12
 8007dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	3b04      	subs	r3, #4
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d1cc      	bne.n	8007d60 <quorem+0x9c>
 8007dc6:	3c01      	subs	r4, #1
 8007dc8:	e7c7      	b.n	8007d5a <quorem+0x96>
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f0      	bne.n	8007db4 <quorem+0xf0>
 8007dd2:	3c01      	subs	r4, #1
 8007dd4:	e7eb      	b.n	8007dae <quorem+0xea>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e7ee      	b.n	8007db8 <quorem+0xf4>
 8007dda:	0000      	movs	r0, r0
 8007ddc:	0000      	movs	r0, r0
	...

08007de0 <_dtoa_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	ed2d 8b02 	vpush	{d8}
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	b095      	sub	sp, #84	; 0x54
 8007dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007df0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007df4:	9105      	str	r1, [sp, #20]
 8007df6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e00:	b975      	cbnz	r5, 8007e20 <_dtoa_r+0x40>
 8007e02:	2010      	movs	r0, #16
 8007e04:	f000 fffc 	bl	8008e00 <malloc>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e0c:	b920      	cbnz	r0, 8007e18 <_dtoa_r+0x38>
 8007e0e:	4bb2      	ldr	r3, [pc, #712]	; (80080d8 <_dtoa_r+0x2f8>)
 8007e10:	21ea      	movs	r1, #234	; 0xea
 8007e12:	48b2      	ldr	r0, [pc, #712]	; (80080dc <_dtoa_r+0x2fc>)
 8007e14:	f001 fe02 	bl	8009a1c <__assert_func>
 8007e18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e1c:	6005      	str	r5, [r0, #0]
 8007e1e:	60c5      	str	r5, [r0, #12]
 8007e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	b151      	cbz	r1, 8007e3c <_dtoa_r+0x5c>
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	604a      	str	r2, [r1, #4]
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4093      	lsls	r3, r2
 8007e2e:	608b      	str	r3, [r1, #8]
 8007e30:	4620      	mov	r0, r4
 8007e32:	f001 f83b 	bl	8008eac <_Bfree>
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	1e3b      	subs	r3, r7, #0
 8007e3e:	bfb9      	ittee	lt
 8007e40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e44:	9303      	strlt	r3, [sp, #12]
 8007e46:	2300      	movge	r3, #0
 8007e48:	f8c8 3000 	strge.w	r3, [r8]
 8007e4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007e50:	4ba3      	ldr	r3, [pc, #652]	; (80080e0 <_dtoa_r+0x300>)
 8007e52:	bfbc      	itt	lt
 8007e54:	2201      	movlt	r2, #1
 8007e56:	f8c8 2000 	strlt.w	r2, [r8]
 8007e5a:	ea33 0309 	bics.w	r3, r3, r9
 8007e5e:	d11b      	bne.n	8007e98 <_dtoa_r+0xb8>
 8007e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e62:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e6c:	4333      	orrs	r3, r6
 8007e6e:	f000 857a 	beq.w	8008966 <_dtoa_r+0xb86>
 8007e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e74:	b963      	cbnz	r3, 8007e90 <_dtoa_r+0xb0>
 8007e76:	4b9b      	ldr	r3, [pc, #620]	; (80080e4 <_dtoa_r+0x304>)
 8007e78:	e024      	b.n	8007ec4 <_dtoa_r+0xe4>
 8007e7a:	4b9b      	ldr	r3, [pc, #620]	; (80080e8 <_dtoa_r+0x308>)
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	9800      	ldr	r0, [sp, #0]
 8007e86:	b015      	add	sp, #84	; 0x54
 8007e88:	ecbd 8b02 	vpop	{d8}
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	4b94      	ldr	r3, [pc, #592]	; (80080e4 <_dtoa_r+0x304>)
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	3303      	adds	r3, #3
 8007e96:	e7f3      	b.n	8007e80 <_dtoa_r+0xa0>
 8007e98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	ec51 0b17 	vmov	r0, r1, d7
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ea8:	f7f8 fe2e 	bl	8000b08 <__aeabi_dcmpeq>
 8007eac:	4680      	mov	r8, r0
 8007eae:	b158      	cbz	r0, 8007ec8 <_dtoa_r+0xe8>
 8007eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8551 	beq.w	8008960 <_dtoa_r+0xb80>
 8007ebe:	488b      	ldr	r0, [pc, #556]	; (80080ec <_dtoa_r+0x30c>)
 8007ec0:	6018      	str	r0, [r3, #0]
 8007ec2:	1e43      	subs	r3, r0, #1
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	e7dd      	b.n	8007e84 <_dtoa_r+0xa4>
 8007ec8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ecc:	aa12      	add	r2, sp, #72	; 0x48
 8007ece:	a913      	add	r1, sp, #76	; 0x4c
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f001 facd 	bl	8009470 <__d2b>
 8007ed6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007eda:	4683      	mov	fp, r0
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	d07c      	beq.n	8007fda <_dtoa_r+0x1fa>
 8007ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007eee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ef2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007efa:	4b7d      	ldr	r3, [pc, #500]	; (80080f0 <_dtoa_r+0x310>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 f9e1 	bl	80002c8 <__aeabi_dsub>
 8007f06:	a36e      	add	r3, pc, #440	; (adr r3, 80080c0 <_dtoa_r+0x2e0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 fb94 	bl	8000638 <__aeabi_dmul>
 8007f10:	a36d      	add	r3, pc, #436	; (adr r3, 80080c8 <_dtoa_r+0x2e8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 f9d9 	bl	80002cc <__adddf3>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	460f      	mov	r7, r1
 8007f20:	f7f8 fb20 	bl	8000564 <__aeabi_i2d>
 8007f24:	a36a      	add	r3, pc, #424	; (adr r3, 80080d0 <_dtoa_r+0x2f0>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 fb85 	bl	8000638 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4630      	mov	r0, r6
 8007f34:	4639      	mov	r1, r7
 8007f36:	f7f8 f9c9 	bl	80002cc <__adddf3>
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	f7f8 fe2b 	bl	8000b98 <__aeabi_d2iz>
 8007f42:	2200      	movs	r2, #0
 8007f44:	4682      	mov	sl, r0
 8007f46:	2300      	movs	r3, #0
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fde6 	bl	8000b1c <__aeabi_dcmplt>
 8007f50:	b148      	cbz	r0, 8007f66 <_dtoa_r+0x186>
 8007f52:	4650      	mov	r0, sl
 8007f54:	f7f8 fb06 	bl	8000564 <__aeabi_i2d>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	f7f8 fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f60:	b908      	cbnz	r0, 8007f66 <_dtoa_r+0x186>
 8007f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f66:	f1ba 0f16 	cmp.w	sl, #22
 8007f6a:	d854      	bhi.n	8008016 <_dtoa_r+0x236>
 8007f6c:	4b61      	ldr	r3, [pc, #388]	; (80080f4 <_dtoa_r+0x314>)
 8007f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f7a:	f7f8 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d04b      	beq.n	800801a <_dtoa_r+0x23a>
 8007f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f86:	2300      	movs	r3, #0
 8007f88:	930e      	str	r3, [sp, #56]	; 0x38
 8007f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f8c:	1b5d      	subs	r5, r3, r5
 8007f8e:	1e6b      	subs	r3, r5, #1
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	bf43      	ittte	mi
 8007f94:	2300      	movmi	r3, #0
 8007f96:	f1c5 0801 	rsbmi	r8, r5, #1
 8007f9a:	9304      	strmi	r3, [sp, #16]
 8007f9c:	f04f 0800 	movpl.w	r8, #0
 8007fa0:	f1ba 0f00 	cmp.w	sl, #0
 8007fa4:	db3b      	blt.n	800801e <_dtoa_r+0x23e>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007fac:	4453      	add	r3, sl
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9306      	str	r3, [sp, #24]
 8007fb4:	9b05      	ldr	r3, [sp, #20]
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d869      	bhi.n	800808e <_dtoa_r+0x2ae>
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	bfc4      	itt	gt
 8007fbe:	3b04      	subgt	r3, #4
 8007fc0:	9305      	strgt	r3, [sp, #20]
 8007fc2:	9b05      	ldr	r3, [sp, #20]
 8007fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8007fc8:	bfcc      	ite	gt
 8007fca:	2500      	movgt	r5, #0
 8007fcc:	2501      	movle	r5, #1
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d869      	bhi.n	80080a6 <_dtoa_r+0x2c6>
 8007fd2:	e8df f003 	tbb	[pc, r3]
 8007fd6:	4e2c      	.short	0x4e2c
 8007fd8:	5a4c      	.short	0x5a4c
 8007fda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007fde:	441d      	add	r5, r3
 8007fe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	bfc1      	itttt	gt
 8007fe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ff0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ff4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ff8:	bfda      	itte	le
 8007ffa:	f1c3 0320 	rsble	r3, r3, #32
 8007ffe:	fa06 f003 	lslle.w	r0, r6, r3
 8008002:	4318      	orrgt	r0, r3
 8008004:	f7f8 fa9e 	bl	8000544 <__aeabi_ui2d>
 8008008:	2301      	movs	r3, #1
 800800a:	4606      	mov	r6, r0
 800800c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008010:	3d01      	subs	r5, #1
 8008012:	9310      	str	r3, [sp, #64]	; 0x40
 8008014:	e771      	b.n	8007efa <_dtoa_r+0x11a>
 8008016:	2301      	movs	r3, #1
 8008018:	e7b6      	b.n	8007f88 <_dtoa_r+0x1a8>
 800801a:	900e      	str	r0, [sp, #56]	; 0x38
 800801c:	e7b5      	b.n	8007f8a <_dtoa_r+0x1aa>
 800801e:	f1ca 0300 	rsb	r3, sl, #0
 8008022:	9306      	str	r3, [sp, #24]
 8008024:	2300      	movs	r3, #0
 8008026:	eba8 080a 	sub.w	r8, r8, sl
 800802a:	930d      	str	r3, [sp, #52]	; 0x34
 800802c:	e7c2      	b.n	8007fb4 <_dtoa_r+0x1d4>
 800802e:	2300      	movs	r3, #0
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	dc39      	bgt.n	80080ac <_dtoa_r+0x2cc>
 8008038:	f04f 0901 	mov.w	r9, #1
 800803c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008040:	464b      	mov	r3, r9
 8008042:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008046:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008048:	2200      	movs	r2, #0
 800804a:	6042      	str	r2, [r0, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	f102 0614 	add.w	r6, r2, #20
 8008052:	429e      	cmp	r6, r3
 8008054:	6841      	ldr	r1, [r0, #4]
 8008056:	d92f      	bls.n	80080b8 <_dtoa_r+0x2d8>
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fee7 	bl	8008e2c <_Balloc>
 800805e:	9000      	str	r0, [sp, #0]
 8008060:	2800      	cmp	r0, #0
 8008062:	d14b      	bne.n	80080fc <_dtoa_r+0x31c>
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <_dtoa_r+0x318>)
 8008066:	4602      	mov	r2, r0
 8008068:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800806c:	e6d1      	b.n	8007e12 <_dtoa_r+0x32>
 800806e:	2301      	movs	r3, #1
 8008070:	e7de      	b.n	8008030 <_dtoa_r+0x250>
 8008072:	2300      	movs	r3, #0
 8008074:	9308      	str	r3, [sp, #32]
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	eb0a 0903 	add.w	r9, sl, r3
 800807c:	f109 0301 	add.w	r3, r9, #1
 8008080:	2b01      	cmp	r3, #1
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	bfb8      	it	lt
 8008086:	2301      	movlt	r3, #1
 8008088:	e7dd      	b.n	8008046 <_dtoa_r+0x266>
 800808a:	2301      	movs	r3, #1
 800808c:	e7f2      	b.n	8008074 <_dtoa_r+0x294>
 800808e:	2501      	movs	r5, #1
 8008090:	2300      	movs	r3, #0
 8008092:	9305      	str	r3, [sp, #20]
 8008094:	9508      	str	r5, [sp, #32]
 8008096:	f04f 39ff 	mov.w	r9, #4294967295
 800809a:	2200      	movs	r2, #0
 800809c:	f8cd 9004 	str.w	r9, [sp, #4]
 80080a0:	2312      	movs	r3, #18
 80080a2:	9209      	str	r2, [sp, #36]	; 0x24
 80080a4:	e7cf      	b.n	8008046 <_dtoa_r+0x266>
 80080a6:	2301      	movs	r3, #1
 80080a8:	9308      	str	r3, [sp, #32]
 80080aa:	e7f4      	b.n	8008096 <_dtoa_r+0x2b6>
 80080ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80080b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80080b4:	464b      	mov	r3, r9
 80080b6:	e7c6      	b.n	8008046 <_dtoa_r+0x266>
 80080b8:	3101      	adds	r1, #1
 80080ba:	6041      	str	r1, [r0, #4]
 80080bc:	0052      	lsls	r2, r2, #1
 80080be:	e7c6      	b.n	800804e <_dtoa_r+0x26e>
 80080c0:	636f4361 	.word	0x636f4361
 80080c4:	3fd287a7 	.word	0x3fd287a7
 80080c8:	8b60c8b3 	.word	0x8b60c8b3
 80080cc:	3fc68a28 	.word	0x3fc68a28
 80080d0:	509f79fb 	.word	0x509f79fb
 80080d4:	3fd34413 	.word	0x3fd34413
 80080d8:	0800af26 	.word	0x0800af26
 80080dc:	0800af3d 	.word	0x0800af3d
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	0800af22 	.word	0x0800af22
 80080e8:	0800af19 	.word	0x0800af19
 80080ec:	0800adf5 	.word	0x0800adf5
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	0800b098 	.word	0x0800b098
 80080f8:	0800af9c 	.word	0x0800af9c
 80080fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080fe:	9a00      	ldr	r2, [sp, #0]
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	9b01      	ldr	r3, [sp, #4]
 8008104:	2b0e      	cmp	r3, #14
 8008106:	f200 80ad 	bhi.w	8008264 <_dtoa_r+0x484>
 800810a:	2d00      	cmp	r5, #0
 800810c:	f000 80aa 	beq.w	8008264 <_dtoa_r+0x484>
 8008110:	f1ba 0f00 	cmp.w	sl, #0
 8008114:	dd36      	ble.n	8008184 <_dtoa_r+0x3a4>
 8008116:	4ac3      	ldr	r2, [pc, #780]	; (8008424 <_dtoa_r+0x644>)
 8008118:	f00a 030f 	and.w	r3, sl, #15
 800811c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008120:	ed93 7b00 	vldr	d7, [r3]
 8008124:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008128:	ea4f 172a 	mov.w	r7, sl, asr #4
 800812c:	eeb0 8a47 	vmov.f32	s16, s14
 8008130:	eef0 8a67 	vmov.f32	s17, s15
 8008134:	d016      	beq.n	8008164 <_dtoa_r+0x384>
 8008136:	4bbc      	ldr	r3, [pc, #752]	; (8008428 <_dtoa_r+0x648>)
 8008138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800813c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008140:	f7f8 fba4 	bl	800088c <__aeabi_ddiv>
 8008144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008148:	f007 070f 	and.w	r7, r7, #15
 800814c:	2503      	movs	r5, #3
 800814e:	4eb6      	ldr	r6, [pc, #728]	; (8008428 <_dtoa_r+0x648>)
 8008150:	b957      	cbnz	r7, 8008168 <_dtoa_r+0x388>
 8008152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008156:	ec53 2b18 	vmov	r2, r3, d8
 800815a:	f7f8 fb97 	bl	800088c <__aeabi_ddiv>
 800815e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008162:	e029      	b.n	80081b8 <_dtoa_r+0x3d8>
 8008164:	2502      	movs	r5, #2
 8008166:	e7f2      	b.n	800814e <_dtoa_r+0x36e>
 8008168:	07f9      	lsls	r1, r7, #31
 800816a:	d508      	bpl.n	800817e <_dtoa_r+0x39e>
 800816c:	ec51 0b18 	vmov	r0, r1, d8
 8008170:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008174:	f7f8 fa60 	bl	8000638 <__aeabi_dmul>
 8008178:	ec41 0b18 	vmov	d8, r0, r1
 800817c:	3501      	adds	r5, #1
 800817e:	107f      	asrs	r7, r7, #1
 8008180:	3608      	adds	r6, #8
 8008182:	e7e5      	b.n	8008150 <_dtoa_r+0x370>
 8008184:	f000 80a6 	beq.w	80082d4 <_dtoa_r+0x4f4>
 8008188:	f1ca 0600 	rsb	r6, sl, #0
 800818c:	4ba5      	ldr	r3, [pc, #660]	; (8008424 <_dtoa_r+0x644>)
 800818e:	4fa6      	ldr	r7, [pc, #664]	; (8008428 <_dtoa_r+0x648>)
 8008190:	f006 020f 	and.w	r2, r6, #15
 8008194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a8:	1136      	asrs	r6, r6, #4
 80081aa:	2300      	movs	r3, #0
 80081ac:	2502      	movs	r5, #2
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	f040 8085 	bne.w	80082be <_dtoa_r+0x4de>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1d2      	bne.n	800815e <_dtoa_r+0x37e>
 80081b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 808c 	beq.w	80082d8 <_dtoa_r+0x4f8>
 80081c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081c4:	4b99      	ldr	r3, [pc, #612]	; (800842c <_dtoa_r+0x64c>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fca6 	bl	8000b1c <__aeabi_dcmplt>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	f000 8081 	beq.w	80082d8 <_dtoa_r+0x4f8>
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d07d      	beq.n	80082d8 <_dtoa_r+0x4f8>
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	dd3c      	ble.n	800825c <_dtoa_r+0x47c>
 80081e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081e6:	9307      	str	r3, [sp, #28]
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b91      	ldr	r3, [pc, #580]	; (8008430 <_dtoa_r+0x650>)
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f8:	3501      	adds	r5, #1
 80081fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80081fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008202:	4628      	mov	r0, r5
 8008204:	f7f8 f9ae 	bl	8000564 <__aeabi_i2d>
 8008208:	4632      	mov	r2, r6
 800820a:	463b      	mov	r3, r7
 800820c:	f7f8 fa14 	bl	8000638 <__aeabi_dmul>
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <_dtoa_r+0x654>)
 8008212:	2200      	movs	r2, #0
 8008214:	f7f8 f85a 	bl	80002cc <__adddf3>
 8008218:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800821c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008220:	9303      	str	r3, [sp, #12]
 8008222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008224:	2b00      	cmp	r3, #0
 8008226:	d15c      	bne.n	80082e2 <_dtoa_r+0x502>
 8008228:	4b83      	ldr	r3, [pc, #524]	; (8008438 <_dtoa_r+0x658>)
 800822a:	2200      	movs	r2, #0
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 f84a 	bl	80002c8 <__aeabi_dsub>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	f7f8 fc8c 	bl	8000b58 <__aeabi_dcmpgt>
 8008240:	2800      	cmp	r0, #0
 8008242:	f040 8296 	bne.w	8008772 <_dtoa_r+0x992>
 8008246:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800824a:	4630      	mov	r0, r6
 800824c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 fc63 	bl	8000b1c <__aeabi_dcmplt>
 8008256:	2800      	cmp	r0, #0
 8008258:	f040 8288 	bne.w	800876c <_dtoa_r+0x98c>
 800825c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008266:	2b00      	cmp	r3, #0
 8008268:	f2c0 8158 	blt.w	800851c <_dtoa_r+0x73c>
 800826c:	f1ba 0f0e 	cmp.w	sl, #14
 8008270:	f300 8154 	bgt.w	800851c <_dtoa_r+0x73c>
 8008274:	4b6b      	ldr	r3, [pc, #428]	; (8008424 <_dtoa_r+0x644>)
 8008276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800827a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	f280 80e3 	bge.w	800844c <_dtoa_r+0x66c>
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f300 80df 	bgt.w	800844c <_dtoa_r+0x66c>
 800828e:	f040 826d 	bne.w	800876c <_dtoa_r+0x98c>
 8008292:	4b69      	ldr	r3, [pc, #420]	; (8008438 <_dtoa_r+0x658>)
 8008294:	2200      	movs	r2, #0
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 f9cd 	bl	8000638 <__aeabi_dmul>
 800829e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082a2:	f7f8 fc4f 	bl	8000b44 <__aeabi_dcmpge>
 80082a6:	9e01      	ldr	r6, [sp, #4]
 80082a8:	4637      	mov	r7, r6
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f040 8243 	bne.w	8008736 <_dtoa_r+0x956>
 80082b0:	9d00      	ldr	r5, [sp, #0]
 80082b2:	2331      	movs	r3, #49	; 0x31
 80082b4:	f805 3b01 	strb.w	r3, [r5], #1
 80082b8:	f10a 0a01 	add.w	sl, sl, #1
 80082bc:	e23f      	b.n	800873e <_dtoa_r+0x95e>
 80082be:	07f2      	lsls	r2, r6, #31
 80082c0:	d505      	bpl.n	80082ce <_dtoa_r+0x4ee>
 80082c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c6:	f7f8 f9b7 	bl	8000638 <__aeabi_dmul>
 80082ca:	3501      	adds	r5, #1
 80082cc:	2301      	movs	r3, #1
 80082ce:	1076      	asrs	r6, r6, #1
 80082d0:	3708      	adds	r7, #8
 80082d2:	e76c      	b.n	80081ae <_dtoa_r+0x3ce>
 80082d4:	2502      	movs	r5, #2
 80082d6:	e76f      	b.n	80081b8 <_dtoa_r+0x3d8>
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	f8cd a01c 	str.w	sl, [sp, #28]
 80082de:	930c      	str	r3, [sp, #48]	; 0x30
 80082e0:	e78d      	b.n	80081fe <_dtoa_r+0x41e>
 80082e2:	9900      	ldr	r1, [sp, #0]
 80082e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e8:	4b4e      	ldr	r3, [pc, #312]	; (8008424 <_dtoa_r+0x644>)
 80082ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082ee:	4401      	add	r1, r0
 80082f0:	9102      	str	r1, [sp, #8]
 80082f2:	9908      	ldr	r1, [sp, #32]
 80082f4:	eeb0 8a47 	vmov.f32	s16, s14
 80082f8:	eef0 8a67 	vmov.f32	s17, s15
 80082fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008304:	2900      	cmp	r1, #0
 8008306:	d045      	beq.n	8008394 <_dtoa_r+0x5b4>
 8008308:	494c      	ldr	r1, [pc, #304]	; (800843c <_dtoa_r+0x65c>)
 800830a:	2000      	movs	r0, #0
 800830c:	f7f8 fabe 	bl	800088c <__aeabi_ddiv>
 8008310:	ec53 2b18 	vmov	r2, r3, d8
 8008314:	f7f7 ffd8 	bl	80002c8 <__aeabi_dsub>
 8008318:	9d00      	ldr	r5, [sp, #0]
 800831a:	ec41 0b18 	vmov	d8, r0, r1
 800831e:	4639      	mov	r1, r7
 8008320:	4630      	mov	r0, r6
 8008322:	f7f8 fc39 	bl	8000b98 <__aeabi_d2iz>
 8008326:	900c      	str	r0, [sp, #48]	; 0x30
 8008328:	f7f8 f91c 	bl	8000564 <__aeabi_i2d>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f7 ffc8 	bl	80002c8 <__aeabi_dsub>
 8008338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800833a:	3330      	adds	r3, #48	; 0x30
 800833c:	f805 3b01 	strb.w	r3, [r5], #1
 8008340:	ec53 2b18 	vmov	r2, r3, d8
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f8 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	d165      	bne.n	800841c <_dtoa_r+0x63c>
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	4935      	ldr	r1, [pc, #212]	; (800842c <_dtoa_r+0x64c>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ffb6 	bl	80002c8 <__aeabi_dsub>
 800835c:	ec53 2b18 	vmov	r2, r3, d8
 8008360:	f7f8 fbdc 	bl	8000b1c <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80b9 	bne.w	80084dc <_dtoa_r+0x6fc>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	429d      	cmp	r5, r3
 800836e:	f43f af75 	beq.w	800825c <_dtoa_r+0x47c>
 8008372:	4b2f      	ldr	r3, [pc, #188]	; (8008430 <_dtoa_r+0x650>)
 8008374:	ec51 0b18 	vmov	r0, r1, d8
 8008378:	2200      	movs	r2, #0
 800837a:	f7f8 f95d 	bl	8000638 <__aeabi_dmul>
 800837e:	4b2c      	ldr	r3, [pc, #176]	; (8008430 <_dtoa_r+0x650>)
 8008380:	ec41 0b18 	vmov	d8, r0, r1
 8008384:	2200      	movs	r2, #0
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 f955 	bl	8000638 <__aeabi_dmul>
 800838e:	4606      	mov	r6, r0
 8008390:	460f      	mov	r7, r1
 8008392:	e7c4      	b.n	800831e <_dtoa_r+0x53e>
 8008394:	ec51 0b17 	vmov	r0, r1, d7
 8008398:	f7f8 f94e 	bl	8000638 <__aeabi_dmul>
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	9d00      	ldr	r5, [sp, #0]
 80083a0:	930c      	str	r3, [sp, #48]	; 0x30
 80083a2:	ec41 0b18 	vmov	d8, r0, r1
 80083a6:	4639      	mov	r1, r7
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7f8 fbf5 	bl	8000b98 <__aeabi_d2iz>
 80083ae:	9011      	str	r0, [sp, #68]	; 0x44
 80083b0:	f7f8 f8d8 	bl	8000564 <__aeabi_i2d>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f7 ff84 	bl	80002c8 <__aeabi_dsub>
 80083c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083c2:	3330      	adds	r3, #48	; 0x30
 80083c4:	f805 3b01 	strb.w	r3, [r5], #1
 80083c8:	9b02      	ldr	r3, [sp, #8]
 80083ca:	429d      	cmp	r5, r3
 80083cc:	4606      	mov	r6, r0
 80083ce:	460f      	mov	r7, r1
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	d134      	bne.n	8008440 <_dtoa_r+0x660>
 80083d6:	4b19      	ldr	r3, [pc, #100]	; (800843c <_dtoa_r+0x65c>)
 80083d8:	ec51 0b18 	vmov	r0, r1, d8
 80083dc:	f7f7 ff76 	bl	80002cc <__adddf3>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f8 fbb6 	bl	8000b58 <__aeabi_dcmpgt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d175      	bne.n	80084dc <_dtoa_r+0x6fc>
 80083f0:	ec53 2b18 	vmov	r2, r3, d8
 80083f4:	4911      	ldr	r1, [pc, #68]	; (800843c <_dtoa_r+0x65c>)
 80083f6:	2000      	movs	r0, #0
 80083f8:	f7f7 ff66 	bl	80002c8 <__aeabi_dsub>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f8 fb8a 	bl	8000b1c <__aeabi_dcmplt>
 8008408:	2800      	cmp	r0, #0
 800840a:	f43f af27 	beq.w	800825c <_dtoa_r+0x47c>
 800840e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008410:	1e6b      	subs	r3, r5, #1
 8008412:	930c      	str	r3, [sp, #48]	; 0x30
 8008414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	d0f8      	beq.n	800840e <_dtoa_r+0x62e>
 800841c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008420:	e04a      	b.n	80084b8 <_dtoa_r+0x6d8>
 8008422:	bf00      	nop
 8008424:	0800b098 	.word	0x0800b098
 8008428:	0800b070 	.word	0x0800b070
 800842c:	3ff00000 	.word	0x3ff00000
 8008430:	40240000 	.word	0x40240000
 8008434:	401c0000 	.word	0x401c0000
 8008438:	40140000 	.word	0x40140000
 800843c:	3fe00000 	.word	0x3fe00000
 8008440:	4baf      	ldr	r3, [pc, #700]	; (8008700 <_dtoa_r+0x920>)
 8008442:	f7f8 f8f9 	bl	8000638 <__aeabi_dmul>
 8008446:	4606      	mov	r6, r0
 8008448:	460f      	mov	r7, r1
 800844a:	e7ac      	b.n	80083a6 <_dtoa_r+0x5c6>
 800844c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008450:	9d00      	ldr	r5, [sp, #0]
 8008452:	4642      	mov	r2, r8
 8008454:	464b      	mov	r3, r9
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 fa17 	bl	800088c <__aeabi_ddiv>
 800845e:	f7f8 fb9b 	bl	8000b98 <__aeabi_d2iz>
 8008462:	9002      	str	r0, [sp, #8]
 8008464:	f7f8 f87e 	bl	8000564 <__aeabi_i2d>
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4630      	mov	r0, r6
 8008476:	4639      	mov	r1, r7
 8008478:	f7f7 ff26 	bl	80002c8 <__aeabi_dsub>
 800847c:	9e02      	ldr	r6, [sp, #8]
 800847e:	9f01      	ldr	r7, [sp, #4]
 8008480:	3630      	adds	r6, #48	; 0x30
 8008482:	f805 6b01 	strb.w	r6, [r5], #1
 8008486:	9e00      	ldr	r6, [sp, #0]
 8008488:	1bae      	subs	r6, r5, r6
 800848a:	42b7      	cmp	r7, r6
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	d137      	bne.n	8008502 <_dtoa_r+0x722>
 8008492:	f7f7 ff1b 	bl	80002cc <__adddf3>
 8008496:	4642      	mov	r2, r8
 8008498:	464b      	mov	r3, r9
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	f7f8 fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 80084a2:	b9c8      	cbnz	r0, 80084d8 <_dtoa_r+0x6f8>
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f8 fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80084b0:	b110      	cbz	r0, 80084b8 <_dtoa_r+0x6d8>
 80084b2:	9b02      	ldr	r3, [sp, #8]
 80084b4:	07d9      	lsls	r1, r3, #31
 80084b6:	d40f      	bmi.n	80084d8 <_dtoa_r+0x6f8>
 80084b8:	4620      	mov	r0, r4
 80084ba:	4659      	mov	r1, fp
 80084bc:	f000 fcf6 	bl	8008eac <_Bfree>
 80084c0:	2300      	movs	r3, #0
 80084c2:	702b      	strb	r3, [r5, #0]
 80084c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084c6:	f10a 0001 	add.w	r0, sl, #1
 80084ca:	6018      	str	r0, [r3, #0]
 80084cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f43f acd8 	beq.w	8007e84 <_dtoa_r+0xa4>
 80084d4:	601d      	str	r5, [r3, #0]
 80084d6:	e4d5      	b.n	8007e84 <_dtoa_r+0xa4>
 80084d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80084dc:	462b      	mov	r3, r5
 80084de:	461d      	mov	r5, r3
 80084e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084e4:	2a39      	cmp	r2, #57	; 0x39
 80084e6:	d108      	bne.n	80084fa <_dtoa_r+0x71a>
 80084e8:	9a00      	ldr	r2, [sp, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d1f7      	bne.n	80084de <_dtoa_r+0x6fe>
 80084ee:	9a07      	ldr	r2, [sp, #28]
 80084f0:	9900      	ldr	r1, [sp, #0]
 80084f2:	3201      	adds	r2, #1
 80084f4:	9207      	str	r2, [sp, #28]
 80084f6:	2230      	movs	r2, #48	; 0x30
 80084f8:	700a      	strb	r2, [r1, #0]
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	3201      	adds	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
 8008500:	e78c      	b.n	800841c <_dtoa_r+0x63c>
 8008502:	4b7f      	ldr	r3, [pc, #508]	; (8008700 <_dtoa_r+0x920>)
 8008504:	2200      	movs	r2, #0
 8008506:	f7f8 f897 	bl	8000638 <__aeabi_dmul>
 800850a:	2200      	movs	r2, #0
 800850c:	2300      	movs	r3, #0
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	f7f8 faf9 	bl	8000b08 <__aeabi_dcmpeq>
 8008516:	2800      	cmp	r0, #0
 8008518:	d09b      	beq.n	8008452 <_dtoa_r+0x672>
 800851a:	e7cd      	b.n	80084b8 <_dtoa_r+0x6d8>
 800851c:	9a08      	ldr	r2, [sp, #32]
 800851e:	2a00      	cmp	r2, #0
 8008520:	f000 80c4 	beq.w	80086ac <_dtoa_r+0x8cc>
 8008524:	9a05      	ldr	r2, [sp, #20]
 8008526:	2a01      	cmp	r2, #1
 8008528:	f300 80a8 	bgt.w	800867c <_dtoa_r+0x89c>
 800852c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800852e:	2a00      	cmp	r2, #0
 8008530:	f000 80a0 	beq.w	8008674 <_dtoa_r+0x894>
 8008534:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008538:	9e06      	ldr	r6, [sp, #24]
 800853a:	4645      	mov	r5, r8
 800853c:	9a04      	ldr	r2, [sp, #16]
 800853e:	2101      	movs	r1, #1
 8008540:	441a      	add	r2, r3
 8008542:	4620      	mov	r0, r4
 8008544:	4498      	add	r8, r3
 8008546:	9204      	str	r2, [sp, #16]
 8008548:	f000 fd6c 	bl	8009024 <__i2b>
 800854c:	4607      	mov	r7, r0
 800854e:	2d00      	cmp	r5, #0
 8008550:	dd0b      	ble.n	800856a <_dtoa_r+0x78a>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	dd08      	ble.n	800856a <_dtoa_r+0x78a>
 8008558:	42ab      	cmp	r3, r5
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	bfa8      	it	ge
 800855e:	462b      	movge	r3, r5
 8008560:	eba8 0803 	sub.w	r8, r8, r3
 8008564:	1aed      	subs	r5, r5, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	b1fb      	cbz	r3, 80085ae <_dtoa_r+0x7ce>
 800856e:	9b08      	ldr	r3, [sp, #32]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 809f 	beq.w	80086b4 <_dtoa_r+0x8d4>
 8008576:	2e00      	cmp	r6, #0
 8008578:	dd11      	ble.n	800859e <_dtoa_r+0x7be>
 800857a:	4639      	mov	r1, r7
 800857c:	4632      	mov	r2, r6
 800857e:	4620      	mov	r0, r4
 8008580:	f000 fe0c 	bl	800919c <__pow5mult>
 8008584:	465a      	mov	r2, fp
 8008586:	4601      	mov	r1, r0
 8008588:	4607      	mov	r7, r0
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fd60 	bl	8009050 <__multiply>
 8008590:	4659      	mov	r1, fp
 8008592:	9007      	str	r0, [sp, #28]
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fc89 	bl	8008eac <_Bfree>
 800859a:	9b07      	ldr	r3, [sp, #28]
 800859c:	469b      	mov	fp, r3
 800859e:	9b06      	ldr	r3, [sp, #24]
 80085a0:	1b9a      	subs	r2, r3, r6
 80085a2:	d004      	beq.n	80085ae <_dtoa_r+0x7ce>
 80085a4:	4659      	mov	r1, fp
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fdf8 	bl	800919c <__pow5mult>
 80085ac:	4683      	mov	fp, r0
 80085ae:	2101      	movs	r1, #1
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fd37 	bl	8009024 <__i2b>
 80085b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	4606      	mov	r6, r0
 80085bc:	dd7c      	ble.n	80086b8 <_dtoa_r+0x8d8>
 80085be:	461a      	mov	r2, r3
 80085c0:	4601      	mov	r1, r0
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fdea 	bl	800919c <__pow5mult>
 80085c8:	9b05      	ldr	r3, [sp, #20]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	4606      	mov	r6, r0
 80085ce:	dd76      	ble.n	80086be <_dtoa_r+0x8de>
 80085d0:	2300      	movs	r3, #0
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	6933      	ldr	r3, [r6, #16]
 80085d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085da:	6918      	ldr	r0, [r3, #16]
 80085dc:	f000 fcd2 	bl	8008f84 <__hi0bits>
 80085e0:	f1c0 0020 	rsb	r0, r0, #32
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	4418      	add	r0, r3
 80085e8:	f010 001f 	ands.w	r0, r0, #31
 80085ec:	f000 8086 	beq.w	80086fc <_dtoa_r+0x91c>
 80085f0:	f1c0 0320 	rsb	r3, r0, #32
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	dd7f      	ble.n	80086f8 <_dtoa_r+0x918>
 80085f8:	f1c0 001c 	rsb	r0, r0, #28
 80085fc:	9b04      	ldr	r3, [sp, #16]
 80085fe:	4403      	add	r3, r0
 8008600:	4480      	add	r8, r0
 8008602:	4405      	add	r5, r0
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	dd05      	ble.n	8008618 <_dtoa_r+0x838>
 800860c:	4659      	mov	r1, fp
 800860e:	4642      	mov	r2, r8
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fe1d 	bl	8009250 <__lshift>
 8008616:	4683      	mov	fp, r0
 8008618:	9b04      	ldr	r3, [sp, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd05      	ble.n	800862a <_dtoa_r+0x84a>
 800861e:	4631      	mov	r1, r6
 8008620:	461a      	mov	r2, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fe14 	bl	8009250 <__lshift>
 8008628:	4606      	mov	r6, r0
 800862a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d069      	beq.n	8008704 <_dtoa_r+0x924>
 8008630:	4631      	mov	r1, r6
 8008632:	4658      	mov	r0, fp
 8008634:	f000 fe78 	bl	8009328 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	da63      	bge.n	8008704 <_dtoa_r+0x924>
 800863c:	2300      	movs	r3, #0
 800863e:	4659      	mov	r1, fp
 8008640:	220a      	movs	r2, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fc54 	bl	8008ef0 <__multadd>
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800864e:	4683      	mov	fp, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 818f 	beq.w	8008974 <_dtoa_r+0xb94>
 8008656:	4639      	mov	r1, r7
 8008658:	2300      	movs	r3, #0
 800865a:	220a      	movs	r2, #10
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fc47 	bl	8008ef0 <__multadd>
 8008662:	f1b9 0f00 	cmp.w	r9, #0
 8008666:	4607      	mov	r7, r0
 8008668:	f300 808e 	bgt.w	8008788 <_dtoa_r+0x9a8>
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	2b02      	cmp	r3, #2
 8008670:	dc50      	bgt.n	8008714 <_dtoa_r+0x934>
 8008672:	e089      	b.n	8008788 <_dtoa_r+0x9a8>
 8008674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800867a:	e75d      	b.n	8008538 <_dtoa_r+0x758>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	1e5e      	subs	r6, r3, #1
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	42b3      	cmp	r3, r6
 8008684:	bfbf      	itttt	lt
 8008686:	9b06      	ldrlt	r3, [sp, #24]
 8008688:	9606      	strlt	r6, [sp, #24]
 800868a:	1af2      	sublt	r2, r6, r3
 800868c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800868e:	bfb6      	itet	lt
 8008690:	189b      	addlt	r3, r3, r2
 8008692:	1b9e      	subge	r6, r3, r6
 8008694:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	bfb8      	it	lt
 800869a:	2600      	movlt	r6, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfb5      	itete	lt
 80086a0:	eba8 0503 	sublt.w	r5, r8, r3
 80086a4:	9b01      	ldrge	r3, [sp, #4]
 80086a6:	2300      	movlt	r3, #0
 80086a8:	4645      	movge	r5, r8
 80086aa:	e747      	b.n	800853c <_dtoa_r+0x75c>
 80086ac:	9e06      	ldr	r6, [sp, #24]
 80086ae:	9f08      	ldr	r7, [sp, #32]
 80086b0:	4645      	mov	r5, r8
 80086b2:	e74c      	b.n	800854e <_dtoa_r+0x76e>
 80086b4:	9a06      	ldr	r2, [sp, #24]
 80086b6:	e775      	b.n	80085a4 <_dtoa_r+0x7c4>
 80086b8:	9b05      	ldr	r3, [sp, #20]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	dc18      	bgt.n	80086f0 <_dtoa_r+0x910>
 80086be:	9b02      	ldr	r3, [sp, #8]
 80086c0:	b9b3      	cbnz	r3, 80086f0 <_dtoa_r+0x910>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c8:	b9a3      	cbnz	r3, 80086f4 <_dtoa_r+0x914>
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	b12b      	cbz	r3, 80086e2 <_dtoa_r+0x902>
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	3301      	adds	r3, #1
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	f108 0801 	add.w	r8, r8, #1
 80086e0:	2301      	movs	r3, #1
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f47f af74 	bne.w	80085d4 <_dtoa_r+0x7f4>
 80086ec:	2001      	movs	r0, #1
 80086ee:	e779      	b.n	80085e4 <_dtoa_r+0x804>
 80086f0:	2300      	movs	r3, #0
 80086f2:	e7f6      	b.n	80086e2 <_dtoa_r+0x902>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	e7f4      	b.n	80086e2 <_dtoa_r+0x902>
 80086f8:	d085      	beq.n	8008606 <_dtoa_r+0x826>
 80086fa:	4618      	mov	r0, r3
 80086fc:	301c      	adds	r0, #28
 80086fe:	e77d      	b.n	80085fc <_dtoa_r+0x81c>
 8008700:	40240000 	.word	0x40240000
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc38      	bgt.n	800877c <_dtoa_r+0x99c>
 800870a:	9b05      	ldr	r3, [sp, #20]
 800870c:	2b02      	cmp	r3, #2
 800870e:	dd35      	ble.n	800877c <_dtoa_r+0x99c>
 8008710:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	d10d      	bne.n	8008736 <_dtoa_r+0x956>
 800871a:	4631      	mov	r1, r6
 800871c:	464b      	mov	r3, r9
 800871e:	2205      	movs	r2, #5
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fbe5 	bl	8008ef0 <__multadd>
 8008726:	4601      	mov	r1, r0
 8008728:	4606      	mov	r6, r0
 800872a:	4658      	mov	r0, fp
 800872c:	f000 fdfc 	bl	8009328 <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	f73f adbd 	bgt.w	80082b0 <_dtoa_r+0x4d0>
 8008736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008738:	9d00      	ldr	r5, [sp, #0]
 800873a:	ea6f 0a03 	mvn.w	sl, r3
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	4631      	mov	r1, r6
 8008744:	4620      	mov	r0, r4
 8008746:	f000 fbb1 	bl	8008eac <_Bfree>
 800874a:	2f00      	cmp	r7, #0
 800874c:	f43f aeb4 	beq.w	80084b8 <_dtoa_r+0x6d8>
 8008750:	f1b8 0f00 	cmp.w	r8, #0
 8008754:	d005      	beq.n	8008762 <_dtoa_r+0x982>
 8008756:	45b8      	cmp	r8, r7
 8008758:	d003      	beq.n	8008762 <_dtoa_r+0x982>
 800875a:	4641      	mov	r1, r8
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fba5 	bl	8008eac <_Bfree>
 8008762:	4639      	mov	r1, r7
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fba1 	bl	8008eac <_Bfree>
 800876a:	e6a5      	b.n	80084b8 <_dtoa_r+0x6d8>
 800876c:	2600      	movs	r6, #0
 800876e:	4637      	mov	r7, r6
 8008770:	e7e1      	b.n	8008736 <_dtoa_r+0x956>
 8008772:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008778:	4637      	mov	r7, r6
 800877a:	e599      	b.n	80082b0 <_dtoa_r+0x4d0>
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80fd 	beq.w	8008982 <_dtoa_r+0xba2>
 8008788:	2d00      	cmp	r5, #0
 800878a:	dd05      	ble.n	8008798 <_dtoa_r+0x9b8>
 800878c:	4639      	mov	r1, r7
 800878e:	462a      	mov	r2, r5
 8008790:	4620      	mov	r0, r4
 8008792:	f000 fd5d 	bl	8009250 <__lshift>
 8008796:	4607      	mov	r7, r0
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d05c      	beq.n	8008858 <_dtoa_r+0xa78>
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fb43 	bl	8008e2c <_Balloc>
 80087a6:	4605      	mov	r5, r0
 80087a8:	b928      	cbnz	r0, 80087b6 <_dtoa_r+0x9d6>
 80087aa:	4b80      	ldr	r3, [pc, #512]	; (80089ac <_dtoa_r+0xbcc>)
 80087ac:	4602      	mov	r2, r0
 80087ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087b2:	f7ff bb2e 	b.w	8007e12 <_dtoa_r+0x32>
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	3202      	adds	r2, #2
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	f107 010c 	add.w	r1, r7, #12
 80087c0:	300c      	adds	r0, #12
 80087c2:	f000 fb25 	bl	8008e10 <memcpy>
 80087c6:	2201      	movs	r2, #1
 80087c8:	4629      	mov	r1, r5
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fd40 	bl	8009250 <__lshift>
 80087d0:	9b00      	ldr	r3, [sp, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	444b      	add	r3, r9
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	9b02      	ldr	r3, [sp, #8]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	46b8      	mov	r8, r7
 80087e4:	9306      	str	r3, [sp, #24]
 80087e6:	4607      	mov	r7, r0
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	4631      	mov	r1, r6
 80087ec:	3b01      	subs	r3, #1
 80087ee:	4658      	mov	r0, fp
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	f7ff fa67 	bl	8007cc4 <quorem>
 80087f6:	4603      	mov	r3, r0
 80087f8:	3330      	adds	r3, #48	; 0x30
 80087fa:	9004      	str	r0, [sp, #16]
 80087fc:	4641      	mov	r1, r8
 80087fe:	4658      	mov	r0, fp
 8008800:	9308      	str	r3, [sp, #32]
 8008802:	f000 fd91 	bl	8009328 <__mcmp>
 8008806:	463a      	mov	r2, r7
 8008808:	4681      	mov	r9, r0
 800880a:	4631      	mov	r1, r6
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fda7 	bl	8009360 <__mdiff>
 8008812:	68c2      	ldr	r2, [r0, #12]
 8008814:	9b08      	ldr	r3, [sp, #32]
 8008816:	4605      	mov	r5, r0
 8008818:	bb02      	cbnz	r2, 800885c <_dtoa_r+0xa7c>
 800881a:	4601      	mov	r1, r0
 800881c:	4658      	mov	r0, fp
 800881e:	f000 fd83 	bl	8009328 <__mcmp>
 8008822:	9b08      	ldr	r3, [sp, #32]
 8008824:	4602      	mov	r2, r0
 8008826:	4629      	mov	r1, r5
 8008828:	4620      	mov	r0, r4
 800882a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800882e:	f000 fb3d 	bl	8008eac <_Bfree>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008836:	9d01      	ldr	r5, [sp, #4]
 8008838:	ea43 0102 	orr.w	r1, r3, r2
 800883c:	9b06      	ldr	r3, [sp, #24]
 800883e:	430b      	orrs	r3, r1
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	d10d      	bne.n	8008860 <_dtoa_r+0xa80>
 8008844:	2b39      	cmp	r3, #57	; 0x39
 8008846:	d029      	beq.n	800889c <_dtoa_r+0xabc>
 8008848:	f1b9 0f00 	cmp.w	r9, #0
 800884c:	dd01      	ble.n	8008852 <_dtoa_r+0xa72>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	3331      	adds	r3, #49	; 0x31
 8008852:	9a02      	ldr	r2, [sp, #8]
 8008854:	7013      	strb	r3, [r2, #0]
 8008856:	e774      	b.n	8008742 <_dtoa_r+0x962>
 8008858:	4638      	mov	r0, r7
 800885a:	e7b9      	b.n	80087d0 <_dtoa_r+0x9f0>
 800885c:	2201      	movs	r2, #1
 800885e:	e7e2      	b.n	8008826 <_dtoa_r+0xa46>
 8008860:	f1b9 0f00 	cmp.w	r9, #0
 8008864:	db06      	blt.n	8008874 <_dtoa_r+0xa94>
 8008866:	9905      	ldr	r1, [sp, #20]
 8008868:	ea41 0909 	orr.w	r9, r1, r9
 800886c:	9906      	ldr	r1, [sp, #24]
 800886e:	ea59 0101 	orrs.w	r1, r9, r1
 8008872:	d120      	bne.n	80088b6 <_dtoa_r+0xad6>
 8008874:	2a00      	cmp	r2, #0
 8008876:	ddec      	ble.n	8008852 <_dtoa_r+0xa72>
 8008878:	4659      	mov	r1, fp
 800887a:	2201      	movs	r2, #1
 800887c:	4620      	mov	r0, r4
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	f000 fce6 	bl	8009250 <__lshift>
 8008884:	4631      	mov	r1, r6
 8008886:	4683      	mov	fp, r0
 8008888:	f000 fd4e 	bl	8009328 <__mcmp>
 800888c:	2800      	cmp	r0, #0
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	dc02      	bgt.n	8008898 <_dtoa_r+0xab8>
 8008892:	d1de      	bne.n	8008852 <_dtoa_r+0xa72>
 8008894:	07da      	lsls	r2, r3, #31
 8008896:	d5dc      	bpl.n	8008852 <_dtoa_r+0xa72>
 8008898:	2b39      	cmp	r3, #57	; 0x39
 800889a:	d1d8      	bne.n	800884e <_dtoa_r+0xa6e>
 800889c:	9a02      	ldr	r2, [sp, #8]
 800889e:	2339      	movs	r3, #57	; 0x39
 80088a0:	7013      	strb	r3, [r2, #0]
 80088a2:	462b      	mov	r3, r5
 80088a4:	461d      	mov	r5, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088ac:	2a39      	cmp	r2, #57	; 0x39
 80088ae:	d050      	beq.n	8008952 <_dtoa_r+0xb72>
 80088b0:	3201      	adds	r2, #1
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e745      	b.n	8008742 <_dtoa_r+0x962>
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	dd03      	ble.n	80088c2 <_dtoa_r+0xae2>
 80088ba:	2b39      	cmp	r3, #57	; 0x39
 80088bc:	d0ee      	beq.n	800889c <_dtoa_r+0xabc>
 80088be:	3301      	adds	r3, #1
 80088c0:	e7c7      	b.n	8008852 <_dtoa_r+0xa72>
 80088c2:	9a01      	ldr	r2, [sp, #4]
 80088c4:	9907      	ldr	r1, [sp, #28]
 80088c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088ca:	428a      	cmp	r2, r1
 80088cc:	d02a      	beq.n	8008924 <_dtoa_r+0xb44>
 80088ce:	4659      	mov	r1, fp
 80088d0:	2300      	movs	r3, #0
 80088d2:	220a      	movs	r2, #10
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fb0b 	bl	8008ef0 <__multadd>
 80088da:	45b8      	cmp	r8, r7
 80088dc:	4683      	mov	fp, r0
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	f04f 020a 	mov.w	r2, #10
 80088e6:	4641      	mov	r1, r8
 80088e8:	4620      	mov	r0, r4
 80088ea:	d107      	bne.n	80088fc <_dtoa_r+0xb1c>
 80088ec:	f000 fb00 	bl	8008ef0 <__multadd>
 80088f0:	4680      	mov	r8, r0
 80088f2:	4607      	mov	r7, r0
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	e775      	b.n	80087e8 <_dtoa_r+0xa08>
 80088fc:	f000 faf8 	bl	8008ef0 <__multadd>
 8008900:	4639      	mov	r1, r7
 8008902:	4680      	mov	r8, r0
 8008904:	2300      	movs	r3, #0
 8008906:	220a      	movs	r2, #10
 8008908:	4620      	mov	r0, r4
 800890a:	f000 faf1 	bl	8008ef0 <__multadd>
 800890e:	4607      	mov	r7, r0
 8008910:	e7f0      	b.n	80088f4 <_dtoa_r+0xb14>
 8008912:	f1b9 0f00 	cmp.w	r9, #0
 8008916:	9a00      	ldr	r2, [sp, #0]
 8008918:	bfcc      	ite	gt
 800891a:	464d      	movgt	r5, r9
 800891c:	2501      	movle	r5, #1
 800891e:	4415      	add	r5, r2
 8008920:	f04f 0800 	mov.w	r8, #0
 8008924:	4659      	mov	r1, fp
 8008926:	2201      	movs	r2, #1
 8008928:	4620      	mov	r0, r4
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	f000 fc90 	bl	8009250 <__lshift>
 8008930:	4631      	mov	r1, r6
 8008932:	4683      	mov	fp, r0
 8008934:	f000 fcf8 	bl	8009328 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	dcb2      	bgt.n	80088a2 <_dtoa_r+0xac2>
 800893c:	d102      	bne.n	8008944 <_dtoa_r+0xb64>
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	07db      	lsls	r3, r3, #31
 8008942:	d4ae      	bmi.n	80088a2 <_dtoa_r+0xac2>
 8008944:	462b      	mov	r3, r5
 8008946:	461d      	mov	r5, r3
 8008948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800894c:	2a30      	cmp	r2, #48	; 0x30
 800894e:	d0fa      	beq.n	8008946 <_dtoa_r+0xb66>
 8008950:	e6f7      	b.n	8008742 <_dtoa_r+0x962>
 8008952:	9a00      	ldr	r2, [sp, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d1a5      	bne.n	80088a4 <_dtoa_r+0xac4>
 8008958:	f10a 0a01 	add.w	sl, sl, #1
 800895c:	2331      	movs	r3, #49	; 0x31
 800895e:	e779      	b.n	8008854 <_dtoa_r+0xa74>
 8008960:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <_dtoa_r+0xbd0>)
 8008962:	f7ff baaf 	b.w	8007ec4 <_dtoa_r+0xe4>
 8008966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008968:	2b00      	cmp	r3, #0
 800896a:	f47f aa86 	bne.w	8007e7a <_dtoa_r+0x9a>
 800896e:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <_dtoa_r+0xbd4>)
 8008970:	f7ff baa8 	b.w	8007ec4 <_dtoa_r+0xe4>
 8008974:	f1b9 0f00 	cmp.w	r9, #0
 8008978:	dc03      	bgt.n	8008982 <_dtoa_r+0xba2>
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	2b02      	cmp	r3, #2
 800897e:	f73f aec9 	bgt.w	8008714 <_dtoa_r+0x934>
 8008982:	9d00      	ldr	r5, [sp, #0]
 8008984:	4631      	mov	r1, r6
 8008986:	4658      	mov	r0, fp
 8008988:	f7ff f99c 	bl	8007cc4 <quorem>
 800898c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008990:	f805 3b01 	strb.w	r3, [r5], #1
 8008994:	9a00      	ldr	r2, [sp, #0]
 8008996:	1aaa      	subs	r2, r5, r2
 8008998:	4591      	cmp	r9, r2
 800899a:	ddba      	ble.n	8008912 <_dtoa_r+0xb32>
 800899c:	4659      	mov	r1, fp
 800899e:	2300      	movs	r3, #0
 80089a0:	220a      	movs	r2, #10
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 faa4 	bl	8008ef0 <__multadd>
 80089a8:	4683      	mov	fp, r0
 80089aa:	e7eb      	b.n	8008984 <_dtoa_r+0xba4>
 80089ac:	0800af9c 	.word	0x0800af9c
 80089b0:	0800adf4 	.word	0x0800adf4
 80089b4:	0800af19 	.word	0x0800af19

080089b8 <__sflush_r>:
 80089b8:	898a      	ldrh	r2, [r1, #12]
 80089ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	4605      	mov	r5, r0
 80089c0:	0710      	lsls	r0, r2, #28
 80089c2:	460c      	mov	r4, r1
 80089c4:	d458      	bmi.n	8008a78 <__sflush_r+0xc0>
 80089c6:	684b      	ldr	r3, [r1, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	dc05      	bgt.n	80089d8 <__sflush_r+0x20>
 80089cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc02      	bgt.n	80089d8 <__sflush_r+0x20>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d0f9      	beq.n	80089d2 <__sflush_r+0x1a>
 80089de:	2300      	movs	r3, #0
 80089e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089e4:	682f      	ldr	r7, [r5, #0]
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	d032      	beq.n	8008a50 <__sflush_r+0x98>
 80089ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	075a      	lsls	r2, r3, #29
 80089f0:	d505      	bpl.n	80089fe <__sflush_r+0x46>
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	1ac0      	subs	r0, r0, r3
 80089f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089f8:	b10b      	cbz	r3, 80089fe <__sflush_r+0x46>
 80089fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089fc:	1ac0      	subs	r0, r0, r3
 80089fe:	2300      	movs	r3, #0
 8008a00:	4602      	mov	r2, r0
 8008a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a04:	6a21      	ldr	r1, [r4, #32]
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b0      	blx	r6
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	d106      	bne.n	8008a1e <__sflush_r+0x66>
 8008a10:	6829      	ldr	r1, [r5, #0]
 8008a12:	291d      	cmp	r1, #29
 8008a14:	d82c      	bhi.n	8008a70 <__sflush_r+0xb8>
 8008a16:	4a2a      	ldr	r2, [pc, #168]	; (8008ac0 <__sflush_r+0x108>)
 8008a18:	40ca      	lsrs	r2, r1
 8008a1a:	07d6      	lsls	r6, r2, #31
 8008a1c:	d528      	bpl.n	8008a70 <__sflush_r+0xb8>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	6062      	str	r2, [r4, #4]
 8008a22:	04d9      	lsls	r1, r3, #19
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	6022      	str	r2, [r4, #0]
 8008a28:	d504      	bpl.n	8008a34 <__sflush_r+0x7c>
 8008a2a:	1c42      	adds	r2, r0, #1
 8008a2c:	d101      	bne.n	8008a32 <__sflush_r+0x7a>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	b903      	cbnz	r3, 8008a34 <__sflush_r+0x7c>
 8008a32:	6560      	str	r0, [r4, #84]	; 0x54
 8008a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a36:	602f      	str	r7, [r5, #0]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d0ca      	beq.n	80089d2 <__sflush_r+0x1a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__sflush_r+0x92>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fd7f 	bl	8009548 <_free_r>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a4e:	e7c1      	b.n	80089d4 <__sflush_r+0x1c>
 8008a50:	6a21      	ldr	r1, [r4, #32]
 8008a52:	2301      	movs	r3, #1
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	1c41      	adds	r1, r0, #1
 8008a5a:	d1c7      	bne.n	80089ec <__sflush_r+0x34>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0c4      	beq.n	80089ec <__sflush_r+0x34>
 8008a62:	2b1d      	cmp	r3, #29
 8008a64:	d001      	beq.n	8008a6a <__sflush_r+0xb2>
 8008a66:	2b16      	cmp	r3, #22
 8008a68:	d101      	bne.n	8008a6e <__sflush_r+0xb6>
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	e7b1      	b.n	80089d2 <__sflush_r+0x1a>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	e7ad      	b.n	80089d4 <__sflush_r+0x1c>
 8008a78:	690f      	ldr	r7, [r1, #16]
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	d0a9      	beq.n	80089d2 <__sflush_r+0x1a>
 8008a7e:	0793      	lsls	r3, r2, #30
 8008a80:	680e      	ldr	r6, [r1, #0]
 8008a82:	bf08      	it	eq
 8008a84:	694b      	ldreq	r3, [r1, #20]
 8008a86:	600f      	str	r7, [r1, #0]
 8008a88:	bf18      	it	ne
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	eba6 0807 	sub.w	r8, r6, r7
 8008a90:	608b      	str	r3, [r1, #8]
 8008a92:	f1b8 0f00 	cmp.w	r8, #0
 8008a96:	dd9c      	ble.n	80089d2 <__sflush_r+0x1a>
 8008a98:	6a21      	ldr	r1, [r4, #32]
 8008a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a9c:	4643      	mov	r3, r8
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	dc06      	bgt.n	8008ab6 <__sflush_r+0xfe>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e78e      	b.n	80089d4 <__sflush_r+0x1c>
 8008ab6:	4407      	add	r7, r0
 8008ab8:	eba8 0800 	sub.w	r8, r8, r0
 8008abc:	e7e9      	b.n	8008a92 <__sflush_r+0xda>
 8008abe:	bf00      	nop
 8008ac0:	20400001 	.word	0x20400001

08008ac4 <_fflush_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	690b      	ldr	r3, [r1, #16]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b913      	cbnz	r3, 8008ad4 <_fflush_r+0x10>
 8008ace:	2500      	movs	r5, #0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	b118      	cbz	r0, 8008ade <_fflush_r+0x1a>
 8008ad6:	6983      	ldr	r3, [r0, #24]
 8008ad8:	b90b      	cbnz	r3, 8008ade <_fflush_r+0x1a>
 8008ada:	f000 f887 	bl	8008bec <__sinit>
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <_fflush_r+0x6c>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	d11b      	bne.n	8008b1c <_fflush_r+0x58>
 8008ae4:	686c      	ldr	r4, [r5, #4]
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0ef      	beq.n	8008ace <_fflush_r+0xa>
 8008aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d404      	bmi.n	8008afe <_fflush_r+0x3a>
 8008af4:	0599      	lsls	r1, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_fflush_r+0x3a>
 8008af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afa:	f000 f91a 	bl	8008d32 <__retarget_lock_acquire_recursive>
 8008afe:	4628      	mov	r0, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	f7ff ff59 	bl	80089b8 <__sflush_r>
 8008b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	d4e0      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d4dd      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b16:	f000 f90d 	bl	8008d34 <__retarget_lock_release_recursive>
 8008b1a:	e7d9      	b.n	8008ad0 <_fflush_r+0xc>
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <_fflush_r+0x70>)
 8008b1e:	429c      	cmp	r4, r3
 8008b20:	d101      	bne.n	8008b26 <_fflush_r+0x62>
 8008b22:	68ac      	ldr	r4, [r5, #8]
 8008b24:	e7df      	b.n	8008ae6 <_fflush_r+0x22>
 8008b26:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <_fflush_r+0x74>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	bf08      	it	eq
 8008b2c:	68ec      	ldreq	r4, [r5, #12]
 8008b2e:	e7da      	b.n	8008ae6 <_fflush_r+0x22>
 8008b30:	0800afd0 	.word	0x0800afd0
 8008b34:	0800aff0 	.word	0x0800aff0
 8008b38:	0800afb0 	.word	0x0800afb0

08008b3c <std>:
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	e9c0 3300 	strd	r3, r3, [r0]
 8008b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b4a:	6083      	str	r3, [r0, #8]
 8008b4c:	8181      	strh	r1, [r0, #12]
 8008b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b50:	81c2      	strh	r2, [r0, #14]
 8008b52:	6183      	str	r3, [r0, #24]
 8008b54:	4619      	mov	r1, r3
 8008b56:	2208      	movs	r2, #8
 8008b58:	305c      	adds	r0, #92	; 0x5c
 8008b5a:	f7fe fa1d 	bl	8006f98 <memset>
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <std+0x38>)
 8008b60:	6263      	str	r3, [r4, #36]	; 0x24
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <std+0x3c>)
 8008b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b66:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <std+0x40>)
 8008b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <std+0x44>)
 8008b6c:	6224      	str	r4, [r4, #32]
 8008b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	bf00      	nop
 8008b74:	08009971 	.word	0x08009971
 8008b78:	08009993 	.word	0x08009993
 8008b7c:	080099cb 	.word	0x080099cb
 8008b80:	080099ef 	.word	0x080099ef

08008b84 <_cleanup_r>:
 8008b84:	4901      	ldr	r1, [pc, #4]	; (8008b8c <_cleanup_r+0x8>)
 8008b86:	f000 b8af 	b.w	8008ce8 <_fwalk_reent>
 8008b8a:	bf00      	nop
 8008b8c:	08008ac5 	.word	0x08008ac5

08008b90 <__sfmoreglue>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	1e4a      	subs	r2, r1, #1
 8008b94:	2568      	movs	r5, #104	; 0x68
 8008b96:	4355      	muls	r5, r2
 8008b98:	460e      	mov	r6, r1
 8008b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b9e:	f000 fd23 	bl	80095e8 <_malloc_r>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	b140      	cbz	r0, 8008bb8 <__sfmoreglue+0x28>
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bac:	300c      	adds	r0, #12
 8008bae:	60a0      	str	r0, [r4, #8]
 8008bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bb4:	f7fe f9f0 	bl	8006f98 <memset>
 8008bb8:	4620      	mov	r0, r4
 8008bba:	bd70      	pop	{r4, r5, r6, pc}

08008bbc <__sfp_lock_acquire>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	; (8008bc4 <__sfp_lock_acquire+0x8>)
 8008bbe:	f000 b8b8 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	200008f8 	.word	0x200008f8

08008bc8 <__sfp_lock_release>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__sfp_lock_release+0x8>)
 8008bca:	f000 b8b3 	b.w	8008d34 <__retarget_lock_release_recursive>
 8008bce:	bf00      	nop
 8008bd0:	200008f8 	.word	0x200008f8

08008bd4 <__sinit_lock_acquire>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__sinit_lock_acquire+0x8>)
 8008bd6:	f000 b8ac 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008bda:	bf00      	nop
 8008bdc:	200008f3 	.word	0x200008f3

08008be0 <__sinit_lock_release>:
 8008be0:	4801      	ldr	r0, [pc, #4]	; (8008be8 <__sinit_lock_release+0x8>)
 8008be2:	f000 b8a7 	b.w	8008d34 <__retarget_lock_release_recursive>
 8008be6:	bf00      	nop
 8008be8:	200008f3 	.word	0x200008f3

08008bec <__sinit>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	f7ff fff0 	bl	8008bd4 <__sinit_lock_acquire>
 8008bf4:	69a3      	ldr	r3, [r4, #24]
 8008bf6:	b11b      	cbz	r3, 8008c00 <__sinit+0x14>
 8008bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bfc:	f7ff bff0 	b.w	8008be0 <__sinit_lock_release>
 8008c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c04:	6523      	str	r3, [r4, #80]	; 0x50
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <__sinit+0x68>)
 8008c08:	4a13      	ldr	r2, [pc, #76]	; (8008c58 <__sinit+0x6c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	bf04      	itt	eq
 8008c12:	2301      	moveq	r3, #1
 8008c14:	61a3      	streq	r3, [r4, #24]
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 f820 	bl	8008c5c <__sfp>
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 f81c 	bl	8008c5c <__sfp>
 8008c24:	60a0      	str	r0, [r4, #8]
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 f818 	bl	8008c5c <__sfp>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	60e0      	str	r0, [r4, #12]
 8008c30:	2104      	movs	r1, #4
 8008c32:	6860      	ldr	r0, [r4, #4]
 8008c34:	f7ff ff82 	bl	8008b3c <std>
 8008c38:	68a0      	ldr	r0, [r4, #8]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	2109      	movs	r1, #9
 8008c3e:	f7ff ff7d 	bl	8008b3c <std>
 8008c42:	68e0      	ldr	r0, [r4, #12]
 8008c44:	2202      	movs	r2, #2
 8008c46:	2112      	movs	r1, #18
 8008c48:	f7ff ff78 	bl	8008b3c <std>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	61a3      	str	r3, [r4, #24]
 8008c50:	e7d2      	b.n	8008bf8 <__sinit+0xc>
 8008c52:	bf00      	nop
 8008c54:	0800ade0 	.word	0x0800ade0
 8008c58:	08008b85 	.word	0x08008b85

08008c5c <__sfp>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	4607      	mov	r7, r0
 8008c60:	f7ff ffac 	bl	8008bbc <__sfp_lock_acquire>
 8008c64:	4b1e      	ldr	r3, [pc, #120]	; (8008ce0 <__sfp+0x84>)
 8008c66:	681e      	ldr	r6, [r3, #0]
 8008c68:	69b3      	ldr	r3, [r6, #24]
 8008c6a:	b913      	cbnz	r3, 8008c72 <__sfp+0x16>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff ffbd 	bl	8008bec <__sinit>
 8008c72:	3648      	adds	r6, #72	; 0x48
 8008c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	d503      	bpl.n	8008c84 <__sfp+0x28>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	b30b      	cbz	r3, 8008cc4 <__sfp+0x68>
 8008c80:	6836      	ldr	r6, [r6, #0]
 8008c82:	e7f7      	b.n	8008c74 <__sfp+0x18>
 8008c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c88:	b9d5      	cbnz	r5, 8008cc0 <__sfp+0x64>
 8008c8a:	4b16      	ldr	r3, [pc, #88]	; (8008ce4 <__sfp+0x88>)
 8008c8c:	60e3      	str	r3, [r4, #12]
 8008c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c92:	6665      	str	r5, [r4, #100]	; 0x64
 8008c94:	f000 f84c 	bl	8008d30 <__retarget_lock_init_recursive>
 8008c98:	f7ff ff96 	bl	8008bc8 <__sfp_lock_release>
 8008c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ca4:	6025      	str	r5, [r4, #0]
 8008ca6:	61a5      	str	r5, [r4, #24]
 8008ca8:	2208      	movs	r2, #8
 8008caa:	4629      	mov	r1, r5
 8008cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cb0:	f7fe f972 	bl	8006f98 <memset>
 8008cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc0:	3468      	adds	r4, #104	; 0x68
 8008cc2:	e7d9      	b.n	8008c78 <__sfp+0x1c>
 8008cc4:	2104      	movs	r1, #4
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7ff ff62 	bl	8008b90 <__sfmoreglue>
 8008ccc:	4604      	mov	r4, r0
 8008cce:	6030      	str	r0, [r6, #0]
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d1d5      	bne.n	8008c80 <__sfp+0x24>
 8008cd4:	f7ff ff78 	bl	8008bc8 <__sfp_lock_release>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	e7ee      	b.n	8008cbc <__sfp+0x60>
 8008cde:	bf00      	nop
 8008ce0:	0800ade0 	.word	0x0800ade0
 8008ce4:	ffff0001 	.word	0xffff0001

08008ce8 <_fwalk_reent>:
 8008ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cec:	4606      	mov	r6, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8008cfe:	d505      	bpl.n	8008d0c <_fwalk_reent+0x24>
 8008d00:	6824      	ldr	r4, [r4, #0]
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d1f7      	bne.n	8008cf6 <_fwalk_reent+0xe>
 8008d06:	4638      	mov	r0, r7
 8008d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0c:	89ab      	ldrh	r3, [r5, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d907      	bls.n	8008d22 <_fwalk_reent+0x3a>
 8008d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d16:	3301      	adds	r3, #1
 8008d18:	d003      	beq.n	8008d22 <_fwalk_reent+0x3a>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	47c0      	blx	r8
 8008d20:	4307      	orrs	r7, r0
 8008d22:	3568      	adds	r5, #104	; 0x68
 8008d24:	e7e9      	b.n	8008cfa <_fwalk_reent+0x12>
	...

08008d28 <_localeconv_r>:
 8008d28:	4800      	ldr	r0, [pc, #0]	; (8008d2c <_localeconv_r+0x4>)
 8008d2a:	4770      	bx	lr
 8008d2c:	20000318 	.word	0x20000318

08008d30 <__retarget_lock_init_recursive>:
 8008d30:	4770      	bx	lr

08008d32 <__retarget_lock_acquire_recursive>:
 8008d32:	4770      	bx	lr

08008d34 <__retarget_lock_release_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <__swhatbuf_r>:
 8008d36:	b570      	push	{r4, r5, r6, lr}
 8008d38:	460e      	mov	r6, r1
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	b096      	sub	sp, #88	; 0x58
 8008d42:	4614      	mov	r4, r2
 8008d44:	461d      	mov	r5, r3
 8008d46:	da07      	bge.n	8008d58 <__swhatbuf_r+0x22>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	602b      	str	r3, [r5, #0]
 8008d4c:	89b3      	ldrh	r3, [r6, #12]
 8008d4e:	061a      	lsls	r2, r3, #24
 8008d50:	d410      	bmi.n	8008d74 <__swhatbuf_r+0x3e>
 8008d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d56:	e00e      	b.n	8008d76 <__swhatbuf_r+0x40>
 8008d58:	466a      	mov	r2, sp
 8008d5a:	f000 fe9f 	bl	8009a9c <_fstat_r>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	dbf2      	blt.n	8008d48 <__swhatbuf_r+0x12>
 8008d62:	9a01      	ldr	r2, [sp, #4]
 8008d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d6c:	425a      	negs	r2, r3
 8008d6e:	415a      	adcs	r2, r3
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	e7ee      	b.n	8008d52 <__swhatbuf_r+0x1c>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	2000      	movs	r0, #0
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	b016      	add	sp, #88	; 0x58
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d80 <__smakebuf_r>:
 8008d80:	898b      	ldrh	r3, [r1, #12]
 8008d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d84:	079d      	lsls	r5, r3, #30
 8008d86:	4606      	mov	r6, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d507      	bpl.n	8008d9c <__smakebuf_r+0x1c>
 8008d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2301      	movs	r3, #1
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	ab01      	add	r3, sp, #4
 8008d9e:	466a      	mov	r2, sp
 8008da0:	f7ff ffc9 	bl	8008d36 <__swhatbuf_r>
 8008da4:	9900      	ldr	r1, [sp, #0]
 8008da6:	4605      	mov	r5, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f000 fc1d 	bl	80095e8 <_malloc_r>
 8008dae:	b948      	cbnz	r0, 8008dc4 <__smakebuf_r+0x44>
 8008db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db4:	059a      	lsls	r2, r3, #22
 8008db6:	d4ef      	bmi.n	8008d98 <__smakebuf_r+0x18>
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	e7e3      	b.n	8008d8c <__smakebuf_r+0xc>
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <__smakebuf_r+0x7c>)
 8008dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	6163      	str	r3, [r4, #20]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	6120      	str	r0, [r4, #16]
 8008dda:	b15b      	cbz	r3, 8008df4 <__smakebuf_r+0x74>
 8008ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 fe6d 	bl	8009ac0 <_isatty_r>
 8008de6:	b128      	cbz	r0, 8008df4 <__smakebuf_r+0x74>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	89a0      	ldrh	r0, [r4, #12]
 8008df6:	4305      	orrs	r5, r0
 8008df8:	81a5      	strh	r5, [r4, #12]
 8008dfa:	e7cd      	b.n	8008d98 <__smakebuf_r+0x18>
 8008dfc:	08008b85 	.word	0x08008b85

08008e00 <malloc>:
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <malloc+0xc>)
 8008e02:	4601      	mov	r1, r0
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f000 bbef 	b.w	80095e8 <_malloc_r>
 8008e0a:	bf00      	nop
 8008e0c:	200001c4 	.word	0x200001c4

08008e10 <memcpy>:
 8008e10:	440a      	add	r2, r1
 8008e12:	4291      	cmp	r1, r2
 8008e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e18:	d100      	bne.n	8008e1c <memcpy+0xc>
 8008e1a:	4770      	bx	lr
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e26:	4291      	cmp	r1, r2
 8008e28:	d1f9      	bne.n	8008e1e <memcpy+0xe>
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <_Balloc>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	b976      	cbnz	r6, 8008e54 <_Balloc+0x28>
 8008e36:	2010      	movs	r0, #16
 8008e38:	f7ff ffe2 	bl	8008e00 <malloc>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e40:	b920      	cbnz	r0, 8008e4c <_Balloc+0x20>
 8008e42:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <_Balloc+0x78>)
 8008e44:	4818      	ldr	r0, [pc, #96]	; (8008ea8 <_Balloc+0x7c>)
 8008e46:	2166      	movs	r1, #102	; 0x66
 8008e48:	f000 fde8 	bl	8009a1c <__assert_func>
 8008e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e50:	6006      	str	r6, [r0, #0]
 8008e52:	60c6      	str	r6, [r0, #12]
 8008e54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e56:	68f3      	ldr	r3, [r6, #12]
 8008e58:	b183      	cbz	r3, 8008e7c <_Balloc+0x50>
 8008e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e62:	b9b8      	cbnz	r0, 8008e94 <_Balloc+0x68>
 8008e64:	2101      	movs	r1, #1
 8008e66:	fa01 f605 	lsl.w	r6, r1, r5
 8008e6a:	1d72      	adds	r2, r6, #5
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fb5a 	bl	8009528 <_calloc_r>
 8008e74:	b160      	cbz	r0, 8008e90 <_Balloc+0x64>
 8008e76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e7a:	e00e      	b.n	8008e9a <_Balloc+0x6e>
 8008e7c:	2221      	movs	r2, #33	; 0x21
 8008e7e:	2104      	movs	r1, #4
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fb51 	bl	8009528 <_calloc_r>
 8008e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e88:	60f0      	str	r0, [r6, #12]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e4      	bne.n	8008e5a <_Balloc+0x2e>
 8008e90:	2000      	movs	r0, #0
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	6802      	ldr	r2, [r0, #0]
 8008e96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ea0:	e7f7      	b.n	8008e92 <_Balloc+0x66>
 8008ea2:	bf00      	nop
 8008ea4:	0800af26 	.word	0x0800af26
 8008ea8:	0800b010 	.word	0x0800b010

08008eac <_Bfree>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b976      	cbnz	r6, 8008ed4 <_Bfree+0x28>
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	f7ff ffa2 	bl	8008e00 <malloc>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6268      	str	r0, [r5, #36]	; 0x24
 8008ec0:	b920      	cbnz	r0, 8008ecc <_Bfree+0x20>
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <_Bfree+0x3c>)
 8008ec4:	4809      	ldr	r0, [pc, #36]	; (8008eec <_Bfree+0x40>)
 8008ec6:	218a      	movs	r1, #138	; 0x8a
 8008ec8:	f000 fda8 	bl	8009a1c <__assert_func>
 8008ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed0:	6006      	str	r6, [r0, #0]
 8008ed2:	60c6      	str	r6, [r0, #12]
 8008ed4:	b13c      	cbz	r4, 8008ee6 <_Bfree+0x3a>
 8008ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee0:	6021      	str	r1, [r4, #0]
 8008ee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	0800af26 	.word	0x0800af26
 8008eec:	0800b010 	.word	0x0800b010

08008ef0 <__multadd>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	690e      	ldr	r6, [r1, #16]
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4698      	mov	r8, r3
 8008efa:	460c      	mov	r4, r1
 8008efc:	f101 0014 	add.w	r0, r1, #20
 8008f00:	2300      	movs	r3, #0
 8008f02:	6805      	ldr	r5, [r0, #0]
 8008f04:	b2a9      	uxth	r1, r5
 8008f06:	fb02 8101 	mla	r1, r2, r1, r8
 8008f0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008f0e:	0c2d      	lsrs	r5, r5, #16
 8008f10:	fb02 c505 	mla	r5, r2, r5, ip
 8008f14:	b289      	uxth	r1, r1
 8008f16:	3301      	adds	r3, #1
 8008f18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008f1c:	429e      	cmp	r6, r3
 8008f1e:	f840 1b04 	str.w	r1, [r0], #4
 8008f22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008f26:	dcec      	bgt.n	8008f02 <__multadd+0x12>
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	d022      	beq.n	8008f74 <__multadd+0x84>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	dc19      	bgt.n	8008f68 <__multadd+0x78>
 8008f34:	6861      	ldr	r1, [r4, #4]
 8008f36:	4638      	mov	r0, r7
 8008f38:	3101      	adds	r1, #1
 8008f3a:	f7ff ff77 	bl	8008e2c <_Balloc>
 8008f3e:	4605      	mov	r5, r0
 8008f40:	b928      	cbnz	r0, 8008f4e <__multadd+0x5e>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <__multadd+0x8c>)
 8008f46:	480e      	ldr	r0, [pc, #56]	; (8008f80 <__multadd+0x90>)
 8008f48:	21b5      	movs	r1, #181	; 0xb5
 8008f4a:	f000 fd67 	bl	8009a1c <__assert_func>
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	3202      	adds	r2, #2
 8008f52:	f104 010c 	add.w	r1, r4, #12
 8008f56:	0092      	lsls	r2, r2, #2
 8008f58:	300c      	adds	r0, #12
 8008f5a:	f7ff ff59 	bl	8008e10 <memcpy>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7ff ffa3 	bl	8008eac <_Bfree>
 8008f66:	462c      	mov	r4, r5
 8008f68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f72:	6126      	str	r6, [r4, #16]
 8008f74:	4620      	mov	r0, r4
 8008f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7a:	bf00      	nop
 8008f7c:	0800af9c 	.word	0x0800af9c
 8008f80:	0800b010 	.word	0x0800b010

08008f84 <__hi0bits>:
 8008f84:	0c03      	lsrs	r3, r0, #16
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	b9d3      	cbnz	r3, 8008fc0 <__hi0bits+0x3c>
 8008f8a:	0400      	lsls	r0, r0, #16
 8008f8c:	2310      	movs	r3, #16
 8008f8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f92:	bf04      	itt	eq
 8008f94:	0200      	lsleq	r0, r0, #8
 8008f96:	3308      	addeq	r3, #8
 8008f98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f9c:	bf04      	itt	eq
 8008f9e:	0100      	lsleq	r0, r0, #4
 8008fa0:	3304      	addeq	r3, #4
 8008fa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fa6:	bf04      	itt	eq
 8008fa8:	0080      	lsleq	r0, r0, #2
 8008faa:	3302      	addeq	r3, #2
 8008fac:	2800      	cmp	r0, #0
 8008fae:	db05      	blt.n	8008fbc <__hi0bits+0x38>
 8008fb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fb4:	f103 0301 	add.w	r3, r3, #1
 8008fb8:	bf08      	it	eq
 8008fba:	2320      	moveq	r3, #32
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4770      	bx	lr
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e7e4      	b.n	8008f8e <__hi0bits+0xa>

08008fc4 <__lo0bits>:
 8008fc4:	6803      	ldr	r3, [r0, #0]
 8008fc6:	f013 0207 	ands.w	r2, r3, #7
 8008fca:	4601      	mov	r1, r0
 8008fcc:	d00b      	beq.n	8008fe6 <__lo0bits+0x22>
 8008fce:	07da      	lsls	r2, r3, #31
 8008fd0:	d424      	bmi.n	800901c <__lo0bits+0x58>
 8008fd2:	0798      	lsls	r0, r3, #30
 8008fd4:	bf49      	itett	mi
 8008fd6:	085b      	lsrmi	r3, r3, #1
 8008fd8:	089b      	lsrpl	r3, r3, #2
 8008fda:	2001      	movmi	r0, #1
 8008fdc:	600b      	strmi	r3, [r1, #0]
 8008fde:	bf5c      	itt	pl
 8008fe0:	600b      	strpl	r3, [r1, #0]
 8008fe2:	2002      	movpl	r0, #2
 8008fe4:	4770      	bx	lr
 8008fe6:	b298      	uxth	r0, r3
 8008fe8:	b9b0      	cbnz	r0, 8009018 <__lo0bits+0x54>
 8008fea:	0c1b      	lsrs	r3, r3, #16
 8008fec:	2010      	movs	r0, #16
 8008fee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ff2:	bf04      	itt	eq
 8008ff4:	0a1b      	lsreq	r3, r3, #8
 8008ff6:	3008      	addeq	r0, #8
 8008ff8:	071a      	lsls	r2, r3, #28
 8008ffa:	bf04      	itt	eq
 8008ffc:	091b      	lsreq	r3, r3, #4
 8008ffe:	3004      	addeq	r0, #4
 8009000:	079a      	lsls	r2, r3, #30
 8009002:	bf04      	itt	eq
 8009004:	089b      	lsreq	r3, r3, #2
 8009006:	3002      	addeq	r0, #2
 8009008:	07da      	lsls	r2, r3, #31
 800900a:	d403      	bmi.n	8009014 <__lo0bits+0x50>
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	f100 0001 	add.w	r0, r0, #1
 8009012:	d005      	beq.n	8009020 <__lo0bits+0x5c>
 8009014:	600b      	str	r3, [r1, #0]
 8009016:	4770      	bx	lr
 8009018:	4610      	mov	r0, r2
 800901a:	e7e8      	b.n	8008fee <__lo0bits+0x2a>
 800901c:	2000      	movs	r0, #0
 800901e:	4770      	bx	lr
 8009020:	2020      	movs	r0, #32
 8009022:	4770      	bx	lr

08009024 <__i2b>:
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
 8009028:	2101      	movs	r1, #1
 800902a:	f7ff feff 	bl	8008e2c <_Balloc>
 800902e:	4602      	mov	r2, r0
 8009030:	b928      	cbnz	r0, 800903e <__i2b+0x1a>
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <__i2b+0x24>)
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <__i2b+0x28>)
 8009036:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800903a:	f000 fcef 	bl	8009a1c <__assert_func>
 800903e:	2301      	movs	r3, #1
 8009040:	6144      	str	r4, [r0, #20]
 8009042:	6103      	str	r3, [r0, #16]
 8009044:	bd10      	pop	{r4, pc}
 8009046:	bf00      	nop
 8009048:	0800af9c 	.word	0x0800af9c
 800904c:	0800b010 	.word	0x0800b010

08009050 <__multiply>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4614      	mov	r4, r2
 8009056:	690a      	ldr	r2, [r1, #16]
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	429a      	cmp	r2, r3
 800905c:	bfb8      	it	lt
 800905e:	460b      	movlt	r3, r1
 8009060:	460d      	mov	r5, r1
 8009062:	bfbc      	itt	lt
 8009064:	4625      	movlt	r5, r4
 8009066:	461c      	movlt	r4, r3
 8009068:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800906c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009070:	68ab      	ldr	r3, [r5, #8]
 8009072:	6869      	ldr	r1, [r5, #4]
 8009074:	eb0a 0709 	add.w	r7, sl, r9
 8009078:	42bb      	cmp	r3, r7
 800907a:	b085      	sub	sp, #20
 800907c:	bfb8      	it	lt
 800907e:	3101      	addlt	r1, #1
 8009080:	f7ff fed4 	bl	8008e2c <_Balloc>
 8009084:	b930      	cbnz	r0, 8009094 <__multiply+0x44>
 8009086:	4602      	mov	r2, r0
 8009088:	4b42      	ldr	r3, [pc, #264]	; (8009194 <__multiply+0x144>)
 800908a:	4843      	ldr	r0, [pc, #268]	; (8009198 <__multiply+0x148>)
 800908c:	f240 115d 	movw	r1, #349	; 0x15d
 8009090:	f000 fcc4 	bl	8009a1c <__assert_func>
 8009094:	f100 0614 	add.w	r6, r0, #20
 8009098:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800909c:	4633      	mov	r3, r6
 800909e:	2200      	movs	r2, #0
 80090a0:	4543      	cmp	r3, r8
 80090a2:	d31e      	bcc.n	80090e2 <__multiply+0x92>
 80090a4:	f105 0c14 	add.w	ip, r5, #20
 80090a8:	f104 0314 	add.w	r3, r4, #20
 80090ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80090b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80090b4:	9202      	str	r2, [sp, #8]
 80090b6:	ebac 0205 	sub.w	r2, ip, r5
 80090ba:	3a15      	subs	r2, #21
 80090bc:	f022 0203 	bic.w	r2, r2, #3
 80090c0:	3204      	adds	r2, #4
 80090c2:	f105 0115 	add.w	r1, r5, #21
 80090c6:	458c      	cmp	ip, r1
 80090c8:	bf38      	it	cc
 80090ca:	2204      	movcc	r2, #4
 80090cc:	9201      	str	r2, [sp, #4]
 80090ce:	9a02      	ldr	r2, [sp, #8]
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d808      	bhi.n	80090e8 <__multiply+0x98>
 80090d6:	2f00      	cmp	r7, #0
 80090d8:	dc55      	bgt.n	8009186 <__multiply+0x136>
 80090da:	6107      	str	r7, [r0, #16]
 80090dc:	b005      	add	sp, #20
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	f843 2b04 	str.w	r2, [r3], #4
 80090e6:	e7db      	b.n	80090a0 <__multiply+0x50>
 80090e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80090ec:	f1ba 0f00 	cmp.w	sl, #0
 80090f0:	d020      	beq.n	8009134 <__multiply+0xe4>
 80090f2:	f105 0e14 	add.w	lr, r5, #20
 80090f6:	46b1      	mov	r9, r6
 80090f8:	2200      	movs	r2, #0
 80090fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090fe:	f8d9 b000 	ldr.w	fp, [r9]
 8009102:	b2a1      	uxth	r1, r4
 8009104:	fa1f fb8b 	uxth.w	fp, fp
 8009108:	fb0a b101 	mla	r1, sl, r1, fp
 800910c:	4411      	add	r1, r2
 800910e:	f8d9 2000 	ldr.w	r2, [r9]
 8009112:	0c24      	lsrs	r4, r4, #16
 8009114:	0c12      	lsrs	r2, r2, #16
 8009116:	fb0a 2404 	mla	r4, sl, r4, r2
 800911a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800911e:	b289      	uxth	r1, r1
 8009120:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009124:	45f4      	cmp	ip, lr
 8009126:	f849 1b04 	str.w	r1, [r9], #4
 800912a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800912e:	d8e4      	bhi.n	80090fa <__multiply+0xaa>
 8009130:	9901      	ldr	r1, [sp, #4]
 8009132:	5072      	str	r2, [r6, r1]
 8009134:	9a03      	ldr	r2, [sp, #12]
 8009136:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800913a:	3304      	adds	r3, #4
 800913c:	f1b9 0f00 	cmp.w	r9, #0
 8009140:	d01f      	beq.n	8009182 <__multiply+0x132>
 8009142:	6834      	ldr	r4, [r6, #0]
 8009144:	f105 0114 	add.w	r1, r5, #20
 8009148:	46b6      	mov	lr, r6
 800914a:	f04f 0a00 	mov.w	sl, #0
 800914e:	880a      	ldrh	r2, [r1, #0]
 8009150:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009154:	fb09 b202 	mla	r2, r9, r2, fp
 8009158:	4492      	add	sl, r2
 800915a:	b2a4      	uxth	r4, r4
 800915c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009160:	f84e 4b04 	str.w	r4, [lr], #4
 8009164:	f851 4b04 	ldr.w	r4, [r1], #4
 8009168:	f8be 2000 	ldrh.w	r2, [lr]
 800916c:	0c24      	lsrs	r4, r4, #16
 800916e:	fb09 2404 	mla	r4, r9, r4, r2
 8009172:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009176:	458c      	cmp	ip, r1
 8009178:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800917c:	d8e7      	bhi.n	800914e <__multiply+0xfe>
 800917e:	9a01      	ldr	r2, [sp, #4]
 8009180:	50b4      	str	r4, [r6, r2]
 8009182:	3604      	adds	r6, #4
 8009184:	e7a3      	b.n	80090ce <__multiply+0x7e>
 8009186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1a5      	bne.n	80090da <__multiply+0x8a>
 800918e:	3f01      	subs	r7, #1
 8009190:	e7a1      	b.n	80090d6 <__multiply+0x86>
 8009192:	bf00      	nop
 8009194:	0800af9c 	.word	0x0800af9c
 8009198:	0800b010 	.word	0x0800b010

0800919c <__pow5mult>:
 800919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a0:	4615      	mov	r5, r2
 80091a2:	f012 0203 	ands.w	r2, r2, #3
 80091a6:	4606      	mov	r6, r0
 80091a8:	460f      	mov	r7, r1
 80091aa:	d007      	beq.n	80091bc <__pow5mult+0x20>
 80091ac:	4c25      	ldr	r4, [pc, #148]	; (8009244 <__pow5mult+0xa8>)
 80091ae:	3a01      	subs	r2, #1
 80091b0:	2300      	movs	r3, #0
 80091b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091b6:	f7ff fe9b 	bl	8008ef0 <__multadd>
 80091ba:	4607      	mov	r7, r0
 80091bc:	10ad      	asrs	r5, r5, #2
 80091be:	d03d      	beq.n	800923c <__pow5mult+0xa0>
 80091c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091c2:	b97c      	cbnz	r4, 80091e4 <__pow5mult+0x48>
 80091c4:	2010      	movs	r0, #16
 80091c6:	f7ff fe1b 	bl	8008e00 <malloc>
 80091ca:	4602      	mov	r2, r0
 80091cc:	6270      	str	r0, [r6, #36]	; 0x24
 80091ce:	b928      	cbnz	r0, 80091dc <__pow5mult+0x40>
 80091d0:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <__pow5mult+0xac>)
 80091d2:	481e      	ldr	r0, [pc, #120]	; (800924c <__pow5mult+0xb0>)
 80091d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091d8:	f000 fc20 	bl	8009a1c <__assert_func>
 80091dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091e0:	6004      	str	r4, [r0, #0]
 80091e2:	60c4      	str	r4, [r0, #12]
 80091e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091ec:	b94c      	cbnz	r4, 8009202 <__pow5mult+0x66>
 80091ee:	f240 2171 	movw	r1, #625	; 0x271
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ff16 	bl	8009024 <__i2b>
 80091f8:	2300      	movs	r3, #0
 80091fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80091fe:	4604      	mov	r4, r0
 8009200:	6003      	str	r3, [r0, #0]
 8009202:	f04f 0900 	mov.w	r9, #0
 8009206:	07eb      	lsls	r3, r5, #31
 8009208:	d50a      	bpl.n	8009220 <__pow5mult+0x84>
 800920a:	4639      	mov	r1, r7
 800920c:	4622      	mov	r2, r4
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff ff1e 	bl	8009050 <__multiply>
 8009214:	4639      	mov	r1, r7
 8009216:	4680      	mov	r8, r0
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff fe47 	bl	8008eac <_Bfree>
 800921e:	4647      	mov	r7, r8
 8009220:	106d      	asrs	r5, r5, #1
 8009222:	d00b      	beq.n	800923c <__pow5mult+0xa0>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	b938      	cbnz	r0, 8009238 <__pow5mult+0x9c>
 8009228:	4622      	mov	r2, r4
 800922a:	4621      	mov	r1, r4
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff ff0f 	bl	8009050 <__multiply>
 8009232:	6020      	str	r0, [r4, #0]
 8009234:	f8c0 9000 	str.w	r9, [r0]
 8009238:	4604      	mov	r4, r0
 800923a:	e7e4      	b.n	8009206 <__pow5mult+0x6a>
 800923c:	4638      	mov	r0, r7
 800923e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009242:	bf00      	nop
 8009244:	0800b160 	.word	0x0800b160
 8009248:	0800af26 	.word	0x0800af26
 800924c:	0800b010 	.word	0x0800b010

08009250 <__lshift>:
 8009250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	6849      	ldr	r1, [r1, #4]
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	4607      	mov	r7, r0
 8009262:	4691      	mov	r9, r2
 8009264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009268:	f108 0601 	add.w	r6, r8, #1
 800926c:	42b3      	cmp	r3, r6
 800926e:	db0b      	blt.n	8009288 <__lshift+0x38>
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff fddb 	bl	8008e2c <_Balloc>
 8009276:	4605      	mov	r5, r0
 8009278:	b948      	cbnz	r0, 800928e <__lshift+0x3e>
 800927a:	4602      	mov	r2, r0
 800927c:	4b28      	ldr	r3, [pc, #160]	; (8009320 <__lshift+0xd0>)
 800927e:	4829      	ldr	r0, [pc, #164]	; (8009324 <__lshift+0xd4>)
 8009280:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009284:	f000 fbca 	bl	8009a1c <__assert_func>
 8009288:	3101      	adds	r1, #1
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	e7ee      	b.n	800926c <__lshift+0x1c>
 800928e:	2300      	movs	r3, #0
 8009290:	f100 0114 	add.w	r1, r0, #20
 8009294:	f100 0210 	add.w	r2, r0, #16
 8009298:	4618      	mov	r0, r3
 800929a:	4553      	cmp	r3, sl
 800929c:	db33      	blt.n	8009306 <__lshift+0xb6>
 800929e:	6920      	ldr	r0, [r4, #16]
 80092a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092a4:	f104 0314 	add.w	r3, r4, #20
 80092a8:	f019 091f 	ands.w	r9, r9, #31
 80092ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092b4:	d02b      	beq.n	800930e <__lshift+0xbe>
 80092b6:	f1c9 0e20 	rsb	lr, r9, #32
 80092ba:	468a      	mov	sl, r1
 80092bc:	2200      	movs	r2, #0
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	fa00 f009 	lsl.w	r0, r0, r9
 80092c4:	4302      	orrs	r2, r0
 80092c6:	f84a 2b04 	str.w	r2, [sl], #4
 80092ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ce:	459c      	cmp	ip, r3
 80092d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80092d4:	d8f3      	bhi.n	80092be <__lshift+0x6e>
 80092d6:	ebac 0304 	sub.w	r3, ip, r4
 80092da:	3b15      	subs	r3, #21
 80092dc:	f023 0303 	bic.w	r3, r3, #3
 80092e0:	3304      	adds	r3, #4
 80092e2:	f104 0015 	add.w	r0, r4, #21
 80092e6:	4584      	cmp	ip, r0
 80092e8:	bf38      	it	cc
 80092ea:	2304      	movcc	r3, #4
 80092ec:	50ca      	str	r2, [r1, r3]
 80092ee:	b10a      	cbz	r2, 80092f4 <__lshift+0xa4>
 80092f0:	f108 0602 	add.w	r6, r8, #2
 80092f4:	3e01      	subs	r6, #1
 80092f6:	4638      	mov	r0, r7
 80092f8:	612e      	str	r6, [r5, #16]
 80092fa:	4621      	mov	r1, r4
 80092fc:	f7ff fdd6 	bl	8008eac <_Bfree>
 8009300:	4628      	mov	r0, r5
 8009302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009306:	f842 0f04 	str.w	r0, [r2, #4]!
 800930a:	3301      	adds	r3, #1
 800930c:	e7c5      	b.n	800929a <__lshift+0x4a>
 800930e:	3904      	subs	r1, #4
 8009310:	f853 2b04 	ldr.w	r2, [r3], #4
 8009314:	f841 2f04 	str.w	r2, [r1, #4]!
 8009318:	459c      	cmp	ip, r3
 800931a:	d8f9      	bhi.n	8009310 <__lshift+0xc0>
 800931c:	e7ea      	b.n	80092f4 <__lshift+0xa4>
 800931e:	bf00      	nop
 8009320:	0800af9c 	.word	0x0800af9c
 8009324:	0800b010 	.word	0x0800b010

08009328 <__mcmp>:
 8009328:	b530      	push	{r4, r5, lr}
 800932a:	6902      	ldr	r2, [r0, #16]
 800932c:	690c      	ldr	r4, [r1, #16]
 800932e:	1b12      	subs	r2, r2, r4
 8009330:	d10e      	bne.n	8009350 <__mcmp+0x28>
 8009332:	f100 0314 	add.w	r3, r0, #20
 8009336:	3114      	adds	r1, #20
 8009338:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800933c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009340:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009344:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009348:	42a5      	cmp	r5, r4
 800934a:	d003      	beq.n	8009354 <__mcmp+0x2c>
 800934c:	d305      	bcc.n	800935a <__mcmp+0x32>
 800934e:	2201      	movs	r2, #1
 8009350:	4610      	mov	r0, r2
 8009352:	bd30      	pop	{r4, r5, pc}
 8009354:	4283      	cmp	r3, r0
 8009356:	d3f3      	bcc.n	8009340 <__mcmp+0x18>
 8009358:	e7fa      	b.n	8009350 <__mcmp+0x28>
 800935a:	f04f 32ff 	mov.w	r2, #4294967295
 800935e:	e7f7      	b.n	8009350 <__mcmp+0x28>

08009360 <__mdiff>:
 8009360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	460c      	mov	r4, r1
 8009366:	4606      	mov	r6, r0
 8009368:	4611      	mov	r1, r2
 800936a:	4620      	mov	r0, r4
 800936c:	4617      	mov	r7, r2
 800936e:	f7ff ffdb 	bl	8009328 <__mcmp>
 8009372:	1e05      	subs	r5, r0, #0
 8009374:	d110      	bne.n	8009398 <__mdiff+0x38>
 8009376:	4629      	mov	r1, r5
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff fd57 	bl	8008e2c <_Balloc>
 800937e:	b930      	cbnz	r0, 800938e <__mdiff+0x2e>
 8009380:	4b39      	ldr	r3, [pc, #228]	; (8009468 <__mdiff+0x108>)
 8009382:	4602      	mov	r2, r0
 8009384:	f240 2132 	movw	r1, #562	; 0x232
 8009388:	4838      	ldr	r0, [pc, #224]	; (800946c <__mdiff+0x10c>)
 800938a:	f000 fb47 	bl	8009a1c <__assert_func>
 800938e:	2301      	movs	r3, #1
 8009390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	bfa4      	itt	ge
 800939a:	463b      	movge	r3, r7
 800939c:	4627      	movge	r7, r4
 800939e:	4630      	mov	r0, r6
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	bfa6      	itte	ge
 80093a4:	461c      	movge	r4, r3
 80093a6:	2500      	movge	r5, #0
 80093a8:	2501      	movlt	r5, #1
 80093aa:	f7ff fd3f 	bl	8008e2c <_Balloc>
 80093ae:	b920      	cbnz	r0, 80093ba <__mdiff+0x5a>
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <__mdiff+0x108>)
 80093b2:	4602      	mov	r2, r0
 80093b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093b8:	e7e6      	b.n	8009388 <__mdiff+0x28>
 80093ba:	693e      	ldr	r6, [r7, #16]
 80093bc:	60c5      	str	r5, [r0, #12]
 80093be:	6925      	ldr	r5, [r4, #16]
 80093c0:	f107 0114 	add.w	r1, r7, #20
 80093c4:	f104 0914 	add.w	r9, r4, #20
 80093c8:	f100 0e14 	add.w	lr, r0, #20
 80093cc:	f107 0210 	add.w	r2, r7, #16
 80093d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80093d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80093d8:	46f2      	mov	sl, lr
 80093da:	2700      	movs	r7, #0
 80093dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80093e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093e4:	fa1f f883 	uxth.w	r8, r3
 80093e8:	fa17 f78b 	uxtah	r7, r7, fp
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	eba7 0808 	sub.w	r8, r7, r8
 80093f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093fa:	fa1f f888 	uxth.w	r8, r8
 80093fe:	141f      	asrs	r7, r3, #16
 8009400:	454d      	cmp	r5, r9
 8009402:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009406:	f84a 3b04 	str.w	r3, [sl], #4
 800940a:	d8e7      	bhi.n	80093dc <__mdiff+0x7c>
 800940c:	1b2b      	subs	r3, r5, r4
 800940e:	3b15      	subs	r3, #21
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	3304      	adds	r3, #4
 8009416:	3415      	adds	r4, #21
 8009418:	42a5      	cmp	r5, r4
 800941a:	bf38      	it	cc
 800941c:	2304      	movcc	r3, #4
 800941e:	4419      	add	r1, r3
 8009420:	4473      	add	r3, lr
 8009422:	469e      	mov	lr, r3
 8009424:	460d      	mov	r5, r1
 8009426:	4565      	cmp	r5, ip
 8009428:	d30e      	bcc.n	8009448 <__mdiff+0xe8>
 800942a:	f10c 0203 	add.w	r2, ip, #3
 800942e:	1a52      	subs	r2, r2, r1
 8009430:	f022 0203 	bic.w	r2, r2, #3
 8009434:	3903      	subs	r1, #3
 8009436:	458c      	cmp	ip, r1
 8009438:	bf38      	it	cc
 800943a:	2200      	movcc	r2, #0
 800943c:	441a      	add	r2, r3
 800943e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009442:	b17b      	cbz	r3, 8009464 <__mdiff+0x104>
 8009444:	6106      	str	r6, [r0, #16]
 8009446:	e7a5      	b.n	8009394 <__mdiff+0x34>
 8009448:	f855 8b04 	ldr.w	r8, [r5], #4
 800944c:	fa17 f488 	uxtah	r4, r7, r8
 8009450:	1422      	asrs	r2, r4, #16
 8009452:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009456:	b2a4      	uxth	r4, r4
 8009458:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800945c:	f84e 4b04 	str.w	r4, [lr], #4
 8009460:	1417      	asrs	r7, r2, #16
 8009462:	e7e0      	b.n	8009426 <__mdiff+0xc6>
 8009464:	3e01      	subs	r6, #1
 8009466:	e7ea      	b.n	800943e <__mdiff+0xde>
 8009468:	0800af9c 	.word	0x0800af9c
 800946c:	0800b010 	.word	0x0800b010

08009470 <__d2b>:
 8009470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009474:	4689      	mov	r9, r1
 8009476:	2101      	movs	r1, #1
 8009478:	ec57 6b10 	vmov	r6, r7, d0
 800947c:	4690      	mov	r8, r2
 800947e:	f7ff fcd5 	bl	8008e2c <_Balloc>
 8009482:	4604      	mov	r4, r0
 8009484:	b930      	cbnz	r0, 8009494 <__d2b+0x24>
 8009486:	4602      	mov	r2, r0
 8009488:	4b25      	ldr	r3, [pc, #148]	; (8009520 <__d2b+0xb0>)
 800948a:	4826      	ldr	r0, [pc, #152]	; (8009524 <__d2b+0xb4>)
 800948c:	f240 310a 	movw	r1, #778	; 0x30a
 8009490:	f000 fac4 	bl	8009a1c <__assert_func>
 8009494:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800949c:	bb35      	cbnz	r5, 80094ec <__d2b+0x7c>
 800949e:	2e00      	cmp	r6, #0
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	d028      	beq.n	80094f6 <__d2b+0x86>
 80094a4:	4668      	mov	r0, sp
 80094a6:	9600      	str	r6, [sp, #0]
 80094a8:	f7ff fd8c 	bl	8008fc4 <__lo0bits>
 80094ac:	9900      	ldr	r1, [sp, #0]
 80094ae:	b300      	cbz	r0, 80094f2 <__d2b+0x82>
 80094b0:	9a01      	ldr	r2, [sp, #4]
 80094b2:	f1c0 0320 	rsb	r3, r0, #32
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	430b      	orrs	r3, r1
 80094bc:	40c2      	lsrs	r2, r0
 80094be:	6163      	str	r3, [r4, #20]
 80094c0:	9201      	str	r2, [sp, #4]
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	61a3      	str	r3, [r4, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bf14      	ite	ne
 80094ca:	2202      	movne	r2, #2
 80094cc:	2201      	moveq	r2, #1
 80094ce:	6122      	str	r2, [r4, #16]
 80094d0:	b1d5      	cbz	r5, 8009508 <__d2b+0x98>
 80094d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094d6:	4405      	add	r5, r0
 80094d8:	f8c9 5000 	str.w	r5, [r9]
 80094dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094e0:	f8c8 0000 	str.w	r0, [r8]
 80094e4:	4620      	mov	r0, r4
 80094e6:	b003      	add	sp, #12
 80094e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094f0:	e7d5      	b.n	800949e <__d2b+0x2e>
 80094f2:	6161      	str	r1, [r4, #20]
 80094f4:	e7e5      	b.n	80094c2 <__d2b+0x52>
 80094f6:	a801      	add	r0, sp, #4
 80094f8:	f7ff fd64 	bl	8008fc4 <__lo0bits>
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	2201      	movs	r2, #1
 8009502:	6122      	str	r2, [r4, #16]
 8009504:	3020      	adds	r0, #32
 8009506:	e7e3      	b.n	80094d0 <__d2b+0x60>
 8009508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800950c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009510:	f8c9 0000 	str.w	r0, [r9]
 8009514:	6918      	ldr	r0, [r3, #16]
 8009516:	f7ff fd35 	bl	8008f84 <__hi0bits>
 800951a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800951e:	e7df      	b.n	80094e0 <__d2b+0x70>
 8009520:	0800af9c 	.word	0x0800af9c
 8009524:	0800b010 	.word	0x0800b010

08009528 <_calloc_r>:
 8009528:	b513      	push	{r0, r1, r4, lr}
 800952a:	434a      	muls	r2, r1
 800952c:	4611      	mov	r1, r2
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	f000 f85a 	bl	80095e8 <_malloc_r>
 8009534:	4604      	mov	r4, r0
 8009536:	b118      	cbz	r0, 8009540 <_calloc_r+0x18>
 8009538:	9a01      	ldr	r2, [sp, #4]
 800953a:	2100      	movs	r1, #0
 800953c:	f7fd fd2c 	bl	8006f98 <memset>
 8009540:	4620      	mov	r0, r4
 8009542:	b002      	add	sp, #8
 8009544:	bd10      	pop	{r4, pc}
	...

08009548 <_free_r>:
 8009548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800954a:	2900      	cmp	r1, #0
 800954c:	d048      	beq.n	80095e0 <_free_r+0x98>
 800954e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009552:	9001      	str	r0, [sp, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f1a1 0404 	sub.w	r4, r1, #4
 800955a:	bfb8      	it	lt
 800955c:	18e4      	addlt	r4, r4, r3
 800955e:	f000 fae3 	bl	8009b28 <__malloc_lock>
 8009562:	4a20      	ldr	r2, [pc, #128]	; (80095e4 <_free_r+0x9c>)
 8009564:	9801      	ldr	r0, [sp, #4]
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	4615      	mov	r5, r2
 800956a:	b933      	cbnz	r3, 800957a <_free_r+0x32>
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	6014      	str	r4, [r2, #0]
 8009570:	b003      	add	sp, #12
 8009572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009576:	f000 badd 	b.w	8009b34 <__malloc_unlock>
 800957a:	42a3      	cmp	r3, r4
 800957c:	d90b      	bls.n	8009596 <_free_r+0x4e>
 800957e:	6821      	ldr	r1, [r4, #0]
 8009580:	1862      	adds	r2, r4, r1
 8009582:	4293      	cmp	r3, r2
 8009584:	bf04      	itt	eq
 8009586:	681a      	ldreq	r2, [r3, #0]
 8009588:	685b      	ldreq	r3, [r3, #4]
 800958a:	6063      	str	r3, [r4, #4]
 800958c:	bf04      	itt	eq
 800958e:	1852      	addeq	r2, r2, r1
 8009590:	6022      	streq	r2, [r4, #0]
 8009592:	602c      	str	r4, [r5, #0]
 8009594:	e7ec      	b.n	8009570 <_free_r+0x28>
 8009596:	461a      	mov	r2, r3
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	b10b      	cbz	r3, 80095a0 <_free_r+0x58>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x4e>
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	1855      	adds	r5, r2, r1
 80095a4:	42a5      	cmp	r5, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x78>
 80095a8:	6824      	ldr	r4, [r4, #0]
 80095aa:	4421      	add	r1, r4
 80095ac:	1854      	adds	r4, r2, r1
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	d1dd      	bne.n	8009570 <_free_r+0x28>
 80095b4:	681c      	ldr	r4, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	6053      	str	r3, [r2, #4]
 80095ba:	4421      	add	r1, r4
 80095bc:	6011      	str	r1, [r2, #0]
 80095be:	e7d7      	b.n	8009570 <_free_r+0x28>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x80>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	e7d3      	b.n	8009570 <_free_r+0x28>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	1961      	adds	r1, r4, r5
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1949      	addeq	r1, r1, r5
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	6054      	str	r4, [r2, #4]
 80095de:	e7c7      	b.n	8009570 <_free_r+0x28>
 80095e0:	b003      	add	sp, #12
 80095e2:	bd30      	pop	{r4, r5, pc}
 80095e4:	200003c0 	.word	0x200003c0

080095e8 <_malloc_r>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	1ccd      	adds	r5, r1, #3
 80095ec:	f025 0503 	bic.w	r5, r5, #3
 80095f0:	3508      	adds	r5, #8
 80095f2:	2d0c      	cmp	r5, #12
 80095f4:	bf38      	it	cc
 80095f6:	250c      	movcc	r5, #12
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	4606      	mov	r6, r0
 80095fc:	db01      	blt.n	8009602 <_malloc_r+0x1a>
 80095fe:	42a9      	cmp	r1, r5
 8009600:	d903      	bls.n	800960a <_malloc_r+0x22>
 8009602:	230c      	movs	r3, #12
 8009604:	6033      	str	r3, [r6, #0]
 8009606:	2000      	movs	r0, #0
 8009608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960a:	f000 fa8d 	bl	8009b28 <__malloc_lock>
 800960e:	4921      	ldr	r1, [pc, #132]	; (8009694 <_malloc_r+0xac>)
 8009610:	680a      	ldr	r2, [r1, #0]
 8009612:	4614      	mov	r4, r2
 8009614:	b99c      	cbnz	r4, 800963e <_malloc_r+0x56>
 8009616:	4f20      	ldr	r7, [pc, #128]	; (8009698 <_malloc_r+0xb0>)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	b923      	cbnz	r3, 8009626 <_malloc_r+0x3e>
 800961c:	4621      	mov	r1, r4
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f996 	bl	8009950 <_sbrk_r>
 8009624:	6038      	str	r0, [r7, #0]
 8009626:	4629      	mov	r1, r5
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f991 	bl	8009950 <_sbrk_r>
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	d123      	bne.n	800967a <_malloc_r+0x92>
 8009632:	230c      	movs	r3, #12
 8009634:	6033      	str	r3, [r6, #0]
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fa7c 	bl	8009b34 <__malloc_unlock>
 800963c:	e7e3      	b.n	8009606 <_malloc_r+0x1e>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	1b5b      	subs	r3, r3, r5
 8009642:	d417      	bmi.n	8009674 <_malloc_r+0x8c>
 8009644:	2b0b      	cmp	r3, #11
 8009646:	d903      	bls.n	8009650 <_malloc_r+0x68>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	441c      	add	r4, r3
 800964c:	6025      	str	r5, [r4, #0]
 800964e:	e004      	b.n	800965a <_malloc_r+0x72>
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	42a2      	cmp	r2, r4
 8009654:	bf0c      	ite	eq
 8009656:	600b      	streq	r3, [r1, #0]
 8009658:	6053      	strne	r3, [r2, #4]
 800965a:	4630      	mov	r0, r6
 800965c:	f000 fa6a 	bl	8009b34 <__malloc_unlock>
 8009660:	f104 000b 	add.w	r0, r4, #11
 8009664:	1d23      	adds	r3, r4, #4
 8009666:	f020 0007 	bic.w	r0, r0, #7
 800966a:	1ac2      	subs	r2, r0, r3
 800966c:	d0cc      	beq.n	8009608 <_malloc_r+0x20>
 800966e:	1a1b      	subs	r3, r3, r0
 8009670:	50a3      	str	r3, [r4, r2]
 8009672:	e7c9      	b.n	8009608 <_malloc_r+0x20>
 8009674:	4622      	mov	r2, r4
 8009676:	6864      	ldr	r4, [r4, #4]
 8009678:	e7cc      	b.n	8009614 <_malloc_r+0x2c>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d0e3      	beq.n	800964c <_malloc_r+0x64>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4630      	mov	r0, r6
 8009688:	f000 f962 	bl	8009950 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d1dd      	bne.n	800964c <_malloc_r+0x64>
 8009690:	e7cf      	b.n	8009632 <_malloc_r+0x4a>
 8009692:	bf00      	nop
 8009694:	200003c0 	.word	0x200003c0
 8009698:	200003c4 	.word	0x200003c4

0800969c <__sfputc_r>:
 800969c:	6893      	ldr	r3, [r2, #8]
 800969e:	3b01      	subs	r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	b410      	push	{r4}
 80096a4:	6093      	str	r3, [r2, #8]
 80096a6:	da08      	bge.n	80096ba <__sfputc_r+0x1e>
 80096a8:	6994      	ldr	r4, [r2, #24]
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	db01      	blt.n	80096b2 <__sfputc_r+0x16>
 80096ae:	290a      	cmp	r1, #10
 80096b0:	d103      	bne.n	80096ba <__sfputc_r+0x1e>
 80096b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b6:	f7fe ba45 	b.w	8007b44 <__swbuf_r>
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	1c58      	adds	r0, r3, #1
 80096be:	6010      	str	r0, [r2, #0]
 80096c0:	7019      	strb	r1, [r3, #0]
 80096c2:	4608      	mov	r0, r1
 80096c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <__sfputs_r>:
 80096ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	4614      	mov	r4, r2
 80096d2:	18d5      	adds	r5, r2, r3
 80096d4:	42ac      	cmp	r4, r5
 80096d6:	d101      	bne.n	80096dc <__sfputs_r+0x12>
 80096d8:	2000      	movs	r0, #0
 80096da:	e007      	b.n	80096ec <__sfputs_r+0x22>
 80096dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e0:	463a      	mov	r2, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff ffda 	bl	800969c <__sfputc_r>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d1f3      	bne.n	80096d4 <__sfputs_r+0xa>
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096f0 <_vfiprintf_r>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	460d      	mov	r5, r1
 80096f6:	b09d      	sub	sp, #116	; 0x74
 80096f8:	4614      	mov	r4, r2
 80096fa:	4698      	mov	r8, r3
 80096fc:	4606      	mov	r6, r0
 80096fe:	b118      	cbz	r0, 8009708 <_vfiprintf_r+0x18>
 8009700:	6983      	ldr	r3, [r0, #24]
 8009702:	b90b      	cbnz	r3, 8009708 <_vfiprintf_r+0x18>
 8009704:	f7ff fa72 	bl	8008bec <__sinit>
 8009708:	4b89      	ldr	r3, [pc, #548]	; (8009930 <_vfiprintf_r+0x240>)
 800970a:	429d      	cmp	r5, r3
 800970c:	d11b      	bne.n	8009746 <_vfiprintf_r+0x56>
 800970e:	6875      	ldr	r5, [r6, #4]
 8009710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009712:	07d9      	lsls	r1, r3, #31
 8009714:	d405      	bmi.n	8009722 <_vfiprintf_r+0x32>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	059a      	lsls	r2, r3, #22
 800971a:	d402      	bmi.n	8009722 <_vfiprintf_r+0x32>
 800971c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971e:	f7ff fb08 	bl	8008d32 <__retarget_lock_acquire_recursive>
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	071b      	lsls	r3, r3, #28
 8009726:	d501      	bpl.n	800972c <_vfiprintf_r+0x3c>
 8009728:	692b      	ldr	r3, [r5, #16]
 800972a:	b9eb      	cbnz	r3, 8009768 <_vfiprintf_r+0x78>
 800972c:	4629      	mov	r1, r5
 800972e:	4630      	mov	r0, r6
 8009730:	f7fe fa5a 	bl	8007be8 <__swsetup_r>
 8009734:	b1c0      	cbz	r0, 8009768 <_vfiprintf_r+0x78>
 8009736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009738:	07dc      	lsls	r4, r3, #31
 800973a:	d50e      	bpl.n	800975a <_vfiprintf_r+0x6a>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b01d      	add	sp, #116	; 0x74
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	4b7b      	ldr	r3, [pc, #492]	; (8009934 <_vfiprintf_r+0x244>)
 8009748:	429d      	cmp	r5, r3
 800974a:	d101      	bne.n	8009750 <_vfiprintf_r+0x60>
 800974c:	68b5      	ldr	r5, [r6, #8]
 800974e:	e7df      	b.n	8009710 <_vfiprintf_r+0x20>
 8009750:	4b79      	ldr	r3, [pc, #484]	; (8009938 <_vfiprintf_r+0x248>)
 8009752:	429d      	cmp	r5, r3
 8009754:	bf08      	it	eq
 8009756:	68f5      	ldreq	r5, [r6, #12]
 8009758:	e7da      	b.n	8009710 <_vfiprintf_r+0x20>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	0598      	lsls	r0, r3, #22
 800975e:	d4ed      	bmi.n	800973c <_vfiprintf_r+0x4c>
 8009760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009762:	f7ff fae7 	bl	8008d34 <__retarget_lock_release_recursive>
 8009766:	e7e9      	b.n	800973c <_vfiprintf_r+0x4c>
 8009768:	2300      	movs	r3, #0
 800976a:	9309      	str	r3, [sp, #36]	; 0x24
 800976c:	2320      	movs	r3, #32
 800976e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009772:	f8cd 800c 	str.w	r8, [sp, #12]
 8009776:	2330      	movs	r3, #48	; 0x30
 8009778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800993c <_vfiprintf_r+0x24c>
 800977c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009780:	f04f 0901 	mov.w	r9, #1
 8009784:	4623      	mov	r3, r4
 8009786:	469a      	mov	sl, r3
 8009788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800978c:	b10a      	cbz	r2, 8009792 <_vfiprintf_r+0xa2>
 800978e:	2a25      	cmp	r2, #37	; 0x25
 8009790:	d1f9      	bne.n	8009786 <_vfiprintf_r+0x96>
 8009792:	ebba 0b04 	subs.w	fp, sl, r4
 8009796:	d00b      	beq.n	80097b0 <_vfiprintf_r+0xc0>
 8009798:	465b      	mov	r3, fp
 800979a:	4622      	mov	r2, r4
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ff93 	bl	80096ca <__sfputs_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	f000 80aa 	beq.w	80098fe <_vfiprintf_r+0x20e>
 80097aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ac:	445a      	add	r2, fp
 80097ae:	9209      	str	r2, [sp, #36]	; 0x24
 80097b0:	f89a 3000 	ldrb.w	r3, [sl]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 80a2 	beq.w	80098fe <_vfiprintf_r+0x20e>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c4:	f10a 0a01 	add.w	sl, sl, #1
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097d0:	931a      	str	r3, [sp, #104]	; 0x68
 80097d2:	4654      	mov	r4, sl
 80097d4:	2205      	movs	r2, #5
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4858      	ldr	r0, [pc, #352]	; (800993c <_vfiprintf_r+0x24c>)
 80097dc:	f7f6 fd20 	bl	8000220 <memchr>
 80097e0:	9a04      	ldr	r2, [sp, #16]
 80097e2:	b9d8      	cbnz	r0, 800981c <_vfiprintf_r+0x12c>
 80097e4:	06d1      	lsls	r1, r2, #27
 80097e6:	bf44      	itt	mi
 80097e8:	2320      	movmi	r3, #32
 80097ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ee:	0713      	lsls	r3, r2, #28
 80097f0:	bf44      	itt	mi
 80097f2:	232b      	movmi	r3, #43	; 0x2b
 80097f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b2a      	cmp	r3, #42	; 0x2a
 80097fe:	d015      	beq.n	800982c <_vfiprintf_r+0x13c>
 8009800:	9a07      	ldr	r2, [sp, #28]
 8009802:	4654      	mov	r4, sl
 8009804:	2000      	movs	r0, #0
 8009806:	f04f 0c0a 	mov.w	ip, #10
 800980a:	4621      	mov	r1, r4
 800980c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009810:	3b30      	subs	r3, #48	; 0x30
 8009812:	2b09      	cmp	r3, #9
 8009814:	d94e      	bls.n	80098b4 <_vfiprintf_r+0x1c4>
 8009816:	b1b0      	cbz	r0, 8009846 <_vfiprintf_r+0x156>
 8009818:	9207      	str	r2, [sp, #28]
 800981a:	e014      	b.n	8009846 <_vfiprintf_r+0x156>
 800981c:	eba0 0308 	sub.w	r3, r0, r8
 8009820:	fa09 f303 	lsl.w	r3, r9, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	46a2      	mov	sl, r4
 800982a:	e7d2      	b.n	80097d2 <_vfiprintf_r+0xe2>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	1d19      	adds	r1, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	bfbb      	ittet	lt
 8009838:	425b      	neglt	r3, r3
 800983a:	f042 0202 	orrlt.w	r2, r2, #2
 800983e:	9307      	strge	r3, [sp, #28]
 8009840:	9307      	strlt	r3, [sp, #28]
 8009842:	bfb8      	it	lt
 8009844:	9204      	strlt	r2, [sp, #16]
 8009846:	7823      	ldrb	r3, [r4, #0]
 8009848:	2b2e      	cmp	r3, #46	; 0x2e
 800984a:	d10c      	bne.n	8009866 <_vfiprintf_r+0x176>
 800984c:	7863      	ldrb	r3, [r4, #1]
 800984e:	2b2a      	cmp	r3, #42	; 0x2a
 8009850:	d135      	bne.n	80098be <_vfiprintf_r+0x1ce>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	1d1a      	adds	r2, r3, #4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	9203      	str	r2, [sp, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	bfb8      	it	lt
 800985e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009862:	3402      	adds	r4, #2
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800994c <_vfiprintf_r+0x25c>
 800986a:	7821      	ldrb	r1, [r4, #0]
 800986c:	2203      	movs	r2, #3
 800986e:	4650      	mov	r0, sl
 8009870:	f7f6 fcd6 	bl	8000220 <memchr>
 8009874:	b140      	cbz	r0, 8009888 <_vfiprintf_r+0x198>
 8009876:	2340      	movs	r3, #64	; 0x40
 8009878:	eba0 000a 	sub.w	r0, r0, sl
 800987c:	fa03 f000 	lsl.w	r0, r3, r0
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	4303      	orrs	r3, r0
 8009884:	3401      	adds	r4, #1
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988c:	482c      	ldr	r0, [pc, #176]	; (8009940 <_vfiprintf_r+0x250>)
 800988e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009892:	2206      	movs	r2, #6
 8009894:	f7f6 fcc4 	bl	8000220 <memchr>
 8009898:	2800      	cmp	r0, #0
 800989a:	d03f      	beq.n	800991c <_vfiprintf_r+0x22c>
 800989c:	4b29      	ldr	r3, [pc, #164]	; (8009944 <_vfiprintf_r+0x254>)
 800989e:	bb1b      	cbnz	r3, 80098e8 <_vfiprintf_r+0x1f8>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	3307      	adds	r3, #7
 80098a4:	f023 0307 	bic.w	r3, r3, #7
 80098a8:	3308      	adds	r3, #8
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ae:	443b      	add	r3, r7
 80098b0:	9309      	str	r3, [sp, #36]	; 0x24
 80098b2:	e767      	b.n	8009784 <_vfiprintf_r+0x94>
 80098b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b8:	460c      	mov	r4, r1
 80098ba:	2001      	movs	r0, #1
 80098bc:	e7a5      	b.n	800980a <_vfiprintf_r+0x11a>
 80098be:	2300      	movs	r3, #0
 80098c0:	3401      	adds	r4, #1
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	4619      	mov	r1, r3
 80098c6:	f04f 0c0a 	mov.w	ip, #10
 80098ca:	4620      	mov	r0, r4
 80098cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d0:	3a30      	subs	r2, #48	; 0x30
 80098d2:	2a09      	cmp	r2, #9
 80098d4:	d903      	bls.n	80098de <_vfiprintf_r+0x1ee>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c5      	beq.n	8009866 <_vfiprintf_r+0x176>
 80098da:	9105      	str	r1, [sp, #20]
 80098dc:	e7c3      	b.n	8009866 <_vfiprintf_r+0x176>
 80098de:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e2:	4604      	mov	r4, r0
 80098e4:	2301      	movs	r3, #1
 80098e6:	e7f0      	b.n	80098ca <_vfiprintf_r+0x1da>
 80098e8:	ab03      	add	r3, sp, #12
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	462a      	mov	r2, r5
 80098ee:	4b16      	ldr	r3, [pc, #88]	; (8009948 <_vfiprintf_r+0x258>)
 80098f0:	a904      	add	r1, sp, #16
 80098f2:	4630      	mov	r0, r6
 80098f4:	f7fd fbf8 	bl	80070e8 <_printf_float>
 80098f8:	4607      	mov	r7, r0
 80098fa:	1c78      	adds	r0, r7, #1
 80098fc:	d1d6      	bne.n	80098ac <_vfiprintf_r+0x1bc>
 80098fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009900:	07d9      	lsls	r1, r3, #31
 8009902:	d405      	bmi.n	8009910 <_vfiprintf_r+0x220>
 8009904:	89ab      	ldrh	r3, [r5, #12]
 8009906:	059a      	lsls	r2, r3, #22
 8009908:	d402      	bmi.n	8009910 <_vfiprintf_r+0x220>
 800990a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990c:	f7ff fa12 	bl	8008d34 <__retarget_lock_release_recursive>
 8009910:	89ab      	ldrh	r3, [r5, #12]
 8009912:	065b      	lsls	r3, r3, #25
 8009914:	f53f af12 	bmi.w	800973c <_vfiprintf_r+0x4c>
 8009918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800991a:	e711      	b.n	8009740 <_vfiprintf_r+0x50>
 800991c:	ab03      	add	r3, sp, #12
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	462a      	mov	r2, r5
 8009922:	4b09      	ldr	r3, [pc, #36]	; (8009948 <_vfiprintf_r+0x258>)
 8009924:	a904      	add	r1, sp, #16
 8009926:	4630      	mov	r0, r6
 8009928:	f7fd fe82 	bl	8007630 <_printf_i>
 800992c:	e7e4      	b.n	80098f8 <_vfiprintf_r+0x208>
 800992e:	bf00      	nop
 8009930:	0800afd0 	.word	0x0800afd0
 8009934:	0800aff0 	.word	0x0800aff0
 8009938:	0800afb0 	.word	0x0800afb0
 800993c:	0800b16c 	.word	0x0800b16c
 8009940:	0800b176 	.word	0x0800b176
 8009944:	080070e9 	.word	0x080070e9
 8009948:	080096cb 	.word	0x080096cb
 800994c:	0800b172 	.word	0x0800b172

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d06      	ldr	r5, [pc, #24]	; (800996c <_sbrk_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f8 ff5a 	bl	8002814 <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	200008fc 	.word	0x200008fc

08009970 <__sread>:
 8009970:	b510      	push	{r4, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	f000 f8e2 	bl	8009b40 <_read_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	bfab      	itete	ge
 8009980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009982:	89a3      	ldrhlt	r3, [r4, #12]
 8009984:	181b      	addge	r3, r3, r0
 8009986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800998a:	bfac      	ite	ge
 800998c:	6563      	strge	r3, [r4, #84]	; 0x54
 800998e:	81a3      	strhlt	r3, [r4, #12]
 8009990:	bd10      	pop	{r4, pc}

08009992 <__swrite>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	461f      	mov	r7, r3
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	05db      	lsls	r3, r3, #23
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	d505      	bpl.n	80099b0 <__swrite+0x1e>
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	2302      	movs	r3, #2
 80099aa:	2200      	movs	r2, #0
 80099ac:	f000 f898 	bl	8009ae0 <_lseek_r>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	4628      	mov	r0, r5
 80099c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	f000 b817 	b.w	80099f8 <_write_r>

080099ca <__sseek>:
 80099ca:	b510      	push	{r4, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d2:	f000 f885 	bl	8009ae0 <_lseek_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	bf15      	itete	ne
 80099dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099e6:	81a3      	strheq	r3, [r4, #12]
 80099e8:	bf18      	it	ne
 80099ea:	81a3      	strhne	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__sclose>:
 80099ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f2:	f000 b831 	b.w	8009a58 <_close_r>
	...

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 fdda 	bl	80025c0 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200008fc 	.word	0x200008fc

08009a1c <__assert_func>:
 8009a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a1e:	4614      	mov	r4, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <__assert_func+0x2c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4605      	mov	r5, r0
 8009a28:	68d8      	ldr	r0, [r3, #12]
 8009a2a:	b14c      	cbz	r4, 8009a40 <__assert_func+0x24>
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <__assert_func+0x30>)
 8009a2e:	9100      	str	r1, [sp, #0]
 8009a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a34:	4906      	ldr	r1, [pc, #24]	; (8009a50 <__assert_func+0x34>)
 8009a36:	462b      	mov	r3, r5
 8009a38:	f000 f81e 	bl	8009a78 <fiprintf>
 8009a3c:	f000 f89f 	bl	8009b7e <abort>
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <__assert_func+0x38>)
 8009a42:	461c      	mov	r4, r3
 8009a44:	e7f3      	b.n	8009a2e <__assert_func+0x12>
 8009a46:	bf00      	nop
 8009a48:	200001c4 	.word	0x200001c4
 8009a4c:	0800b17d 	.word	0x0800b17d
 8009a50:	0800b18a 	.word	0x0800b18a
 8009a54:	0800b1b8 	.word	0x0800b1b8

08009a58 <_close_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	; (8009a74 <_close_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 fdd8 	bl	8002618 <_close>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_close_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_close_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	200008fc 	.word	0x200008fc

08009a78 <fiprintf>:
 8009a78:	b40e      	push	{r1, r2, r3}
 8009a7a:	b503      	push	{r0, r1, lr}
 8009a7c:	4601      	mov	r1, r0
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	4805      	ldr	r0, [pc, #20]	; (8009a98 <fiprintf+0x20>)
 8009a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a86:	6800      	ldr	r0, [r0, #0]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	f7ff fe31 	bl	80096f0 <_vfiprintf_r>
 8009a8e:	b002      	add	sp, #8
 8009a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a94:	b003      	add	sp, #12
 8009a96:	4770      	bx	lr
 8009a98:	200001c4 	.word	0x200001c4

08009a9c <_fstat_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d07      	ldr	r5, [pc, #28]	; (8009abc <_fstat_r+0x20>)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	f7f8 fe05 	bl	80026b8 <_fstat>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d102      	bne.n	8009ab8 <_fstat_r+0x1c>
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	b103      	cbz	r3, 8009ab8 <_fstat_r+0x1c>
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
 8009aba:	bf00      	nop
 8009abc:	200008fc 	.word	0x200008fc

08009ac0 <_isatty_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d06      	ldr	r5, [pc, #24]	; (8009adc <_isatty_r+0x1c>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	602b      	str	r3, [r5, #0]
 8009acc:	f7f8 fd62 	bl	8002594 <_isatty>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_isatty_r+0x1a>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_isatty_r+0x1a>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	200008fc 	.word	0x200008fc

08009ae0 <_lseek_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d07      	ldr	r5, [pc, #28]	; (8009b00 <_lseek_r+0x20>)
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	602a      	str	r2, [r5, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f7f8 fda9 	bl	8002646 <_lseek>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_lseek_r+0x1e>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_lseek_r+0x1e>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	200008fc 	.word	0x200008fc

08009b04 <__ascii_mbtowc>:
 8009b04:	b082      	sub	sp, #8
 8009b06:	b901      	cbnz	r1, 8009b0a <__ascii_mbtowc+0x6>
 8009b08:	a901      	add	r1, sp, #4
 8009b0a:	b142      	cbz	r2, 8009b1e <__ascii_mbtowc+0x1a>
 8009b0c:	b14b      	cbz	r3, 8009b22 <__ascii_mbtowc+0x1e>
 8009b0e:	7813      	ldrb	r3, [r2, #0]
 8009b10:	600b      	str	r3, [r1, #0]
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	1e10      	subs	r0, r2, #0
 8009b16:	bf18      	it	ne
 8009b18:	2001      	movne	r0, #1
 8009b1a:	b002      	add	sp, #8
 8009b1c:	4770      	bx	lr
 8009b1e:	4610      	mov	r0, r2
 8009b20:	e7fb      	b.n	8009b1a <__ascii_mbtowc+0x16>
 8009b22:	f06f 0001 	mvn.w	r0, #1
 8009b26:	e7f8      	b.n	8009b1a <__ascii_mbtowc+0x16>

08009b28 <__malloc_lock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__malloc_lock+0x8>)
 8009b2a:	f7ff b902 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8009b2e:	bf00      	nop
 8009b30:	200008f4 	.word	0x200008f4

08009b34 <__malloc_unlock>:
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <__malloc_unlock+0x8>)
 8009b36:	f7ff b8fd 	b.w	8008d34 <__retarget_lock_release_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	200008f4 	.word	0x200008f4

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 fd8a 	bl	8002668 <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	200008fc 	.word	0x200008fc

08009b64 <__ascii_wctomb>:
 8009b64:	b149      	cbz	r1, 8009b7a <__ascii_wctomb+0x16>
 8009b66:	2aff      	cmp	r2, #255	; 0xff
 8009b68:	bf85      	ittet	hi
 8009b6a:	238a      	movhi	r3, #138	; 0x8a
 8009b6c:	6003      	strhi	r3, [r0, #0]
 8009b6e:	700a      	strbls	r2, [r1, #0]
 8009b70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b74:	bf98      	it	ls
 8009b76:	2001      	movls	r0, #1
 8009b78:	4770      	bx	lr
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4770      	bx	lr

08009b7e <abort>:
 8009b7e:	b508      	push	{r3, lr}
 8009b80:	2006      	movs	r0, #6
 8009b82:	f000 f82b 	bl	8009bdc <raise>
 8009b86:	2001      	movs	r0, #1
 8009b88:	f001 f8dc 	bl	800ad44 <_exit>

08009b8c <_raise_r>:
 8009b8c:	291f      	cmp	r1, #31
 8009b8e:	b538      	push	{r3, r4, r5, lr}
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	d904      	bls.n	8009ba0 <_raise_r+0x14>
 8009b96:	2316      	movs	r3, #22
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ba2:	b112      	cbz	r2, 8009baa <_raise_r+0x1e>
 8009ba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ba8:	b94b      	cbnz	r3, 8009bbe <_raise_r+0x32>
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 f830 	bl	8009c10 <_getpid_r>
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bba:	f000 b817 	b.w	8009bec <_kill_r>
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d00a      	beq.n	8009bd8 <_raise_r+0x4c>
 8009bc2:	1c59      	adds	r1, r3, #1
 8009bc4:	d103      	bne.n	8009bce <_raise_r+0x42>
 8009bc6:	2316      	movs	r3, #22
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	2001      	movs	r0, #1
 8009bcc:	e7e7      	b.n	8009b9e <_raise_r+0x12>
 8009bce:	2400      	movs	r4, #0
 8009bd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	4798      	blx	r3
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7e0      	b.n	8009b9e <_raise_r+0x12>

08009bdc <raise>:
 8009bdc:	4b02      	ldr	r3, [pc, #8]	; (8009be8 <raise+0xc>)
 8009bde:	4601      	mov	r1, r0
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f7ff bfd3 	b.w	8009b8c <_raise_r>
 8009be6:	bf00      	nop
 8009be8:	200001c4 	.word	0x200001c4

08009bec <_kill_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d07      	ldr	r5, [pc, #28]	; (8009c0c <_kill_r+0x20>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	f001 f89b 	bl	800ad34 <_kill>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	d102      	bne.n	8009c08 <_kill_r+0x1c>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	b103      	cbz	r3, 8009c08 <_kill_r+0x1c>
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200008fc 	.word	0x200008fc

08009c10 <_getpid_r>:
 8009c10:	f001 b888 	b.w	800ad24 <_getpid>
 8009c14:	0000      	movs	r0, r0
	...

08009c18 <cos>:
 8009c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1a:	ec53 2b10 	vmov	r2, r3, d0
 8009c1e:	4824      	ldr	r0, [pc, #144]	; (8009cb0 <cos+0x98>)
 8009c20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c24:	4281      	cmp	r1, r0
 8009c26:	dc06      	bgt.n	8009c36 <cos+0x1e>
 8009c28:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009ca8 <cos+0x90>
 8009c2c:	f000 faa4 	bl	800a178 <__kernel_cos>
 8009c30:	ec51 0b10 	vmov	r0, r1, d0
 8009c34:	e007      	b.n	8009c46 <cos+0x2e>
 8009c36:	481f      	ldr	r0, [pc, #124]	; (8009cb4 <cos+0x9c>)
 8009c38:	4281      	cmp	r1, r0
 8009c3a:	dd09      	ble.n	8009c50 <cos+0x38>
 8009c3c:	ee10 0a10 	vmov	r0, s0
 8009c40:	4619      	mov	r1, r3
 8009c42:	f7f6 fb41 	bl	80002c8 <__aeabi_dsub>
 8009c46:	ec41 0b10 	vmov	d0, r0, r1
 8009c4a:	b005      	add	sp, #20
 8009c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c50:	4668      	mov	r0, sp
 8009c52:	f000 f885 	bl	8009d60 <__ieee754_rem_pio2>
 8009c56:	f000 0003 	and.w	r0, r0, #3
 8009c5a:	2801      	cmp	r0, #1
 8009c5c:	d007      	beq.n	8009c6e <cos+0x56>
 8009c5e:	2802      	cmp	r0, #2
 8009c60:	d012      	beq.n	8009c88 <cos+0x70>
 8009c62:	b9c0      	cbnz	r0, 8009c96 <cos+0x7e>
 8009c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c68:	ed9d 0b00 	vldr	d0, [sp]
 8009c6c:	e7de      	b.n	8009c2c <cos+0x14>
 8009c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c72:	ed9d 0b00 	vldr	d0, [sp]
 8009c76:	f000 fe87 	bl	800a988 <__kernel_sin>
 8009c7a:	ec53 2b10 	vmov	r2, r3, d0
 8009c7e:	ee10 0a10 	vmov	r0, s0
 8009c82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c86:	e7de      	b.n	8009c46 <cos+0x2e>
 8009c88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c8c:	ed9d 0b00 	vldr	d0, [sp]
 8009c90:	f000 fa72 	bl	800a178 <__kernel_cos>
 8009c94:	e7f1      	b.n	8009c7a <cos+0x62>
 8009c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c9a:	ed9d 0b00 	vldr	d0, [sp]
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	f000 fe72 	bl	800a988 <__kernel_sin>
 8009ca4:	e7c4      	b.n	8009c30 <cos+0x18>
 8009ca6:	bf00      	nop
	...
 8009cb0:	3fe921fb 	.word	0x3fe921fb
 8009cb4:	7fefffff 	.word	0x7fefffff

08009cb8 <sin>:
 8009cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cba:	ec53 2b10 	vmov	r2, r3, d0
 8009cbe:	4826      	ldr	r0, [pc, #152]	; (8009d58 <sin+0xa0>)
 8009cc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009cc4:	4281      	cmp	r1, r0
 8009cc6:	dc07      	bgt.n	8009cd8 <sin+0x20>
 8009cc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009d50 <sin+0x98>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f000 fe5b 	bl	800a988 <__kernel_sin>
 8009cd2:	ec51 0b10 	vmov	r0, r1, d0
 8009cd6:	e007      	b.n	8009ce8 <sin+0x30>
 8009cd8:	4820      	ldr	r0, [pc, #128]	; (8009d5c <sin+0xa4>)
 8009cda:	4281      	cmp	r1, r0
 8009cdc:	dd09      	ble.n	8009cf2 <sin+0x3a>
 8009cde:	ee10 0a10 	vmov	r0, s0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f7f6 faf0 	bl	80002c8 <__aeabi_dsub>
 8009ce8:	ec41 0b10 	vmov	d0, r0, r1
 8009cec:	b005      	add	sp, #20
 8009cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cf2:	4668      	mov	r0, sp
 8009cf4:	f000 f834 	bl	8009d60 <__ieee754_rem_pio2>
 8009cf8:	f000 0003 	and.w	r0, r0, #3
 8009cfc:	2801      	cmp	r0, #1
 8009cfe:	d008      	beq.n	8009d12 <sin+0x5a>
 8009d00:	2802      	cmp	r0, #2
 8009d02:	d00d      	beq.n	8009d20 <sin+0x68>
 8009d04:	b9d0      	cbnz	r0, 8009d3c <sin+0x84>
 8009d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d0a:	ed9d 0b00 	vldr	d0, [sp]
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e7dd      	b.n	8009cce <sin+0x16>
 8009d12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d16:	ed9d 0b00 	vldr	d0, [sp]
 8009d1a:	f000 fa2d 	bl	800a178 <__kernel_cos>
 8009d1e:	e7d8      	b.n	8009cd2 <sin+0x1a>
 8009d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d24:	ed9d 0b00 	vldr	d0, [sp]
 8009d28:	2001      	movs	r0, #1
 8009d2a:	f000 fe2d 	bl	800a988 <__kernel_sin>
 8009d2e:	ec53 2b10 	vmov	r2, r3, d0
 8009d32:	ee10 0a10 	vmov	r0, s0
 8009d36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d3a:	e7d5      	b.n	8009ce8 <sin+0x30>
 8009d3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d40:	ed9d 0b00 	vldr	d0, [sp]
 8009d44:	f000 fa18 	bl	800a178 <__kernel_cos>
 8009d48:	e7f1      	b.n	8009d2e <sin+0x76>
 8009d4a:	bf00      	nop
 8009d4c:	f3af 8000 	nop.w
	...
 8009d58:	3fe921fb 	.word	0x3fe921fb
 8009d5c:	7fefffff 	.word	0x7fefffff

08009d60 <__ieee754_rem_pio2>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	ed2d 8b02 	vpush	{d8}
 8009d68:	ec55 4b10 	vmov	r4, r5, d0
 8009d6c:	4bca      	ldr	r3, [pc, #808]	; (800a098 <__ieee754_rem_pio2+0x338>)
 8009d6e:	b08b      	sub	sp, #44	; 0x2c
 8009d70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009d74:	4598      	cmp	r8, r3
 8009d76:	4682      	mov	sl, r0
 8009d78:	9502      	str	r5, [sp, #8]
 8009d7a:	dc08      	bgt.n	8009d8e <__ieee754_rem_pio2+0x2e>
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	ed80 0b00 	vstr	d0, [r0]
 8009d84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d88:	f04f 0b00 	mov.w	fp, #0
 8009d8c:	e028      	b.n	8009de0 <__ieee754_rem_pio2+0x80>
 8009d8e:	4bc3      	ldr	r3, [pc, #780]	; (800a09c <__ieee754_rem_pio2+0x33c>)
 8009d90:	4598      	cmp	r8, r3
 8009d92:	dc78      	bgt.n	8009e86 <__ieee754_rem_pio2+0x126>
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	4ec2      	ldr	r6, [pc, #776]	; (800a0a0 <__ieee754_rem_pio2+0x340>)
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	ee10 0a10 	vmov	r0, s0
 8009d9e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a060 <__ieee754_rem_pio2+0x300>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4629      	mov	r1, r5
 8009da6:	dd39      	ble.n	8009e1c <__ieee754_rem_pio2+0xbc>
 8009da8:	f7f6 fa8e 	bl	80002c8 <__aeabi_dsub>
 8009dac:	45b0      	cmp	r8, r6
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	d01b      	beq.n	8009dec <__ieee754_rem_pio2+0x8c>
 8009db4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a068 <__ieee754_rem_pio2+0x308>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 fa85 	bl	80002c8 <__aeabi_dsub>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	e9ca 2300 	strd	r2, r3, [sl]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fa7d 	bl	80002c8 <__aeabi_dsub>
 8009dce:	a3a6      	add	r3, pc, #664	; (adr r3, 800a068 <__ieee754_rem_pio2+0x308>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f7f6 fa78 	bl	80002c8 <__aeabi_dsub>
 8009dd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ddc:	f04f 0b01 	mov.w	fp, #1
 8009de0:	4658      	mov	r0, fp
 8009de2:	b00b      	add	sp, #44	; 0x2c
 8009de4:	ecbd 8b02 	vpop	{d8}
 8009de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dec:	a3a0      	add	r3, pc, #640	; (adr r3, 800a070 <__ieee754_rem_pio2+0x310>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fa69 	bl	80002c8 <__aeabi_dsub>
 8009df6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a078 <__ieee754_rem_pio2+0x318>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	f7f6 fa62 	bl	80002c8 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	e9ca 2300 	strd	r2, r3, [sl]
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7f6 fa5a 	bl	80002c8 <__aeabi_dsub>
 8009e14:	a398      	add	r3, pc, #608	; (adr r3, 800a078 <__ieee754_rem_pio2+0x318>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	e7db      	b.n	8009dd4 <__ieee754_rem_pio2+0x74>
 8009e1c:	f7f6 fa56 	bl	80002cc <__adddf3>
 8009e20:	45b0      	cmp	r8, r6
 8009e22:	4604      	mov	r4, r0
 8009e24:	460d      	mov	r5, r1
 8009e26:	d016      	beq.n	8009e56 <__ieee754_rem_pio2+0xf6>
 8009e28:	a38f      	add	r3, pc, #572	; (adr r3, 800a068 <__ieee754_rem_pio2+0x308>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 fa4d 	bl	80002cc <__adddf3>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	e9ca 2300 	strd	r2, r3, [sl]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fa43 	bl	80002c8 <__aeabi_dsub>
 8009e42:	a389      	add	r3, pc, #548	; (adr r3, 800a068 <__ieee754_rem_pio2+0x308>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f7f6 fa40 	bl	80002cc <__adddf3>
 8009e4c:	f04f 3bff 	mov.w	fp, #4294967295
 8009e50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e54:	e7c4      	b.n	8009de0 <__ieee754_rem_pio2+0x80>
 8009e56:	a386      	add	r3, pc, #536	; (adr r3, 800a070 <__ieee754_rem_pio2+0x310>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 fa36 	bl	80002cc <__adddf3>
 8009e60:	a385      	add	r3, pc, #532	; (adr r3, 800a078 <__ieee754_rem_pio2+0x318>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	f7f6 fa2f 	bl	80002cc <__adddf3>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	e9ca 2300 	strd	r2, r3, [sl]
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7f6 fa25 	bl	80002c8 <__aeabi_dsub>
 8009e7e:	a37e      	add	r3, pc, #504	; (adr r3, 800a078 <__ieee754_rem_pio2+0x318>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	e7e0      	b.n	8009e48 <__ieee754_rem_pio2+0xe8>
 8009e86:	4b87      	ldr	r3, [pc, #540]	; (800a0a4 <__ieee754_rem_pio2+0x344>)
 8009e88:	4598      	cmp	r8, r3
 8009e8a:	f300 80d9 	bgt.w	800a040 <__ieee754_rem_pio2+0x2e0>
 8009e8e:	f000 fe39 	bl	800ab04 <fabs>
 8009e92:	ec55 4b10 	vmov	r4, r5, d0
 8009e96:	ee10 0a10 	vmov	r0, s0
 8009e9a:	a379      	add	r3, pc, #484	; (adr r3, 800a080 <__ieee754_rem_pio2+0x320>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fbc9 	bl	8000638 <__aeabi_dmul>
 8009ea6:	4b80      	ldr	r3, [pc, #512]	; (800a0a8 <__ieee754_rem_pio2+0x348>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f7f6 fa0f 	bl	80002cc <__adddf3>
 8009eae:	f7f6 fe73 	bl	8000b98 <__aeabi_d2iz>
 8009eb2:	4683      	mov	fp, r0
 8009eb4:	f7f6 fb56 	bl	8000564 <__aeabi_i2d>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	ec43 2b18 	vmov	d8, r2, r3
 8009ec0:	a367      	add	r3, pc, #412	; (adr r3, 800a060 <__ieee754_rem_pio2+0x300>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 fbb7 	bl	8000638 <__aeabi_dmul>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4620      	mov	r0, r4
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	f7f6 f9f9 	bl	80002c8 <__aeabi_dsub>
 8009ed6:	a364      	add	r3, pc, #400	; (adr r3, 800a068 <__ieee754_rem_pio2+0x308>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	ec51 0b18 	vmov	r0, r1, d8
 8009ee4:	f7f6 fba8 	bl	8000638 <__aeabi_dmul>
 8009ee8:	f1bb 0f1f 	cmp.w	fp, #31
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	dc0d      	bgt.n	8009f0e <__ieee754_rem_pio2+0x1ae>
 8009ef2:	4b6e      	ldr	r3, [pc, #440]	; (800a0ac <__ieee754_rem_pio2+0x34c>)
 8009ef4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efc:	4543      	cmp	r3, r8
 8009efe:	d006      	beq.n	8009f0e <__ieee754_rem_pio2+0x1ae>
 8009f00:	4622      	mov	r2, r4
 8009f02:	462b      	mov	r3, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	4639      	mov	r1, r7
 8009f08:	f7f6 f9de 	bl	80002c8 <__aeabi_dsub>
 8009f0c:	e00f      	b.n	8009f2e <__ieee754_rem_pio2+0x1ce>
 8009f0e:	462b      	mov	r3, r5
 8009f10:	4622      	mov	r2, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	4639      	mov	r1, r7
 8009f16:	f7f6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8009f1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f24:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009f28:	f1b8 0f10 	cmp.w	r8, #16
 8009f2c:	dc02      	bgt.n	8009f34 <__ieee754_rem_pio2+0x1d4>
 8009f2e:	e9ca 0100 	strd	r0, r1, [sl]
 8009f32:	e039      	b.n	8009fa8 <__ieee754_rem_pio2+0x248>
 8009f34:	a34e      	add	r3, pc, #312	; (adr r3, 800a070 <__ieee754_rem_pio2+0x310>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	ec51 0b18 	vmov	r0, r1, d8
 8009f3e:	f7f6 fb7b 	bl	8000638 <__aeabi_dmul>
 8009f42:	4604      	mov	r4, r0
 8009f44:	460d      	mov	r5, r1
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	f7f6 f9bb 	bl	80002c8 <__aeabi_dsub>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 f9b3 	bl	80002c8 <__aeabi_dsub>
 8009f62:	4622      	mov	r2, r4
 8009f64:	462b      	mov	r3, r5
 8009f66:	f7f6 f9af 	bl	80002c8 <__aeabi_dsub>
 8009f6a:	a343      	add	r3, pc, #268	; (adr r3, 800a078 <__ieee754_rem_pio2+0x318>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	4604      	mov	r4, r0
 8009f72:	460d      	mov	r5, r1
 8009f74:	ec51 0b18 	vmov	r0, r1, d8
 8009f78:	f7f6 fb5e 	bl	8000638 <__aeabi_dmul>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	462b      	mov	r3, r5
 8009f80:	f7f6 f9a2 	bl	80002c8 <__aeabi_dsub>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 f99a 	bl	80002c8 <__aeabi_dsub>
 8009f94:	9a03      	ldr	r2, [sp, #12]
 8009f96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b31      	cmp	r3, #49	; 0x31
 8009f9e:	dc24      	bgt.n	8009fea <__ieee754_rem_pio2+0x28a>
 8009fa0:	e9ca 0100 	strd	r0, r1, [sl]
 8009fa4:	4646      	mov	r6, r8
 8009fa6:	464f      	mov	r7, r9
 8009fa8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fac:	4630      	mov	r0, r6
 8009fae:	4642      	mov	r2, r8
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 f988 	bl	80002c8 <__aeabi_dsub>
 8009fb8:	462b      	mov	r3, r5
 8009fba:	4622      	mov	r2, r4
 8009fbc:	f7f6 f984 	bl	80002c8 <__aeabi_dsub>
 8009fc0:	9b02      	ldr	r3, [sp, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fc8:	f6bf af0a 	bge.w	8009de0 <__ieee754_rem_pio2+0x80>
 8009fcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fd0:	f8ca 3004 	str.w	r3, [sl, #4]
 8009fd4:	f8ca 8000 	str.w	r8, [sl]
 8009fd8:	f8ca 0008 	str.w	r0, [sl, #8]
 8009fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe0:	f8ca 300c 	str.w	r3, [sl, #12]
 8009fe4:	f1cb 0b00 	rsb	fp, fp, #0
 8009fe8:	e6fa      	b.n	8009de0 <__ieee754_rem_pio2+0x80>
 8009fea:	a327      	add	r3, pc, #156	; (adr r3, 800a088 <__ieee754_rem_pio2+0x328>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	ec51 0b18 	vmov	r0, r1, d8
 8009ff4:	f7f6 fb20 	bl	8000638 <__aeabi_dmul>
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4640      	mov	r0, r8
 800a002:	4649      	mov	r1, r9
 800a004:	f7f6 f960 	bl	80002c8 <__aeabi_dsub>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f958 	bl	80002c8 <__aeabi_dsub>
 800a018:	4622      	mov	r2, r4
 800a01a:	462b      	mov	r3, r5
 800a01c:	f7f6 f954 	bl	80002c8 <__aeabi_dsub>
 800a020:	a31b      	add	r3, pc, #108	; (adr r3, 800a090 <__ieee754_rem_pio2+0x330>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	ec51 0b18 	vmov	r0, r1, d8
 800a02e:	f7f6 fb03 	bl	8000638 <__aeabi_dmul>
 800a032:	4622      	mov	r2, r4
 800a034:	462b      	mov	r3, r5
 800a036:	f7f6 f947 	bl	80002c8 <__aeabi_dsub>
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	e75f      	b.n	8009f00 <__ieee754_rem_pio2+0x1a0>
 800a040:	4b1b      	ldr	r3, [pc, #108]	; (800a0b0 <__ieee754_rem_pio2+0x350>)
 800a042:	4598      	cmp	r8, r3
 800a044:	dd36      	ble.n	800a0b4 <__ieee754_rem_pio2+0x354>
 800a046:	ee10 2a10 	vmov	r2, s0
 800a04a:	462b      	mov	r3, r5
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f93a 	bl	80002c8 <__aeabi_dsub>
 800a054:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a058:	e9ca 0100 	strd	r0, r1, [sl]
 800a05c:	e694      	b.n	8009d88 <__ieee754_rem_pio2+0x28>
 800a05e:	bf00      	nop
 800a060:	54400000 	.word	0x54400000
 800a064:	3ff921fb 	.word	0x3ff921fb
 800a068:	1a626331 	.word	0x1a626331
 800a06c:	3dd0b461 	.word	0x3dd0b461
 800a070:	1a600000 	.word	0x1a600000
 800a074:	3dd0b461 	.word	0x3dd0b461
 800a078:	2e037073 	.word	0x2e037073
 800a07c:	3ba3198a 	.word	0x3ba3198a
 800a080:	6dc9c883 	.word	0x6dc9c883
 800a084:	3fe45f30 	.word	0x3fe45f30
 800a088:	2e000000 	.word	0x2e000000
 800a08c:	3ba3198a 	.word	0x3ba3198a
 800a090:	252049c1 	.word	0x252049c1
 800a094:	397b839a 	.word	0x397b839a
 800a098:	3fe921fb 	.word	0x3fe921fb
 800a09c:	4002d97b 	.word	0x4002d97b
 800a0a0:	3ff921fb 	.word	0x3ff921fb
 800a0a4:	413921fb 	.word	0x413921fb
 800a0a8:	3fe00000 	.word	0x3fe00000
 800a0ac:	0800b1c4 	.word	0x0800b1c4
 800a0b0:	7fefffff 	.word	0x7fefffff
 800a0b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a0b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a0bc:	ee10 0a10 	vmov	r0, s0
 800a0c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a0c4:	ee10 6a10 	vmov	r6, s0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	f7f6 fd65 	bl	8000b98 <__aeabi_d2iz>
 800a0ce:	f7f6 fa49 	bl	8000564 <__aeabi_i2d>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	4639      	mov	r1, r7
 800a0da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0de:	f7f6 f8f3 	bl	80002c8 <__aeabi_dsub>
 800a0e2:	4b22      	ldr	r3, [pc, #136]	; (800a16c <__ieee754_rem_pio2+0x40c>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f7f6 faa7 	bl	8000638 <__aeabi_dmul>
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	f7f6 fd53 	bl	8000b98 <__aeabi_d2iz>
 800a0f2:	f7f6 fa37 	bl	8000564 <__aeabi_i2d>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a102:	f7f6 f8e1 	bl	80002c8 <__aeabi_dsub>
 800a106:	4b19      	ldr	r3, [pc, #100]	; (800a16c <__ieee754_rem_pio2+0x40c>)
 800a108:	2200      	movs	r2, #0
 800a10a:	f7f6 fa95 	bl	8000638 <__aeabi_dmul>
 800a10e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a112:	ad04      	add	r5, sp, #16
 800a114:	f04f 0803 	mov.w	r8, #3
 800a118:	46a9      	mov	r9, r5
 800a11a:	2600      	movs	r6, #0
 800a11c:	2700      	movs	r7, #0
 800a11e:	4632      	mov	r2, r6
 800a120:	463b      	mov	r3, r7
 800a122:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a126:	46c3      	mov	fp, r8
 800a128:	3d08      	subs	r5, #8
 800a12a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a12e:	f7f6 fceb 	bl	8000b08 <__aeabi_dcmpeq>
 800a132:	2800      	cmp	r0, #0
 800a134:	d1f3      	bne.n	800a11e <__ieee754_rem_pio2+0x3be>
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <__ieee754_rem_pio2+0x410>)
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	2302      	movs	r3, #2
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	4622      	mov	r2, r4
 800a140:	465b      	mov	r3, fp
 800a142:	4651      	mov	r1, sl
 800a144:	4648      	mov	r0, r9
 800a146:	f000 f8df 	bl	800a308 <__kernel_rem_pio2>
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	4683      	mov	fp, r0
 800a150:	f6bf ae46 	bge.w	8009de0 <__ieee754_rem_pio2+0x80>
 800a154:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a15c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a160:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a164:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a168:	e73a      	b.n	8009fe0 <__ieee754_rem_pio2+0x280>
 800a16a:	bf00      	nop
 800a16c:	41700000 	.word	0x41700000
 800a170:	0800b244 	.word	0x0800b244
 800a174:	00000000 	.word	0x00000000

0800a178 <__kernel_cos>:
 800a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	ec57 6b10 	vmov	r6, r7, d0
 800a180:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a184:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a188:	ed8d 1b00 	vstr	d1, [sp]
 800a18c:	da07      	bge.n	800a19e <__kernel_cos+0x26>
 800a18e:	ee10 0a10 	vmov	r0, s0
 800a192:	4639      	mov	r1, r7
 800a194:	f7f6 fd00 	bl	8000b98 <__aeabi_d2iz>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f000 8088 	beq.w	800a2ae <__kernel_cos+0x136>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 fa47 	bl	8000638 <__aeabi_dmul>
 800a1aa:	4b51      	ldr	r3, [pc, #324]	; (800a2f0 <__kernel_cos+0x178>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	f7f6 fa41 	bl	8000638 <__aeabi_dmul>
 800a1b6:	a340      	add	r3, pc, #256	; (adr r3, 800a2b8 <__kernel_cos+0x140>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7f6 fa38 	bl	8000638 <__aeabi_dmul>
 800a1c8:	a33d      	add	r3, pc, #244	; (adr r3, 800a2c0 <__kernel_cos+0x148>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f7f6 f87d 	bl	80002cc <__adddf3>
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	f7f6 fa2f 	bl	8000638 <__aeabi_dmul>
 800a1da:	a33b      	add	r3, pc, #236	; (adr r3, 800a2c8 <__kernel_cos+0x150>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 f872 	bl	80002c8 <__aeabi_dsub>
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	f7f6 fa26 	bl	8000638 <__aeabi_dmul>
 800a1ec:	a338      	add	r3, pc, #224	; (adr r3, 800a2d0 <__kernel_cos+0x158>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	f7f6 f86b 	bl	80002cc <__adddf3>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	462b      	mov	r3, r5
 800a1fa:	f7f6 fa1d 	bl	8000638 <__aeabi_dmul>
 800a1fe:	a336      	add	r3, pc, #216	; (adr r3, 800a2d8 <__kernel_cos+0x160>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f6 f860 	bl	80002c8 <__aeabi_dsub>
 800a208:	4622      	mov	r2, r4
 800a20a:	462b      	mov	r3, r5
 800a20c:	f7f6 fa14 	bl	8000638 <__aeabi_dmul>
 800a210:	a333      	add	r3, pc, #204	; (adr r3, 800a2e0 <__kernel_cos+0x168>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f859 	bl	80002cc <__adddf3>
 800a21a:	4622      	mov	r2, r4
 800a21c:	462b      	mov	r3, r5
 800a21e:	f7f6 fa0b 	bl	8000638 <__aeabi_dmul>
 800a222:	4622      	mov	r2, r4
 800a224:	462b      	mov	r3, r5
 800a226:	f7f6 fa07 	bl	8000638 <__aeabi_dmul>
 800a22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f9ff 	bl	8000638 <__aeabi_dmul>
 800a23a:	460b      	mov	r3, r1
 800a23c:	4602      	mov	r2, r0
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	f7f6 f841 	bl	80002c8 <__aeabi_dsub>
 800a246:	4b2b      	ldr	r3, [pc, #172]	; (800a2f4 <__kernel_cos+0x17c>)
 800a248:	4598      	cmp	r8, r3
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	dc10      	bgt.n	800a272 <__kernel_cos+0xfa>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4650      	mov	r0, sl
 800a256:	4659      	mov	r1, fp
 800a258:	f7f6 f836 	bl	80002c8 <__aeabi_dsub>
 800a25c:	460b      	mov	r3, r1
 800a25e:	4926      	ldr	r1, [pc, #152]	; (800a2f8 <__kernel_cos+0x180>)
 800a260:	4602      	mov	r2, r0
 800a262:	2000      	movs	r0, #0
 800a264:	f7f6 f830 	bl	80002c8 <__aeabi_dsub>
 800a268:	ec41 0b10 	vmov	d0, r0, r1
 800a26c:	b003      	add	sp, #12
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a272:	4b22      	ldr	r3, [pc, #136]	; (800a2fc <__kernel_cos+0x184>)
 800a274:	4920      	ldr	r1, [pc, #128]	; (800a2f8 <__kernel_cos+0x180>)
 800a276:	4598      	cmp	r8, r3
 800a278:	bfcc      	ite	gt
 800a27a:	4d21      	ldrgt	r5, [pc, #132]	; (800a300 <__kernel_cos+0x188>)
 800a27c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a280:	2400      	movs	r4, #0
 800a282:	4622      	mov	r2, r4
 800a284:	462b      	mov	r3, r5
 800a286:	2000      	movs	r0, #0
 800a288:	f7f6 f81e 	bl	80002c8 <__aeabi_dsub>
 800a28c:	4622      	mov	r2, r4
 800a28e:	4680      	mov	r8, r0
 800a290:	4689      	mov	r9, r1
 800a292:	462b      	mov	r3, r5
 800a294:	4650      	mov	r0, sl
 800a296:	4659      	mov	r1, fp
 800a298:	f7f6 f816 	bl	80002c8 <__aeabi_dsub>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f6 f812 	bl	80002c8 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	e7da      	b.n	800a264 <__kernel_cos+0xec>
 800a2ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a2e8 <__kernel_cos+0x170>
 800a2b2:	e7db      	b.n	800a26c <__kernel_cos+0xf4>
 800a2b4:	f3af 8000 	nop.w
 800a2b8:	be8838d4 	.word	0xbe8838d4
 800a2bc:	bda8fae9 	.word	0xbda8fae9
 800a2c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a2c4:	3e21ee9e 	.word	0x3e21ee9e
 800a2c8:	809c52ad 	.word	0x809c52ad
 800a2cc:	3e927e4f 	.word	0x3e927e4f
 800a2d0:	19cb1590 	.word	0x19cb1590
 800a2d4:	3efa01a0 	.word	0x3efa01a0
 800a2d8:	16c15177 	.word	0x16c15177
 800a2dc:	3f56c16c 	.word	0x3f56c16c
 800a2e0:	5555554c 	.word	0x5555554c
 800a2e4:	3fa55555 	.word	0x3fa55555
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	3ff00000 	.word	0x3ff00000
 800a2f0:	3fe00000 	.word	0x3fe00000
 800a2f4:	3fd33332 	.word	0x3fd33332
 800a2f8:	3ff00000 	.word	0x3ff00000
 800a2fc:	3fe90000 	.word	0x3fe90000
 800a300:	3fd20000 	.word	0x3fd20000
 800a304:	00000000 	.word	0x00000000

0800a308 <__kernel_rem_pio2>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ed2d 8b02 	vpush	{d8}
 800a310:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a314:	f112 0f14 	cmn.w	r2, #20
 800a318:	9308      	str	r3, [sp, #32]
 800a31a:	9101      	str	r1, [sp, #4]
 800a31c:	4bc6      	ldr	r3, [pc, #792]	; (800a638 <__kernel_rem_pio2+0x330>)
 800a31e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a320:	9009      	str	r0, [sp, #36]	; 0x24
 800a322:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	9b08      	ldr	r3, [sp, #32]
 800a32a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a32e:	bfa8      	it	ge
 800a330:	1ed4      	subge	r4, r2, #3
 800a332:	9306      	str	r3, [sp, #24]
 800a334:	bfb2      	itee	lt
 800a336:	2400      	movlt	r4, #0
 800a338:	2318      	movge	r3, #24
 800a33a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a33e:	f06f 0317 	mvn.w	r3, #23
 800a342:	fb04 3303 	mla	r3, r4, r3, r3
 800a346:	eb03 0a02 	add.w	sl, r3, r2
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	9a06      	ldr	r2, [sp, #24]
 800a34e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a628 <__kernel_rem_pio2+0x320>
 800a352:	eb03 0802 	add.w	r8, r3, r2
 800a356:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a358:	1aa7      	subs	r7, r4, r2
 800a35a:	ae20      	add	r6, sp, #128	; 0x80
 800a35c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a360:	2500      	movs	r5, #0
 800a362:	4545      	cmp	r5, r8
 800a364:	dd18      	ble.n	800a398 <__kernel_rem_pio2+0x90>
 800a366:	9b08      	ldr	r3, [sp, #32]
 800a368:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a36c:	aa20      	add	r2, sp, #128	; 0x80
 800a36e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a628 <__kernel_rem_pio2+0x320>
 800a372:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a376:	f1c3 0301 	rsb	r3, r3, #1
 800a37a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a37e:	9307      	str	r3, [sp, #28]
 800a380:	9b07      	ldr	r3, [sp, #28]
 800a382:	9a04      	ldr	r2, [sp, #16]
 800a384:	4443      	add	r3, r8
 800a386:	429a      	cmp	r2, r3
 800a388:	db2f      	blt.n	800a3ea <__kernel_rem_pio2+0xe2>
 800a38a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a38e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a392:	462f      	mov	r7, r5
 800a394:	2600      	movs	r6, #0
 800a396:	e01b      	b.n	800a3d0 <__kernel_rem_pio2+0xc8>
 800a398:	42ef      	cmn	r7, r5
 800a39a:	d407      	bmi.n	800a3ac <__kernel_rem_pio2+0xa4>
 800a39c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a3a0:	f7f6 f8e0 	bl	8000564 <__aeabi_i2d>
 800a3a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	e7da      	b.n	800a362 <__kernel_rem_pio2+0x5a>
 800a3ac:	ec51 0b18 	vmov	r0, r1, d8
 800a3b0:	e7f8      	b.n	800a3a4 <__kernel_rem_pio2+0x9c>
 800a3b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a3ba:	f7f6 f93d 	bl	8000638 <__aeabi_dmul>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3c6:	f7f5 ff81 	bl	80002cc <__adddf3>
 800a3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ce:	3601      	adds	r6, #1
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	429e      	cmp	r6, r3
 800a3d4:	f1a7 0708 	sub.w	r7, r7, #8
 800a3d8:	ddeb      	ble.n	800a3b2 <__kernel_rem_pio2+0xaa>
 800a3da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3de:	3508      	adds	r5, #8
 800a3e0:	ecab 7b02 	vstmia	fp!, {d7}
 800a3e4:	f108 0801 	add.w	r8, r8, #1
 800a3e8:	e7ca      	b.n	800a380 <__kernel_rem_pio2+0x78>
 800a3ea:	9b04      	ldr	r3, [sp, #16]
 800a3ec:	aa0c      	add	r2, sp, #48	; 0x30
 800a3ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a3f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a3fa:	9c04      	ldr	r4, [sp, #16]
 800a3fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a3fe:	ab98      	add	r3, sp, #608	; 0x260
 800a400:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a404:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a408:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a40c:	f8cd b008 	str.w	fp, [sp, #8]
 800a410:	4625      	mov	r5, r4
 800a412:	2d00      	cmp	r5, #0
 800a414:	dc78      	bgt.n	800a508 <__kernel_rem_pio2+0x200>
 800a416:	ec47 6b10 	vmov	d0, r6, r7
 800a41a:	4650      	mov	r0, sl
 800a41c:	f000 fbfc 	bl	800ac18 <scalbn>
 800a420:	ec57 6b10 	vmov	r6, r7, d0
 800a424:	2200      	movs	r2, #0
 800a426:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a42a:	ee10 0a10 	vmov	r0, s0
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f6 f902 	bl	8000638 <__aeabi_dmul>
 800a434:	ec41 0b10 	vmov	d0, r0, r1
 800a438:	f000 fb6e 	bl	800ab18 <floor>
 800a43c:	4b7f      	ldr	r3, [pc, #508]	; (800a63c <__kernel_rem_pio2+0x334>)
 800a43e:	ec51 0b10 	vmov	r0, r1, d0
 800a442:	2200      	movs	r2, #0
 800a444:	f7f6 f8f8 	bl	8000638 <__aeabi_dmul>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4630      	mov	r0, r6
 800a44e:	4639      	mov	r1, r7
 800a450:	f7f5 ff3a 	bl	80002c8 <__aeabi_dsub>
 800a454:	460f      	mov	r7, r1
 800a456:	4606      	mov	r6, r0
 800a458:	f7f6 fb9e 	bl	8000b98 <__aeabi_d2iz>
 800a45c:	9007      	str	r0, [sp, #28]
 800a45e:	f7f6 f881 	bl	8000564 <__aeabi_i2d>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f5 ff2d 	bl	80002c8 <__aeabi_dsub>
 800a46e:	f1ba 0f00 	cmp.w	sl, #0
 800a472:	4606      	mov	r6, r0
 800a474:	460f      	mov	r7, r1
 800a476:	dd70      	ble.n	800a55a <__kernel_rem_pio2+0x252>
 800a478:	1e62      	subs	r2, r4, #1
 800a47a:	ab0c      	add	r3, sp, #48	; 0x30
 800a47c:	9d07      	ldr	r5, [sp, #28]
 800a47e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a482:	f1ca 0118 	rsb	r1, sl, #24
 800a486:	fa40 f301 	asr.w	r3, r0, r1
 800a48a:	441d      	add	r5, r3
 800a48c:	408b      	lsls	r3, r1
 800a48e:	1ac0      	subs	r0, r0, r3
 800a490:	ab0c      	add	r3, sp, #48	; 0x30
 800a492:	9507      	str	r5, [sp, #28]
 800a494:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a498:	f1ca 0317 	rsb	r3, sl, #23
 800a49c:	fa40 f303 	asr.w	r3, r0, r3
 800a4a0:	9302      	str	r3, [sp, #8]
 800a4a2:	9b02      	ldr	r3, [sp, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dd66      	ble.n	800a576 <__kernel_rem_pio2+0x26e>
 800a4a8:	9b07      	ldr	r3, [sp, #28]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	4615      	mov	r5, r2
 800a4b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a4b6:	4294      	cmp	r4, r2
 800a4b8:	f300 8099 	bgt.w	800a5ee <__kernel_rem_pio2+0x2e6>
 800a4bc:	f1ba 0f00 	cmp.w	sl, #0
 800a4c0:	dd07      	ble.n	800a4d2 <__kernel_rem_pio2+0x1ca>
 800a4c2:	f1ba 0f01 	cmp.w	sl, #1
 800a4c6:	f000 80a5 	beq.w	800a614 <__kernel_rem_pio2+0x30c>
 800a4ca:	f1ba 0f02 	cmp.w	sl, #2
 800a4ce:	f000 80c1 	beq.w	800a654 <__kernel_rem_pio2+0x34c>
 800a4d2:	9b02      	ldr	r3, [sp, #8]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d14e      	bne.n	800a576 <__kernel_rem_pio2+0x26e>
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	4958      	ldr	r1, [pc, #352]	; (800a640 <__kernel_rem_pio2+0x338>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 fef2 	bl	80002c8 <__aeabi_dsub>
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460f      	mov	r7, r1
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	d044      	beq.n	800a576 <__kernel_rem_pio2+0x26e>
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a630 <__kernel_rem_pio2+0x328>
 800a4f2:	f000 fb91 	bl	800ac18 <scalbn>
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	ec53 2b10 	vmov	r2, r3, d0
 800a4fe:	f7f5 fee3 	bl	80002c8 <__aeabi_dsub>
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	e036      	b.n	800a576 <__kernel_rem_pio2+0x26e>
 800a508:	4b4e      	ldr	r3, [pc, #312]	; (800a644 <__kernel_rem_pio2+0x33c>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f6 f892 	bl	8000638 <__aeabi_dmul>
 800a514:	f7f6 fb40 	bl	8000b98 <__aeabi_d2iz>
 800a518:	f7f6 f824 	bl	8000564 <__aeabi_i2d>
 800a51c:	4b4a      	ldr	r3, [pc, #296]	; (800a648 <__kernel_rem_pio2+0x340>)
 800a51e:	2200      	movs	r2, #0
 800a520:	4680      	mov	r8, r0
 800a522:	4689      	mov	r9, r1
 800a524:	f7f6 f888 	bl	8000638 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feca 	bl	80002c8 <__aeabi_dsub>
 800a534:	f7f6 fb30 	bl	8000b98 <__aeabi_d2iz>
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	f843 0b04 	str.w	r0, [r3], #4
 800a53e:	3d01      	subs	r5, #1
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	ab70      	add	r3, sp, #448	; 0x1c0
 800a544:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	4640      	mov	r0, r8
 800a54e:	4649      	mov	r1, r9
 800a550:	f7f5 febc 	bl	80002cc <__adddf3>
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	e75b      	b.n	800a412 <__kernel_rem_pio2+0x10a>
 800a55a:	d105      	bne.n	800a568 <__kernel_rem_pio2+0x260>
 800a55c:	1e63      	subs	r3, r4, #1
 800a55e:	aa0c      	add	r2, sp, #48	; 0x30
 800a560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a564:	15c3      	asrs	r3, r0, #23
 800a566:	e79b      	b.n	800a4a0 <__kernel_rem_pio2+0x198>
 800a568:	4b38      	ldr	r3, [pc, #224]	; (800a64c <__kernel_rem_pio2+0x344>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	f7f6 faea 	bl	8000b44 <__aeabi_dcmpge>
 800a570:	2800      	cmp	r0, #0
 800a572:	d139      	bne.n	800a5e8 <__kernel_rem_pio2+0x2e0>
 800a574:	9002      	str	r0, [sp, #8]
 800a576:	2200      	movs	r2, #0
 800a578:	2300      	movs	r3, #0
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f6 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 800a582:	2800      	cmp	r0, #0
 800a584:	f000 80b4 	beq.w	800a6f0 <__kernel_rem_pio2+0x3e8>
 800a588:	f104 3bff 	add.w	fp, r4, #4294967295
 800a58c:	465b      	mov	r3, fp
 800a58e:	2200      	movs	r2, #0
 800a590:	9904      	ldr	r1, [sp, #16]
 800a592:	428b      	cmp	r3, r1
 800a594:	da65      	bge.n	800a662 <__kernel_rem_pio2+0x35a>
 800a596:	2a00      	cmp	r2, #0
 800a598:	d07b      	beq.n	800a692 <__kernel_rem_pio2+0x38a>
 800a59a:	ab0c      	add	r3, sp, #48	; 0x30
 800a59c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a5a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80a0 	beq.w	800a6ea <__kernel_rem_pio2+0x3e2>
 800a5aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a630 <__kernel_rem_pio2+0x328>
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	f000 fb32 	bl	800ac18 <scalbn>
 800a5b4:	4f23      	ldr	r7, [pc, #140]	; (800a644 <__kernel_rem_pio2+0x33c>)
 800a5b6:	ec55 4b10 	vmov	r4, r5, d0
 800a5ba:	46d8      	mov	r8, fp
 800a5bc:	2600      	movs	r6, #0
 800a5be:	f1b8 0f00 	cmp.w	r8, #0
 800a5c2:	f280 80cf 	bge.w	800a764 <__kernel_rem_pio2+0x45c>
 800a5c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a628 <__kernel_rem_pio2+0x320>
 800a5ca:	465f      	mov	r7, fp
 800a5cc:	f04f 0800 	mov.w	r8, #0
 800a5d0:	2f00      	cmp	r7, #0
 800a5d2:	f2c0 80fd 	blt.w	800a7d0 <__kernel_rem_pio2+0x4c8>
 800a5d6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a5d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a650 <__kernel_rem_pio2+0x348>
 800a5dc:	ec55 4b18 	vmov	r4, r5, d8
 800a5e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	e0e5      	b.n	800a7b4 <__kernel_rem_pio2+0x4ac>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	9302      	str	r3, [sp, #8]
 800a5ec:	e75c      	b.n	800a4a8 <__kernel_rem_pio2+0x1a0>
 800a5ee:	f8db 3000 	ldr.w	r3, [fp]
 800a5f2:	b955      	cbnz	r5, 800a60a <__kernel_rem_pio2+0x302>
 800a5f4:	b123      	cbz	r3, 800a600 <__kernel_rem_pio2+0x2f8>
 800a5f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a5fa:	f8cb 3000 	str.w	r3, [fp]
 800a5fe:	2301      	movs	r3, #1
 800a600:	3201      	adds	r2, #1
 800a602:	f10b 0b04 	add.w	fp, fp, #4
 800a606:	461d      	mov	r5, r3
 800a608:	e755      	b.n	800a4b6 <__kernel_rem_pio2+0x1ae>
 800a60a:	1acb      	subs	r3, r1, r3
 800a60c:	f8cb 3000 	str.w	r3, [fp]
 800a610:	462b      	mov	r3, r5
 800a612:	e7f5      	b.n	800a600 <__kernel_rem_pio2+0x2f8>
 800a614:	1e62      	subs	r2, r4, #1
 800a616:	ab0c      	add	r3, sp, #48	; 0x30
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a620:	a90c      	add	r1, sp, #48	; 0x30
 800a622:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a626:	e754      	b.n	800a4d2 <__kernel_rem_pio2+0x1ca>
	...
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	0800b390 	.word	0x0800b390
 800a63c:	40200000 	.word	0x40200000
 800a640:	3ff00000 	.word	0x3ff00000
 800a644:	3e700000 	.word	0x3e700000
 800a648:	41700000 	.word	0x41700000
 800a64c:	3fe00000 	.word	0x3fe00000
 800a650:	0800b350 	.word	0x0800b350
 800a654:	1e62      	subs	r2, r4, #1
 800a656:	ab0c      	add	r3, sp, #48	; 0x30
 800a658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a660:	e7de      	b.n	800a620 <__kernel_rem_pio2+0x318>
 800a662:	a90c      	add	r1, sp, #48	; 0x30
 800a664:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a668:	3b01      	subs	r3, #1
 800a66a:	430a      	orrs	r2, r1
 800a66c:	e790      	b.n	800a590 <__kernel_rem_pio2+0x288>
 800a66e:	3301      	adds	r3, #1
 800a670:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a674:	2900      	cmp	r1, #0
 800a676:	d0fa      	beq.n	800a66e <__kernel_rem_pio2+0x366>
 800a678:	9a08      	ldr	r2, [sp, #32]
 800a67a:	18e3      	adds	r3, r4, r3
 800a67c:	18a6      	adds	r6, r4, r2
 800a67e:	aa20      	add	r2, sp, #128	; 0x80
 800a680:	1c65      	adds	r5, r4, #1
 800a682:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a686:	9302      	str	r3, [sp, #8]
 800a688:	9b02      	ldr	r3, [sp, #8]
 800a68a:	42ab      	cmp	r3, r5
 800a68c:	da04      	bge.n	800a698 <__kernel_rem_pio2+0x390>
 800a68e:	461c      	mov	r4, r3
 800a690:	e6b5      	b.n	800a3fe <__kernel_rem_pio2+0xf6>
 800a692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a694:	2301      	movs	r3, #1
 800a696:	e7eb      	b.n	800a670 <__kernel_rem_pio2+0x368>
 800a698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a69e:	f7f5 ff61 	bl	8000564 <__aeabi_i2d>
 800a6a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a8:	46b3      	mov	fp, r6
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	2700      	movs	r7, #0
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	429f      	cmp	r7, r3
 800a6ba:	dd06      	ble.n	800a6ca <__kernel_rem_pio2+0x3c2>
 800a6bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800a6be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6c2:	e9c3 8900 	strd	r8, r9, [r3]
 800a6c6:	3501      	adds	r5, #1
 800a6c8:	e7de      	b.n	800a688 <__kernel_rem_pio2+0x380>
 800a6ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a6ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a6d2:	f7f5 ffb1 	bl	8000638 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 fdf5 	bl	80002cc <__adddf3>
 800a6e2:	3701      	adds	r7, #1
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	e7e5      	b.n	800a6b6 <__kernel_rem_pio2+0x3ae>
 800a6ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6ee:	e754      	b.n	800a59a <__kernel_rem_pio2+0x292>
 800a6f0:	ec47 6b10 	vmov	d0, r6, r7
 800a6f4:	f1ca 0000 	rsb	r0, sl, #0
 800a6f8:	f000 fa8e 	bl	800ac18 <scalbn>
 800a6fc:	ec57 6b10 	vmov	r6, r7, d0
 800a700:	4b9f      	ldr	r3, [pc, #636]	; (800a980 <__kernel_rem_pio2+0x678>)
 800a702:	ee10 0a10 	vmov	r0, s0
 800a706:	2200      	movs	r2, #0
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f6 fa1b 	bl	8000b44 <__aeabi_dcmpge>
 800a70e:	b300      	cbz	r0, 800a752 <__kernel_rem_pio2+0x44a>
 800a710:	4b9c      	ldr	r3, [pc, #624]	; (800a984 <__kernel_rem_pio2+0x67c>)
 800a712:	2200      	movs	r2, #0
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	f7f5 ff8e 	bl	8000638 <__aeabi_dmul>
 800a71c:	f7f6 fa3c 	bl	8000b98 <__aeabi_d2iz>
 800a720:	4605      	mov	r5, r0
 800a722:	f7f5 ff1f 	bl	8000564 <__aeabi_i2d>
 800a726:	4b96      	ldr	r3, [pc, #600]	; (800a980 <__kernel_rem_pio2+0x678>)
 800a728:	2200      	movs	r2, #0
 800a72a:	f7f5 ff85 	bl	8000638 <__aeabi_dmul>
 800a72e:	460b      	mov	r3, r1
 800a730:	4602      	mov	r2, r0
 800a732:	4639      	mov	r1, r7
 800a734:	4630      	mov	r0, r6
 800a736:	f7f5 fdc7 	bl	80002c8 <__aeabi_dsub>
 800a73a:	f7f6 fa2d 	bl	8000b98 <__aeabi_d2iz>
 800a73e:	f104 0b01 	add.w	fp, r4, #1
 800a742:	ab0c      	add	r3, sp, #48	; 0x30
 800a744:	f10a 0a18 	add.w	sl, sl, #24
 800a748:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a74c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a750:	e72b      	b.n	800a5aa <__kernel_rem_pio2+0x2a2>
 800a752:	4630      	mov	r0, r6
 800a754:	4639      	mov	r1, r7
 800a756:	f7f6 fa1f 	bl	8000b98 <__aeabi_d2iz>
 800a75a:	ab0c      	add	r3, sp, #48	; 0x30
 800a75c:	46a3      	mov	fp, r4
 800a75e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a762:	e722      	b.n	800a5aa <__kernel_rem_pio2+0x2a2>
 800a764:	ab70      	add	r3, sp, #448	; 0x1c0
 800a766:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a76a:	ab0c      	add	r3, sp, #48	; 0x30
 800a76c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a770:	f7f5 fef8 	bl	8000564 <__aeabi_i2d>
 800a774:	4622      	mov	r2, r4
 800a776:	462b      	mov	r3, r5
 800a778:	f7f5 ff5e 	bl	8000638 <__aeabi_dmul>
 800a77c:	4632      	mov	r2, r6
 800a77e:	e9c9 0100 	strd	r0, r1, [r9]
 800a782:	463b      	mov	r3, r7
 800a784:	4620      	mov	r0, r4
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	e713      	b.n	800a5be <__kernel_rem_pio2+0x2b6>
 800a796:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a79a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a79e:	f7f5 ff4b 	bl	8000638 <__aeabi_dmul>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f5 fd8f 	bl	80002cc <__adddf3>
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	429e      	cmp	r6, r3
 800a7b8:	dc01      	bgt.n	800a7be <__kernel_rem_pio2+0x4b6>
 800a7ba:	45b0      	cmp	r8, r6
 800a7bc:	daeb      	bge.n	800a796 <__kernel_rem_pio2+0x48e>
 800a7be:	ab48      	add	r3, sp, #288	; 0x120
 800a7c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a7c4:	e9c3 4500 	strd	r4, r5, [r3]
 800a7c8:	3f01      	subs	r7, #1
 800a7ca:	f108 0801 	add.w	r8, r8, #1
 800a7ce:	e6ff      	b.n	800a5d0 <__kernel_rem_pio2+0x2c8>
 800a7d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	dc0b      	bgt.n	800a7ee <__kernel_rem_pio2+0x4e6>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	dc6e      	bgt.n	800a8b8 <__kernel_rem_pio2+0x5b0>
 800a7da:	d045      	beq.n	800a868 <__kernel_rem_pio2+0x560>
 800a7dc:	9b07      	ldr	r3, [sp, #28]
 800a7de:	f003 0007 	and.w	r0, r3, #7
 800a7e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a7e6:	ecbd 8b02 	vpop	{d8}
 800a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d1f3      	bne.n	800a7dc <__kernel_rem_pio2+0x4d4>
 800a7f4:	ab48      	add	r3, sp, #288	; 0x120
 800a7f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a7fa:	46d0      	mov	r8, sl
 800a7fc:	46d9      	mov	r9, fp
 800a7fe:	f1b9 0f00 	cmp.w	r9, #0
 800a802:	f1a8 0808 	sub.w	r8, r8, #8
 800a806:	dc64      	bgt.n	800a8d2 <__kernel_rem_pio2+0x5ca>
 800a808:	465c      	mov	r4, fp
 800a80a:	2c01      	cmp	r4, #1
 800a80c:	f1aa 0a08 	sub.w	sl, sl, #8
 800a810:	dc7e      	bgt.n	800a910 <__kernel_rem_pio2+0x608>
 800a812:	2000      	movs	r0, #0
 800a814:	2100      	movs	r1, #0
 800a816:	f1bb 0f01 	cmp.w	fp, #1
 800a81a:	f300 8097 	bgt.w	800a94c <__kernel_rem_pio2+0x644>
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a824:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f040 8099 	bne.w	800a960 <__kernel_rem_pio2+0x658>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	e9c3 5600 	strd	r5, r6, [r3]
 800a834:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a838:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a83c:	e7ce      	b.n	800a7dc <__kernel_rem_pio2+0x4d4>
 800a83e:	ab48      	add	r3, sp, #288	; 0x120
 800a840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fd40 	bl	80002cc <__adddf3>
 800a84c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a850:	f1bb 0f00 	cmp.w	fp, #0
 800a854:	daf3      	bge.n	800a83e <__kernel_rem_pio2+0x536>
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	b113      	cbz	r3, 800a860 <__kernel_rem_pio2+0x558>
 800a85a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a85e:	4619      	mov	r1, r3
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	e9c3 0100 	strd	r0, r1, [r3]
 800a866:	e7b9      	b.n	800a7dc <__kernel_rem_pio2+0x4d4>
 800a868:	2000      	movs	r0, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	e7f0      	b.n	800a850 <__kernel_rem_pio2+0x548>
 800a86e:	ab48      	add	r3, sp, #288	; 0x120
 800a870:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fd28 	bl	80002cc <__adddf3>
 800a87c:	3c01      	subs	r4, #1
 800a87e:	2c00      	cmp	r4, #0
 800a880:	daf5      	bge.n	800a86e <__kernel_rem_pio2+0x566>
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	b1e3      	cbz	r3, 800a8c0 <__kernel_rem_pio2+0x5b8>
 800a886:	4602      	mov	r2, r0
 800a888:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a88c:	9c01      	ldr	r4, [sp, #4]
 800a88e:	e9c4 2300 	strd	r2, r3, [r4]
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a89a:	f7f5 fd15 	bl	80002c8 <__aeabi_dsub>
 800a89e:	ad4a      	add	r5, sp, #296	; 0x128
 800a8a0:	2401      	movs	r4, #1
 800a8a2:	45a3      	cmp	fp, r4
 800a8a4:	da0f      	bge.n	800a8c6 <__kernel_rem_pio2+0x5be>
 800a8a6:	9b02      	ldr	r3, [sp, #8]
 800a8a8:	b113      	cbz	r3, 800a8b0 <__kernel_rem_pio2+0x5a8>
 800a8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a8b6:	e791      	b.n	800a7dc <__kernel_rem_pio2+0x4d4>
 800a8b8:	465c      	mov	r4, fp
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	e7de      	b.n	800a87e <__kernel_rem_pio2+0x576>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	e7e2      	b.n	800a88c <__kernel_rem_pio2+0x584>
 800a8c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a8ca:	f7f5 fcff 	bl	80002cc <__adddf3>
 800a8ce:	3401      	adds	r4, #1
 800a8d0:	e7e7      	b.n	800a8a2 <__kernel_rem_pio2+0x59a>
 800a8d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a8d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4632      	mov	r2, r6
 800a8de:	463b      	mov	r3, r7
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f7f5 fcf3 	bl	80002cc <__adddf3>
 800a8e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f7f5 fce9 	bl	80002c8 <__aeabi_dsub>
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	f7f5 fce7 	bl	80002cc <__adddf3>
 800a8fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a902:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a906:	ed88 7b00 	vstr	d7, [r8]
 800a90a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a90e:	e776      	b.n	800a7fe <__kernel_rem_pio2+0x4f6>
 800a910:	e9da 8900 	ldrd	r8, r9, [sl]
 800a914:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a918:	4640      	mov	r0, r8
 800a91a:	4632      	mov	r2, r6
 800a91c:	463b      	mov	r3, r7
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f5 fcd4 	bl	80002cc <__adddf3>
 800a924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	f7f5 fcc8 	bl	80002cc <__adddf3>
 800a93c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a944:	ed8a 7b00 	vstr	d7, [sl]
 800a948:	3c01      	subs	r4, #1
 800a94a:	e75e      	b.n	800a80a <__kernel_rem_pio2+0x502>
 800a94c:	ab48      	add	r3, sp, #288	; 0x120
 800a94e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fcb9 	bl	80002cc <__adddf3>
 800a95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a95e:	e75a      	b.n	800a816 <__kernel_rem_pio2+0x50e>
 800a960:	9b01      	ldr	r3, [sp, #4]
 800a962:	9a01      	ldr	r2, [sp, #4]
 800a964:	601d      	str	r5, [r3, #0]
 800a966:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a96a:	605c      	str	r4, [r3, #4]
 800a96c:	609f      	str	r7, [r3, #8]
 800a96e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a972:	60d3      	str	r3, [r2, #12]
 800a974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a978:	6110      	str	r0, [r2, #16]
 800a97a:	6153      	str	r3, [r2, #20]
 800a97c:	e72e      	b.n	800a7dc <__kernel_rem_pio2+0x4d4>
 800a97e:	bf00      	nop
 800a980:	41700000 	.word	0x41700000
 800a984:	3e700000 	.word	0x3e700000

0800a988 <__kernel_sin>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	ed2d 8b04 	vpush	{d8-d9}
 800a990:	eeb0 8a41 	vmov.f32	s16, s2
 800a994:	eef0 8a61 	vmov.f32	s17, s3
 800a998:	ec55 4b10 	vmov	r4, r5, d0
 800a99c:	b083      	sub	sp, #12
 800a99e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a9a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a9a6:	9001      	str	r0, [sp, #4]
 800a9a8:	da06      	bge.n	800a9b8 <__kernel_sin+0x30>
 800a9aa:	ee10 0a10 	vmov	r0, s0
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f6 f8f2 	bl	8000b98 <__aeabi_d2iz>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d051      	beq.n	800aa5c <__kernel_sin+0xd4>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	4620      	mov	r0, r4
 800a9be:	4629      	mov	r1, r5
 800a9c0:	f7f5 fe3a 	bl	8000638 <__aeabi_dmul>
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	468b      	mov	fp, r1
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fe32 	bl	8000638 <__aeabi_dmul>
 800a9d4:	a341      	add	r3, pc, #260	; (adr r3, 800aadc <__kernel_sin+0x154>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4689      	mov	r9, r1
 800a9de:	4650      	mov	r0, sl
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	f7f5 fe29 	bl	8000638 <__aeabi_dmul>
 800a9e6:	a33f      	add	r3, pc, #252	; (adr r3, 800aae4 <__kernel_sin+0x15c>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f7f5 fc6c 	bl	80002c8 <__aeabi_dsub>
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	465b      	mov	r3, fp
 800a9f4:	f7f5 fe20 	bl	8000638 <__aeabi_dmul>
 800a9f8:	a33c      	add	r3, pc, #240	; (adr r3, 800aaec <__kernel_sin+0x164>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fc65 	bl	80002cc <__adddf3>
 800aa02:	4652      	mov	r2, sl
 800aa04:	465b      	mov	r3, fp
 800aa06:	f7f5 fe17 	bl	8000638 <__aeabi_dmul>
 800aa0a:	a33a      	add	r3, pc, #232	; (adr r3, 800aaf4 <__kernel_sin+0x16c>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fc5a 	bl	80002c8 <__aeabi_dsub>
 800aa14:	4652      	mov	r2, sl
 800aa16:	465b      	mov	r3, fp
 800aa18:	f7f5 fe0e 	bl	8000638 <__aeabi_dmul>
 800aa1c:	a337      	add	r3, pc, #220	; (adr r3, 800aafc <__kernel_sin+0x174>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc53 	bl	80002cc <__adddf3>
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	4606      	mov	r6, r0
 800aa2a:	460f      	mov	r7, r1
 800aa2c:	b9eb      	cbnz	r3, 800aa6a <__kernel_sin+0xe2>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4650      	mov	r0, sl
 800aa34:	4659      	mov	r1, fp
 800aa36:	f7f5 fdff 	bl	8000638 <__aeabi_dmul>
 800aa3a:	a325      	add	r3, pc, #148	; (adr r3, 800aad0 <__kernel_sin+0x148>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fc42 	bl	80002c8 <__aeabi_dsub>
 800aa44:	4642      	mov	r2, r8
 800aa46:	464b      	mov	r3, r9
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fc3a 	bl	80002cc <__adddf3>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	ec45 4b10 	vmov	d0, r4, r5
 800aa60:	b003      	add	sp, #12
 800aa62:	ecbd 8b04 	vpop	{d8-d9}
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <__kernel_sin+0x150>)
 800aa6c:	ec51 0b18 	vmov	r0, r1, d8
 800aa70:	2200      	movs	r2, #0
 800aa72:	f7f5 fde1 	bl	8000638 <__aeabi_dmul>
 800aa76:	4632      	mov	r2, r6
 800aa78:	ec41 0b19 	vmov	d9, r0, r1
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f5 fdd9 	bl	8000638 <__aeabi_dmul>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	ec51 0b19 	vmov	r0, r1, d9
 800aa8e:	f7f5 fc1b 	bl	80002c8 <__aeabi_dsub>
 800aa92:	4652      	mov	r2, sl
 800aa94:	465b      	mov	r3, fp
 800aa96:	f7f5 fdcf 	bl	8000638 <__aeabi_dmul>
 800aa9a:	ec53 2b18 	vmov	r2, r3, d8
 800aa9e:	f7f5 fc13 	bl	80002c8 <__aeabi_dsub>
 800aaa2:	a30b      	add	r3, pc, #44	; (adr r3, 800aad0 <__kernel_sin+0x148>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	460f      	mov	r7, r1
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f5 fdc2 	bl	8000638 <__aeabi_dmul>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fc06 	bl	80002cc <__adddf3>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fbfe 	bl	80002c8 <__aeabi_dsub>
 800aacc:	e7c4      	b.n	800aa58 <__kernel_sin+0xd0>
 800aace:	bf00      	nop
 800aad0:	55555549 	.word	0x55555549
 800aad4:	3fc55555 	.word	0x3fc55555
 800aad8:	3fe00000 	.word	0x3fe00000
 800aadc:	5acfd57c 	.word	0x5acfd57c
 800aae0:	3de5d93a 	.word	0x3de5d93a
 800aae4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aae8:	3e5ae5e6 	.word	0x3e5ae5e6
 800aaec:	57b1fe7d 	.word	0x57b1fe7d
 800aaf0:	3ec71de3 	.word	0x3ec71de3
 800aaf4:	19c161d5 	.word	0x19c161d5
 800aaf8:	3f2a01a0 	.word	0x3f2a01a0
 800aafc:	1110f8a6 	.word	0x1110f8a6
 800ab00:	3f811111 	.word	0x3f811111

0800ab04 <fabs>:
 800ab04:	ec51 0b10 	vmov	r0, r1, d0
 800ab08:	ee10 2a10 	vmov	r2, s0
 800ab0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab10:	ec43 2b10 	vmov	d0, r2, r3
 800ab14:	4770      	bx	lr
	...

0800ab18 <floor>:
 800ab18:	ec51 0b10 	vmov	r0, r1, d0
 800ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ab24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ab28:	2e13      	cmp	r6, #19
 800ab2a:	ee10 5a10 	vmov	r5, s0
 800ab2e:	ee10 8a10 	vmov	r8, s0
 800ab32:	460c      	mov	r4, r1
 800ab34:	dc32      	bgt.n	800ab9c <floor+0x84>
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	da14      	bge.n	800ab64 <floor+0x4c>
 800ab3a:	a333      	add	r3, pc, #204	; (adr r3, 800ac08 <floor+0xf0>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fbc4 	bl	80002cc <__adddf3>
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	f7f6 f806 	bl	8000b58 <__aeabi_dcmpgt>
 800ab4c:	b138      	cbz	r0, 800ab5e <floor+0x46>
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	da57      	bge.n	800ac02 <floor+0xea>
 800ab52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab56:	431d      	orrs	r5, r3
 800ab58:	d001      	beq.n	800ab5e <floor+0x46>
 800ab5a:	4c2d      	ldr	r4, [pc, #180]	; (800ac10 <floor+0xf8>)
 800ab5c:	2500      	movs	r5, #0
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	e025      	b.n	800abb0 <floor+0x98>
 800ab64:	4f2b      	ldr	r7, [pc, #172]	; (800ac14 <floor+0xfc>)
 800ab66:	4137      	asrs	r7, r6
 800ab68:	ea01 0307 	and.w	r3, r1, r7
 800ab6c:	4303      	orrs	r3, r0
 800ab6e:	d01f      	beq.n	800abb0 <floor+0x98>
 800ab70:	a325      	add	r3, pc, #148	; (adr r3, 800ac08 <floor+0xf0>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fba9 	bl	80002cc <__adddf3>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f7f5 ffeb 	bl	8000b58 <__aeabi_dcmpgt>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0eb      	beq.n	800ab5e <floor+0x46>
 800ab86:	2c00      	cmp	r4, #0
 800ab88:	bfbe      	ittt	lt
 800ab8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ab8e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ab92:	19a4      	addlt	r4, r4, r6
 800ab94:	ea24 0407 	bic.w	r4, r4, r7
 800ab98:	2500      	movs	r5, #0
 800ab9a:	e7e0      	b.n	800ab5e <floor+0x46>
 800ab9c:	2e33      	cmp	r6, #51	; 0x33
 800ab9e:	dd0b      	ble.n	800abb8 <floor+0xa0>
 800aba0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aba4:	d104      	bne.n	800abb0 <floor+0x98>
 800aba6:	ee10 2a10 	vmov	r2, s0
 800abaa:	460b      	mov	r3, r1
 800abac:	f7f5 fb8e 	bl	80002cc <__adddf3>
 800abb0:	ec41 0b10 	vmov	d0, r0, r1
 800abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	fa23 f707 	lsr.w	r7, r3, r7
 800abc4:	4207      	tst	r7, r0
 800abc6:	d0f3      	beq.n	800abb0 <floor+0x98>
 800abc8:	a30f      	add	r3, pc, #60	; (adr r3, 800ac08 <floor+0xf0>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fb7d 	bl	80002cc <__adddf3>
 800abd2:	2200      	movs	r2, #0
 800abd4:	2300      	movs	r3, #0
 800abd6:	f7f5 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 800abda:	2800      	cmp	r0, #0
 800abdc:	d0bf      	beq.n	800ab5e <floor+0x46>
 800abde:	2c00      	cmp	r4, #0
 800abe0:	da02      	bge.n	800abe8 <floor+0xd0>
 800abe2:	2e14      	cmp	r6, #20
 800abe4:	d103      	bne.n	800abee <floor+0xd6>
 800abe6:	3401      	adds	r4, #1
 800abe8:	ea25 0507 	bic.w	r5, r5, r7
 800abec:	e7b7      	b.n	800ab5e <floor+0x46>
 800abee:	2301      	movs	r3, #1
 800abf0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800abf4:	fa03 f606 	lsl.w	r6, r3, r6
 800abf8:	4435      	add	r5, r6
 800abfa:	4545      	cmp	r5, r8
 800abfc:	bf38      	it	cc
 800abfe:	18e4      	addcc	r4, r4, r3
 800ac00:	e7f2      	b.n	800abe8 <floor+0xd0>
 800ac02:	2500      	movs	r5, #0
 800ac04:	462c      	mov	r4, r5
 800ac06:	e7aa      	b.n	800ab5e <floor+0x46>
 800ac08:	8800759c 	.word	0x8800759c
 800ac0c:	7e37e43c 	.word	0x7e37e43c
 800ac10:	bff00000 	.word	0xbff00000
 800ac14:	000fffff 	.word	0x000fffff

0800ac18 <scalbn>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	ec55 4b10 	vmov	r4, r5, d0
 800ac1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ac22:	4606      	mov	r6, r0
 800ac24:	462b      	mov	r3, r5
 800ac26:	b99a      	cbnz	r2, 800ac50 <scalbn+0x38>
 800ac28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac2c:	4323      	orrs	r3, r4
 800ac2e:	d036      	beq.n	800ac9e <scalbn+0x86>
 800ac30:	4b39      	ldr	r3, [pc, #228]	; (800ad18 <scalbn+0x100>)
 800ac32:	4629      	mov	r1, r5
 800ac34:	ee10 0a10 	vmov	r0, s0
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f7f5 fcfd 	bl	8000638 <__aeabi_dmul>
 800ac3e:	4b37      	ldr	r3, [pc, #220]	; (800ad1c <scalbn+0x104>)
 800ac40:	429e      	cmp	r6, r3
 800ac42:	4604      	mov	r4, r0
 800ac44:	460d      	mov	r5, r1
 800ac46:	da10      	bge.n	800ac6a <scalbn+0x52>
 800ac48:	a32b      	add	r3, pc, #172	; (adr r3, 800acf8 <scalbn+0xe0>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	e03a      	b.n	800acc6 <scalbn+0xae>
 800ac50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ac54:	428a      	cmp	r2, r1
 800ac56:	d10c      	bne.n	800ac72 <scalbn+0x5a>
 800ac58:	ee10 2a10 	vmov	r2, s0
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	4629      	mov	r1, r5
 800ac60:	f7f5 fb34 	bl	80002cc <__adddf3>
 800ac64:	4604      	mov	r4, r0
 800ac66:	460d      	mov	r5, r1
 800ac68:	e019      	b.n	800ac9e <scalbn+0x86>
 800ac6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac6e:	460b      	mov	r3, r1
 800ac70:	3a36      	subs	r2, #54	; 0x36
 800ac72:	4432      	add	r2, r6
 800ac74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac78:	428a      	cmp	r2, r1
 800ac7a:	dd08      	ble.n	800ac8e <scalbn+0x76>
 800ac7c:	2d00      	cmp	r5, #0
 800ac7e:	a120      	add	r1, pc, #128	; (adr r1, 800ad00 <scalbn+0xe8>)
 800ac80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac84:	da1c      	bge.n	800acc0 <scalbn+0xa8>
 800ac86:	a120      	add	r1, pc, #128	; (adr r1, 800ad08 <scalbn+0xf0>)
 800ac88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac8c:	e018      	b.n	800acc0 <scalbn+0xa8>
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	dd08      	ble.n	800aca4 <scalbn+0x8c>
 800ac92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac9e:	ec45 4b10 	vmov	d0, r4, r5
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aca8:	da19      	bge.n	800acde <scalbn+0xc6>
 800acaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800acae:	429e      	cmp	r6, r3
 800acb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800acb4:	dd0a      	ble.n	800accc <scalbn+0xb4>
 800acb6:	a112      	add	r1, pc, #72	; (adr r1, 800ad00 <scalbn+0xe8>)
 800acb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e2      	bne.n	800ac86 <scalbn+0x6e>
 800acc0:	a30f      	add	r3, pc, #60	; (adr r3, 800ad00 <scalbn+0xe8>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fcb7 	bl	8000638 <__aeabi_dmul>
 800acca:	e7cb      	b.n	800ac64 <scalbn+0x4c>
 800accc:	a10a      	add	r1, pc, #40	; (adr r1, 800acf8 <scalbn+0xe0>)
 800acce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0b8      	beq.n	800ac48 <scalbn+0x30>
 800acd6:	a10e      	add	r1, pc, #56	; (adr r1, 800ad10 <scalbn+0xf8>)
 800acd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acdc:	e7b4      	b.n	800ac48 <scalbn+0x30>
 800acde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ace2:	3236      	adds	r2, #54	; 0x36
 800ace4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ace8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800acec:	4620      	mov	r0, r4
 800acee:	4b0c      	ldr	r3, [pc, #48]	; (800ad20 <scalbn+0x108>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	e7e8      	b.n	800acc6 <scalbn+0xae>
 800acf4:	f3af 8000 	nop.w
 800acf8:	c2f8f359 	.word	0xc2f8f359
 800acfc:	01a56e1f 	.word	0x01a56e1f
 800ad00:	8800759c 	.word	0x8800759c
 800ad04:	7e37e43c 	.word	0x7e37e43c
 800ad08:	8800759c 	.word	0x8800759c
 800ad0c:	fe37e43c 	.word	0xfe37e43c
 800ad10:	c2f8f359 	.word	0xc2f8f359
 800ad14:	81a56e1f 	.word	0x81a56e1f
 800ad18:	43500000 	.word	0x43500000
 800ad1c:	ffff3cb0 	.word	0xffff3cb0
 800ad20:	3c900000 	.word	0x3c900000

0800ad24 <_getpid>:
 800ad24:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <_getpid+0xc>)
 800ad26:	2258      	movs	r2, #88	; 0x58
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	4770      	bx	lr
 800ad30:	200008fc 	.word	0x200008fc

0800ad34 <_kill>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <_kill+0xc>)
 800ad36:	2258      	movs	r2, #88	; 0x58
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3e:	4770      	bx	lr
 800ad40:	200008fc 	.word	0x200008fc

0800ad44 <_exit>:
 800ad44:	e7fe      	b.n	800ad44 <_exit>
	...

0800ad48 <_init>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	bf00      	nop
 800ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4e:	bc08      	pop	{r3}
 800ad50:	469e      	mov	lr, r3
 800ad52:	4770      	bx	lr

0800ad54 <_fini>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	bf00      	nop
 800ad58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5a:	bc08      	pop	{r3}
 800ad5c:	469e      	mov	lr, r3
 800ad5e:	4770      	bx	lr
