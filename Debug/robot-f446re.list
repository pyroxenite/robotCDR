
robot-f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800cef0  0800cef0  0001cef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5e8  0800d5e8  00020488  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5e8  0800d5e8  0001d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f0  0800d5f0  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5f4  0800d5f4  0001d5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  20000000  0800d5f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000488  0800da80  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  0800da80  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4bd  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004204  00000000  00000000  0003f975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00043b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00044dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002796f  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e82  00000000  00000000  0006d7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e08f2  00000000  00000000  00086651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  00166f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016cefc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016cf38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000488 	.word	0x20000488
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ced8 	.word	0x0800ced8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000048c 	.word	0x2000048c
 800020c:	0800ced8 	.word	0x0800ced8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AX12_Init>:
#include <AX12.h>


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	715a      	strb	r2, [r3, #5]

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fc3a 	bl	800088c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fde2 	bl	8000be8 <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	461a      	mov	r2, r3
 800104c:	2106      	movs	r1, #6
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9c2 	bl	80013d8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001054:	8abb      	ldrh	r3, [r7, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	2108      	movs	r1, #8
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9bc 	bl	80013d8 <AX12_sendTram2Byte>

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2c54bf16 	.word	0x2c54bf16
 800106c:	3fd2c4b1 	.word	0x3fd2c4b1

08001070 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <AX12_setMaxTorque+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fbf9 	bl	800088c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	210e      	movs	r1, #14
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f991 	bl	80013d8 <AX12_sendTram2Byte>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	905eab89 	.word	0x905eab89
 80010c4:	3fb90641 	.word	0x3fb90641

080010c8 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2118      	movs	r1, #24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f966 	bl	80013ac <AX12_sendTram1Byte>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa2e 	bl	8000564 <__aeabi_i2d>
 8001108:	a30b      	add	r3, pc, #44	; (adr r3, 8001138 <AX12_setPosition+0x50>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbbd 	bl	800088c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	211e      	movs	r1, #30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f955 	bl	80013d8 <AX12_sendTram2Byte>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2c54bf16 	.word	0x2c54bf16
 800113c:	3fd2c4b1 	.word	0x3fd2c4b1

08001140 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa02 	bl	8000564 <__aeabi_i2d>
 8001160:	a30b      	add	r3, pc, #44	; (adr r3, 8001190 <AX12_setMovingSpeed+0x50>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb91 	bl	800088c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd39 	bl	8000be8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	2120      	movs	r1, #32
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f929 	bl	80013d8 <AX12_sendTram2Byte>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c83ed809 	.word	0xc83ed809
 8001194:	3fbc8721 	.word	0x3fbc8721

08001198 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001198:	b408      	push	{r3}
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
 80011ac:	466b      	mov	r3, sp
 80011ae:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80011b6:	78fc      	ldrb	r4, [r7, #3]
 80011b8:	4623      	mov	r3, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	b2e0      	uxtb	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	00cb      	lsls	r3, r1, #3
 80011e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011e8:	00c2      	lsls	r2, r0, #3
 80011ea:	4623      	mov	r3, r4
 80011ec:	3307      	adds	r3, #7
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ebad 0d03 	sub.w	sp, sp, r3
 80011f6:	ab02      	add	r3, sp, #8
 80011f8:	3300      	adds	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001210:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001214:	3302      	adds	r3, #2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e00b      	b.n	8001240 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3301      	adds	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ee      	bcc.n	8001228 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 800124a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800124e:	2b03      	cmp	r3, #3
 8001250:	d867      	bhi.n	8001322 <AX12_sendData+0x18a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <AX12_sendData+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001291 	.word	0x08001291
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012ed 	.word	0x080012ed
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7898      	ldrb	r0, [r3, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	78d9      	ldrb	r1, [r3, #3]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	1e5c      	subs	r4, r3, #1
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f000 f861 	bl	8001348 <AX12_calculChecksum>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	e049      	b.n	8001324 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7898      	ldrb	r0, [r3, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	78d9      	ldrb	r1, [r3, #3]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795d      	ldrb	r5, [r3, #5]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	1e5c      	subs	r4, r3, #1
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	f000 f84b 	bl	8001348 <AX12_calculChecksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	551a      	strb	r2, [r3, r4]
 80012ba:	e033      	b.n	8001324 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7898      	ldrb	r0, [r3, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791d      	ldrb	r5, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	795e      	ldrb	r6, [r3, #5]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	1e54      	subs	r4, r2, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4633      	mov	r3, r6
 80012dc:	462a      	mov	r2, r5
 80012de:	f000 f833 	bl	8001348 <AX12_calculChecksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	551a      	strb	r2, [r3, r4]
 80012ea:	e01b      	b.n	8001324 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7898      	ldrb	r0, [r3, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	78dd      	ldrb	r5, [r3, #3]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	791e      	ldrb	r6, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 c005 	ldrb.w	ip, [r3, #5]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	79d2      	ldrb	r2, [r2, #7]
 8001306:	78f9      	ldrb	r1, [r7, #3]
 8001308:	1e4c      	subs	r4, r1, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4663      	mov	r3, ip
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	f000 f818 	bl	8001348 <AX12_calculChecksum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	551a      	strb	r2, [r3, r4]
 8001320:	e000      	b.n	8001324 <AX12_sendData+0x18c>
	default : break;
 8001322:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	b29a      	uxth	r2, r3
 800132e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001332:	f005 fd16 	bl	8006d62 <HAL_UART_Transmit>
 8001336:	46c5      	mov	sp, r8
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b001      	add	sp, #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b29a      	uxth	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	7e3b      	ldrb	r3, [r7, #24]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	43db      	mvns	r3, r3
 8001396:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2203      	movs	r2, #3
 80013c8:	2108      	movs	r1, #8
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee4 	bl	8001198 <AX12_sendData>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bf9      	ldrb	r1, [r7, #15]
 80013fa:	9102      	str	r1, [sp, #8]
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2203      	movs	r2, #3
 8001404:	2109      	movs	r1, #9
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fec6 	bl	8001198 <AX12_sendData>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <DRV8825_init>:
#include "DRV8825.h"

void DRV8825_init(Moteur *drv8825,uint16_t PIN_EN, GPIO_TypeDef * GPIO_EN, uint16_t PIN_DIR, GPIO_TypeDef * GPIO_DIR,TIM_HandleTypeDef* timer, uint8_t chanel){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
	/*****************************************
	 * nous récupérons les numéros des pins  *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->pin_EN = PIN_EN;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	897a      	ldrh	r2, [r7, #10]
 800142c:	815a      	strh	r2, [r3, #10]
	drv8825->pin_DIR = PIN_DIR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	801a      	strh	r2, [r3, #0]
	/*****************************************
	 * nous récupérons les GPIO des pins     *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->gpio_EN= GPIO_EN;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
	drv8825->gpio_DIR= GPIO_DIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]

	/**********************************************
	 * nous initialisatons le timer et récupérons *
	 * à quelle chanel il est racroché 			  *
	 **********************************************/
	drv8825->timer = timer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
	drv8825->chanel = chanel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800144c:	751a      	strb	r2, [r3, #20]

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DRV8825_setDir>:

void DRV8825_setDir(Moteur* drv8825,uint8_t dir){
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(drv8825->gpio_DIR,drv8825->pin_DIR,dir);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6858      	ldr	r0, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	f003 fc9b 	bl	8004dac <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <DRV8825_setStart>:

void DRV8825_setStart(Moteur* drv8825,uint8_t enable){
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(drv8825->gpio_EN,drv8825->pin_EN,enable);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d8      	ldr	r0, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	895b      	ldrh	r3, [r3, #10]
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	f003 fc89 	bl	8004dac <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <DRV8825_moveMotorLineSpeed>:
	rpm = rpm/M_TO_S;
	uint16_t f = PAS*rpm;
	DRV8825_setFrequency(drv8825, f);
}

void DRV8825_moveMotorLineSpeed(Moteur* drv8825,float vitesse){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	ed87 0a00 	vstr	s0, [r7]
	vitesse= vitesse*1000;
 80014b4:	edd7 7a00 	vldr	s15, [r7]
 80014b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001510 <DRV8825_moveMotorLineSpeed+0x68>
 80014bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c0:	edc7 7a00 	vstr	s15, [r7]
	uint16_t f = (PAS*vitesse)/(2*M_PI*RAYON);
 80014c4:	edd7 7a00 	vldr	s15, [r7]
 80014c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001514 <DRV8825_moveMotorLineSpeed+0x6c>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_f2d>
 80014d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001508 <DRV8825_moveMotorLineSpeed+0x60>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9d5 	bl	800088c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb7d 	bl	8000be8 <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
	DRV8825_setFrequency(drv8825, f);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f80e 	bl	8001518 <DRV8825_setFrequency>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	71f1350d 	.word	0x71f1350d
 800150c:	40643451 	.word	0x40643451
 8001510:	447a0000 	.word	0x447a0000
 8001514:	43480000 	.word	0x43480000

08001518 <DRV8825_setFrequency>:

void DRV8825_setFrequency(Moteur* drv8825, uint16_t freq){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if(freq != 0){
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <DRV8825_setFrequency+0x2a>
	drv8825->timer->Init.Prescaler = 179;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	22b3      	movs	r2, #179	; 0xb3
 8001530:	605a      	str	r2, [r3, #4]
	drv8825->timer->Init.Period = (uint32_t)1000000/freq;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4945      	ldr	r1, [pc, #276]	; (8001650 <DRV8825_setFrequency+0x138>)
 800153a:	fbb1 f2f2 	udiv	r2, r1, r2
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e009      	b.n	8001556 <DRV8825_setFrequency+0x3e>
	}
	else{
		drv8825->timer->Init.Prescaler = 0xFFFE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800154a:	605a      	str	r2, [r3, #4]
		drv8825->timer->Init.Period = 0xFFFE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001554:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(drv8825->timer) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f9fa 	bl	8005954 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <DRV8825_setFrequency+0x52>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001566:	f001 fa91 	bl	8002a8c <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(drv8825->timer) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fab0 	bl	8005ad4 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <DRV8825_setFrequency+0x66>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 800157a:	f001 fa87 	bl	8002a8c <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(drv8825->timer, drv8825->chanel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7d1b      	ldrb	r3, [r3, #20]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f004 fafd 	bl	8005b88 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch(drv8825->chanel){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7d1b      	ldrb	r3, [r3, #20]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d858      	bhi.n	8001648 <DRV8825_setFrequency+0x130>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DRV8825_setFrequency+0x84>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001649 	.word	0x08001649
 80015a4:	08001649 	.word	0x08001649
 80015a8:	08001649 	.word	0x08001649
 80015ac:	080015ef 	.word	0x080015ef
 80015b0:	08001649 	.word	0x08001649
 80015b4:	08001649 	.word	0x08001649
 80015b8:	08001649 	.word	0x08001649
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	08001649 	.word	0x08001649
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	0800162b 	.word	0x0800162b
	case(TIM_CHANNEL_1):drv8825->timer->Instance->CCR1 = (50*drv8825->timer->Init.Period)/100;break;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2232      	movs	r2, #50	; 0x32
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	491c      	ldr	r1, [pc, #112]	; (8001654 <DRV8825_setFrequency+0x13c>)
 80015e4:	fba1 1202 	umull	r1, r2, r1, r2
 80015e8:	0952      	lsrs	r2, r2, #5
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e02c      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_2):drv8825->timer->Instance->CCR2 = (50*drv8825->timer->Init.Period)/100;break;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001602:	fba1 1202 	umull	r1, r2, r1, r2
 8001606:	0952      	lsrs	r2, r2, #5
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
 800160a:	e01d      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_3):drv8825->timer->Instance->CCR3 = (50*drv8825->timer->Init.Period)/100;break;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001620:	fba1 1202 	umull	r1, r2, r1, r2
 8001624:	0952      	lsrs	r2, r2, #5
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	e00e      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_4):drv8825->timer->Instance->CCR4 = (50*drv8825->timer->Init.Period)/100;break;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2232      	movs	r2, #50	; 0x32
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <DRV8825_setFrequency+0x13c>)
 800163e:	fba1 1202 	umull	r1, r2, r1, r2
 8001642:	0952      	lsrs	r2, r2, #5
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	bf00      	nop
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	000f4240 	.word	0x000f4240
 8001654:	51eb851f 	.word	0x51eb851f

08001658 <actionneursUpdate>:
#include "actionneurs.h"

void actionneursUpdate(CONSIGNE strategie){
 8001658:	b084      	sub	sp, #16
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	f107 0c10 	add.w	ip, r7, #16
 8001664:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Bras
	if(strategie.bras == FALSE){
 8001668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <actionneursUpdate+0x1e>
		raiseBras(&bras);
 800166e:	481e      	ldr	r0, [pc, #120]	; (80016e8 <actionneursUpdate+0x90>)
 8001670:	f000 f92a 	bl	80018c8 <raiseBras>
 8001674:	e005      	b.n	8001682 <actionneursUpdate+0x2a>
	}
	else if (strategie.bras == TRUE){
 8001676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001678:	2b01      	cmp	r3, #1
 800167a:	d102      	bne.n	8001682 <actionneursUpdate+0x2a>
		deployBras(&bras);
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <actionneursUpdate+0x90>)
 800167e:	f000 f931 	bl	80018e4 <deployBras>
	}

	// Pinces
	for(int i=0; i<NB_AX12_BRAS; i++){
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	e023      	b.n	80016d0 <actionneursUpdate+0x78>
		if(strategie.pinces[i] == FALSE){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	f107 0210 	add.w	r2, r7, #16
 8001692:	4413      	add	r3, r2
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <actionneursUpdate+0x52>
			releasObject(&pinces[i]);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <actionneursUpdate+0x94>)
 80016a0:	4413      	add	r3, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f88d 	bl	80017c2 <releasObject>
 80016a8:	e00f      	b.n	80016ca <actionneursUpdate+0x72>
		}
		else if (strategie.pinces[i] == TRUE){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3304      	adds	r3, #4
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f107 0210 	add.w	r2, r7, #16
 80016b4:	4413      	add	r3, r2
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <actionneursUpdate+0x72>
			catchObject(&pinces[i]);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <actionneursUpdate+0x94>)
 80016c2:	4413      	add	r3, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f86f 	bl	80017a8 <catchObject>
	for(int i=0; i<NB_AX12_BRAS; i++){
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	ddd8      	ble.n	8001688 <actionneursUpdate+0x30>
		}
	}

}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e2:	b004      	add	sp, #16
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000051c 	.word	0x2000051c
 80016ec:	2000052c 	.word	0x2000052c

080016f0 <initPinces>:

/* Pinces */

uint8_t id_pinces[4] = {3,7,1,2}; // 1,2,3,7
void initPinces(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e03f      	b.n	800177c <initPinces+0x8c>
		AX12_Init(&pinces[i],&huart3,id_pinces[i],BR_250K);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4a23      	ldr	r2, [pc, #140]	; (8001790 <initPinces+0xa0>)
 8001702:	1898      	adds	r0, r3, r2
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <initPinces+0xa4>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	2307      	movs	r3, #7
 800170e:	4922      	ldr	r1, [pc, #136]	; (8001798 <initPinces+0xa8>)
 8001710:	f7ff fc56 	bl	8000fc0 <AX12_Init>
		AX12_setMaxTorque(&pinces[i],100);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <initPinces+0xa0>)
 800171a:	4413      	add	r3, r2
 800171c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800179c <initPinces+0xac>
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fca5 	bl	8001070 <AX12_setMaxTorque>
		AX12_setRangeAngle(&pinces[i], ANGLE_PINCE_CATCH,ANGLE_STARTUP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4a19      	ldr	r2, [pc, #100]	; (8001790 <initPinces+0xa0>)
 800172c:	4413      	add	r3, r2
 800172e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80017a0 <initPinces+0xb0>
 8001732:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc5e 	bl	8000ff8 <AX12_setRangeAngle>
		AX12_setMovingSpeed(&pinces[i], 80);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <initPinces+0xa0>)
 8001742:	4413      	add	r3, r2
 8001744:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80017a4 <initPinces+0xb4>
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fcf9 	bl	8001140 <AX12_setMovingSpeed>
		AX12_TorqueE_D(&pinces[i],TRUE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <initPinces+0xa0>)
 8001754:	4413      	add	r3, r2
 8001756:	2101      	movs	r1, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fcb5 	bl	80010c8 <AX12_TorqueE_D>
		HAL_Delay(250);
 800175e:	20fa      	movs	r0, #250	; 0xfa
 8001760:	f002 fbec 	bl	8003f3c <HAL_Delay>
		AX12_setPosition(&pinces[i], ANGLE_STARTUP);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <initPinces+0xa0>)
 800176a:	4413      	add	r3, r2
 800176c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80017a0 <initPinces+0xb0>
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fcb9 	bl	80010e8 <AX12_setPosition>
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3301      	adds	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	ddbc      	ble.n	80016fc <initPinces+0xc>
	}
	HAL_Delay(250);
 8001782:	20fa      	movs	r0, #250	; 0xfa
 8001784:	f002 fbda 	bl	8003f3c <HAL_Delay>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000052c 	.word	0x2000052c
 8001794:	20000000 	.word	0x20000000
 8001798:	200008e0 	.word	0x200008e0
 800179c:	42c80000 	.word	0x42c80000
 80017a0:	42dc0000 	.word	0x42dc0000
 80017a4:	42a00000 	.word	0x42a00000

080017a8 <catchObject>:

void catchObject(AX12 *ax12){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_CATCH);
 80017b0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fc97 	bl	80010e8 <AX12_setPosition>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <releasObject>:
void releasObject(AX12* ax12){
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_RELEASE);
 80017ca:	eeb3 0a06 	vmov.f32	s0, #54	; 0x41b00000  22.0
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fc8a 	bl	80010e8 <AX12_setPosition>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <initFlag>:

/* Pavillons */

void initFlag(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	AX12_Init(&flag,&huart3,9,BR_250K); // 9
 80017e0:	2307      	movs	r3, #7
 80017e2:	2209      	movs	r2, #9
 80017e4:	4912      	ldr	r1, [pc, #72]	; (8001830 <initFlag+0x54>)
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <initFlag+0x58>)
 80017e8:	f7ff fbea 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&flag,100);
 80017ec:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001838 <initFlag+0x5c>
 80017f0:	4810      	ldr	r0, [pc, #64]	; (8001834 <initFlag+0x58>)
 80017f2:	f7ff fc3d 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&flag, ANGLE_FLAG_DEPLOY,ANGLE_FLAG_REPOS);
 80017f6:	eddf 0a11 	vldr	s1, [pc, #68]	; 800183c <initFlag+0x60>
 80017fa:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <initFlag+0x58>)
 8001800:	f7ff fbfa 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&flag, 80);
 8001804:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001840 <initFlag+0x64>
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <initFlag+0x58>)
 800180a:	f7ff fc99 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&flag,TRUE);
 800180e:	2101      	movs	r1, #1
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <initFlag+0x58>)
 8001812:	f7ff fc59 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 8001816:	20fa      	movs	r0, #250	; 0xfa
 8001818:	f002 fb90 	bl	8003f3c <HAL_Delay>
	AX12_setPosition(&flag, ANGLE_FLAG_REPOS);
 800181c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800183c <initFlag+0x60>
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <initFlag+0x58>)
 8001822:	f7ff fc61 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 8001826:	20fa      	movs	r0, #250	; 0xfa
 8001828:	f002 fb88 	bl	8003f3c <HAL_Delay>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200008e0 	.word	0x200008e0
 8001834:	20000524 	.word	0x20000524
 8001838:	42c80000 	.word	0x42c80000
 800183c:	42c00000 	.word	0x42c00000
 8001840:	42a00000 	.word	0x42a00000

08001844 <raiseFlag>:

void raiseFlag(){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
 8001848:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <raiseFlag+0x14>)
 800184e:	f7ff fc4b 	bl	80010e8 <AX12_setPosition>
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000524 	.word	0x20000524

0800185c <initBras>:
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
}

/* Bras */

void initBras(){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	AX12_Init(&bras,&huart3,4,BR_250K);
 8001860:	2307      	movs	r3, #7
 8001862:	2204      	movs	r2, #4
 8001864:	4912      	ldr	r1, [pc, #72]	; (80018b0 <initBras+0x54>)
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <initBras+0x58>)
 8001868:	f7ff fbaa 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&bras,100);
 800186c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80018b8 <initBras+0x5c>
 8001870:	4810      	ldr	r0, [pc, #64]	; (80018b4 <initBras+0x58>)
 8001872:	f7ff fbfd 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&bras, 0,ANGLE_STARTUP);
 8001876:	eddf 0a11 	vldr	s1, [pc, #68]	; 80018bc <initBras+0x60>
 800187a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80018c0 <initBras+0x64>
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <initBras+0x58>)
 8001880:	f7ff fbba 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&bras, 80);
 8001884:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80018c4 <initBras+0x68>
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <initBras+0x58>)
 800188a:	f7ff fc59 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&bras,TRUE);
 800188e:	2101      	movs	r1, #1
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <initBras+0x58>)
 8001892:	f7ff fc19 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 8001896:	20fa      	movs	r0, #250	; 0xfa
 8001898:	f002 fb50 	bl	8003f3c <HAL_Delay>
	AX12_setPosition(&bras, ANGLE_STARTUP);
 800189c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80018bc <initBras+0x60>
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <initBras+0x58>)
 80018a2:	f7ff fc21 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 80018a6:	20fa      	movs	r0, #250	; 0xfa
 80018a8:	f002 fb48 	bl	8003f3c <HAL_Delay>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200008e0 	.word	0x200008e0
 80018b4:	2000051c 	.word	0x2000051c
 80018b8:	42c80000 	.word	0x42c80000
 80018bc:	42dc0000 	.word	0x42dc0000
 80018c0:	00000000 	.word	0x00000000
 80018c4:	42a00000 	.word	0x42a00000

080018c8 <raiseBras>:

void raiseBras(){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_RAISE);
 80018cc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80018dc <raiseBras+0x14>
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <raiseBras+0x18>)
 80018d2:	f7ff fc09 	bl	80010e8 <AX12_setPosition>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	42dc0000 	.word	0x42dc0000
 80018e0:	2000051c 	.word	0x2000051c

080018e4 <deployBras>:

void deployBras(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_DEPLOY);
 80018e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <deployBras+0x14>)
 80018ee:	f7ff fbfb 	bl	80010e8 <AX12_setPosition>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000051c 	.word	0x2000051c

080018fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_ADC1_Init+0x98>)
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <MX_ADC1_Init+0x9c>)
 8001912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_ADC1_Init+0x98>)
 8001916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_ADC1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_ADC1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_ADC1_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_ADC1_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_ADC1_Init+0x98>)
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <MX_ADC1_Init+0xa0>)
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_ADC1_Init+0x98>)
 800194a:	2201      	movs	r2, #1
 800194c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_ADC1_Init+0x98>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_ADC1_Init+0x98>)
 800195e:	f002 fb11 	bl	8003f84 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001968:	f001 f890 	bl	8002a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800196c:	2304      	movs	r3, #4
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_ADC1_Init+0x98>)
 800197e:	f002 fcaf 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001988:	f001 f880 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000550 	.word	0x20000550
 8001998:	40012000 	.word	0x40012000
 800199c:	0f000001 	.word	0x0f000001

080019a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_ADC_MspInit+0x7c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d127      	bne.n	8001a12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Tirette_Alternative_Pin;
 80019fa:	2310      	movs	r3, #16
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Tirette_Alternative_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_ADC_MspInit+0x84>)
 8001a0e:	f003 f839 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012000 	.word	0x40012000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <setMotors>:
double initialAngleError = 0;

double leftMotorValues[FIR_ORDER] = {0};
double rightMotorValues[FIR_ORDER] = {0};

void setMotors(double left, double right) {
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a32:	ed87 1b00 	vstr	d1, [r7]
    // vitesses absolues
    DRV8825_moveMotorLineSpeed(&moteur_G, fabs(left));
 8001a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a3a:	f7ff f8f5 	bl	8000c28 <__aeabi_d2f>
 8001a3e:	ee07 0a90 	vmov	s15, r0
 8001a42:	eef0 7ae7 	vabs.f32	s15, s15
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	4830      	ldr	r0, [pc, #192]	; (8001b0c <setMotors+0xe4>)
 8001a4c:	f7ff fd2c 	bl	80014a8 <DRV8825_moveMotorLineSpeed>
    DRV8825_moveMotorLineSpeed(&moteur_D, fabs(right));
 8001a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a54:	f7ff f8e8 	bl	8000c28 <__aeabi_d2f>
 8001a58:	ee07 0a90 	vmov	s15, r0
 8001a5c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	482a      	ldr	r0, [pc, #168]	; (8001b10 <setMotors+0xe8>)
 8001a66:	f7ff fd1f 	bl	80014a8 <DRV8825_moveMotorLineSpeed>

    // directions
    DRV8825_setDir(&moteur_G, (left < 0)?BACKWARD:FORWARD);
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a7a:	f7ff f84f 	bl	8000b1c <__aeabi_dcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <setMotors+0x60>
 8001a84:	2300      	movs	r3, #0
 8001a86:	461c      	mov	r4, r3
 8001a88:	b2e3      	uxtb	r3, r4
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	481d      	ldr	r0, [pc, #116]	; (8001b0c <setMotors+0xe4>)
 8001a96:	f7ff fce0 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, (right < 0)?BACKWARD:FORWARD);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aaa:	f7ff f837 	bl	8000b1c <__aeabi_dcmplt>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <setMotors+0x90>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	b2e3      	uxtb	r3, r4
 8001aba:	f083 0301 	eor.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <setMotors+0xe8>)
 8001ac6:	f7ff fcc8 	bl	800145a <DRV8825_setDir>

    // activer ou non les moteurs
    if (left == 0 && right == 0)
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad6:	f7ff f817 	bl	8000b08 <__aeabi_dcmpeq>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <setMotors+0xd4>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aec:	f7ff f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <setMotors+0xd4>
        stopMoteurs();
 8001af6:	f001 f803 	bl	8002b00 <stopMoteurs>
 8001afa:	e002      	b.n	8001b02 <setMotors+0xda>
    else
    	startMoteurs();
 8001afc:	f001 f810 	bl	8002b20 <startMoteurs>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000668 	.word	0x20000668
 8001b10:	20000650 	.word	0x20000650

08001b14 <setMotorsSmoothly>:

void setMotorsSmoothly() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	ed2d 8b02 	vpush	{d8}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
	double left = 0, right = 0;
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (int i=0; i<FIR_ORDER; i++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e01e      	b.n	8001b7a <setMotorsSmoothly+0x66>
		left += leftMotorValues[i];
 8001b3c:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <setMotorsSmoothly+0xb8>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b4c:	f7fe fbbe 	bl	80002cc <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9c7 2304 	strd	r2, r3, [r7, #16]
		right += rightMotorValues[i];
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <setMotorsSmoothly+0xbc>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b68:	f7fe fbb0 	bl	80002cc <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (int i=0; i<FIR_ORDER; i++) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	dddd      	ble.n	8001b3c <setMotorsSmoothly+0x28>
	}
	setMotors(left/FIR_ORDER, right/FIR_ORDER);
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <setMotorsSmoothly+0xc0>)
 8001b86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8a:	f7fe fe7f 	bl	800088c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	ec43 2b18 	vmov	d8, r2, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <setMotorsSmoothly+0xc0>)
 8001b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba0:	f7fe fe74 	bl	800088c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
 8001bac:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb0:	eef0 1a67 	vmov.f32	s3, s15
 8001bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8001bb8:	eef0 0a68 	vmov.f32	s1, s17
 8001bbc:	f7ff ff34 	bl	8001a28 <setMotors>
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	ecbd 8b02 	vpop	{d8}
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200004b0 	.word	0x200004b0
 8001bd0:	200004d8 	.word	0x200004d8
 8001bd4:	40140000 	.word	0x40140000

08001bd8 <setSmooth>:

void setSmooth(double left, double right) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0b02 	vstr	d0, [r7, #8]
 8001be2:	ed87 1b00 	vstr	d1, [r7]
	for (int i=0; i<FIR_ORDER-1; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e01c      	b.n	8001c26 <setSmooth+0x4e>
		leftMotorValues[i] = leftMotorValues[i+1];
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <setSmooth+0x74>)
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <setSmooth+0x74>)
 8001bfc:	6979      	ldr	r1, [r7, #20]
 8001bfe:	00c9      	lsls	r1, r1, #3
 8001c00:	4401      	add	r1, r0
 8001c02:	e9c1 2300 	strd	r2, r3, [r1]
		rightMotorValues[i] = rightMotorValues[i+1];
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <setSmooth+0x78>)
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	480e      	ldr	r0, [pc, #56]	; (8001c50 <setSmooth+0x78>)
 8001c16:	6979      	ldr	r1, [r7, #20]
 8001c18:	00c9      	lsls	r1, r1, #3
 8001c1a:	4401      	add	r1, r0
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0; i<FIR_ORDER-1; i++) {
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	dddf      	ble.n	8001bec <setSmooth+0x14>
	}
	leftMotorValues[FIR_ORDER-1] = left;
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <setSmooth+0x74>)
 8001c2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c32:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rightMotorValues[FIR_ORDER-1] = right;
 8001c36:	4906      	ldr	r1, [pc, #24]	; (8001c50 <setSmooth+0x78>)
 8001c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	200004b0 	.word	0x200004b0
 8001c50:	200004d8 	.word	0x200004d8

08001c54 <smoothReset>:

void smoothReset() {
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
	for (int i=0; i<FIR_ORDER; i++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e016      	b.n	8001c8e <smoothReset+0x3a>
		leftMotorValues[i] = 0;
 8001c60:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <smoothReset+0x50>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	18d1      	adds	r1, r2, r3
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
		rightMotorValues[i] = 0;
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <smoothReset+0x54>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	18d1      	adds	r1, r2, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0; i<FIR_ORDER; i++) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	dde5      	ble.n	8001c60 <smoothReset+0xc>
	}
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	200004b0 	.word	0x200004b0
 8001ca8:	200004d8 	.word	0x200004d8

08001cac <speedCurve>:

double speedCurve(double progress) {
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	ed87 0b00 	vstr	d0, [r7]
    double speed = -4*progress*(progress-1);
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <speedCurve+0x78>)
 8001cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc0:	f7fe fcba 	bl	8000638 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <speedCurve+0x7c>)
 8001cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd6:	f7fe faf7 	bl	80002c8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fca9 	bl	8000638 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (speed<0)?0:speed;
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfa:	f7fe ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <speedCurve+0x62>
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e001      	b.n	8001d12 <speedCurve+0x66>
 8001d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d16:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1a:	eef0 0a67 	vmov.f32	s1, s15
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	c0100000 	.word	0xc0100000
 8001d28:	3ff00000 	.word	0x3ff00000
 8001d2c:	00000000 	.word	0x00000000

08001d30 <toZeroTwoPi>:

double toZeroTwoPi(double angle) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0b00 	vstr	d0, [r7]
    return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001d3a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001d88 <toZeroTwoPi+0x58>
 8001d3e:	ed97 0b00 	vldr	d0, [r7]
 8001d42:	f008 fdc3 	bl	800a8cc <fmod>
 8001d46:	ec51 0b10 	vmov	r0, r1, d0
 8001d4a:	a30f      	add	r3, pc, #60	; (adr r3, 8001d88 <toZeroTwoPi+0x58>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fabc 	bl	80002cc <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	ec43 2b17 	vmov	d7, r2, r3
 8001d5c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001d88 <toZeroTwoPi+0x58>
 8001d60:	eeb0 0a47 	vmov.f32	s0, s14
 8001d64:	eef0 0a67 	vmov.f32	s1, s15
 8001d68:	f008 fdb0 	bl	800a8cc <fmod>
 8001d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d70:	eef0 7a60 	vmov.f32	s15, s1
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	54442d18 	.word	0x54442d18
 8001d8c:	401921fb 	.word	0x401921fb

08001d90 <optimalAngle>:

double optimalAngle(double angle) { // anciennement toPiPi
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0b00 	vstr	d0, [r7]
    return toZeroTwoPi(angle + M_PI) - M_PI;
 8001d9a:	a311      	add	r3, pc, #68	; (adr r3, 8001de0 <optimalAngle+0x50>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da4:	f7fe fa92 	bl	80002cc <__adddf3>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	ec43 2b17 	vmov	d7, r2, r3
 8001db0:	eeb0 0a47 	vmov.f32	s0, s14
 8001db4:	eef0 0a67 	vmov.f32	s1, s15
 8001db8:	f7ff ffba 	bl	8001d30 <toZeroTwoPi>
 8001dbc:	ec51 0b10 	vmov	r0, r1, d0
 8001dc0:	a307      	add	r3, pc, #28	; (adr r3, 8001de0 <optimalAngle+0x50>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fa7f 	bl	80002c8 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd6:	eef0 0a67 	vmov.f32	s1, s15
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	54442d18 	.word	0x54442d18
 8001de4:	400921fb 	.word	0x400921fb

08001de8 <toZeroOne>:

double toZeroOne(double x) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfe:	f7fe fe8d 	bl	8000b1c <__aeabi_dcmplt>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <toZeroOne+0x2a>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e00f      	b.n	8001e32 <toZeroOne+0x4a>
	if (x > 1) return 1;
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <toZeroOne+0x5c>)
 8001e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e1c:	f7fe fe9c 	bl	8000b58 <__aeabi_dcmpgt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <toZeroOne+0x46>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <toZeroOne+0x5c>)
 8001e2c:	e001      	b.n	8001e32 <toZeroOne+0x4a>
	return x;
 8001e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e32:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	3ff00000 	.word	0x3ff00000

08001e48 <ASSERV_update>:

void ASSERV_update(CONSIGNE point, CONSIGNE previous) {
 8001e48:	b084      	sub	sp, #16
 8001e4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4e:	ed2d 8b02 	vpush	{d8}
 8001e52:	b09e      	sub	sp, #120	; 0x78
 8001e54:	af08      	add	r7, sp, #32
 8001e56:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (indexStrategie >= nb_points || !match_started) {
 8001e5e:	4bc8      	ldr	r3, [pc, #800]	; (8002180 <ASSERV_update+0x338>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4bc8      	ldr	r3, [pc, #800]	; (8002184 <ASSERV_update+0x33c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	da03      	bge.n	8001e72 <ASSERV_update+0x2a>
 8001e6a:	4bc7      	ldr	r3, [pc, #796]	; (8002188 <ASSERV_update+0x340>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <ASSERV_update+0x30>
    	stopMoteurs();
 8001e72:	f000 fe45 	bl	8002b00 <stopMoteurs>
    	return;
 8001e76:	e26c      	b.n	8002352 <ASSERV_update+0x50a>
    }

    ODO_odometrie();
 8001e78:	f000 fe9e 	bl	8002bb8 <ODO_odometrie>

    // calculs préliminaires
    double pointDistance = sqrt(pow(point.x - g_x, 2) + pow(point.y - g_y, 2));
 8001e7c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e80:	4bc2      	ldr	r3, [pc, #776]	; (800218c <ASSERV_update+0x344>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fa1f 	bl	80002c8 <__aeabi_dsub>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ec43 2b17 	vmov	d7, r2, r3
 8001e92:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8002168 <ASSERV_update+0x320>
 8001e96:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9a:	eef0 0a67 	vmov.f32	s1, s15
 8001e9e:	f008 fd51 	bl	800a944 <pow>
 8001ea2:	ec55 4b10 	vmov	r4, r5, d0
 8001ea6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001eaa:	4bb9      	ldr	r3, [pc, #740]	; (8002190 <ASSERV_update+0x348>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	ec43 2b17 	vmov	d7, r2, r3
 8001ebc:	ed9f 1baa 	vldr	d1, [pc, #680]	; 8002168 <ASSERV_update+0x320>
 8001ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec4:	eef0 0a67 	vmov.f32	s1, s15
 8001ec8:	f008 fd3c 	bl	800a944 <pow>
 8001ecc:	ec53 2b10 	vmov	r2, r3, d0
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe f9fa 	bl	80002cc <__adddf3>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	ec43 2b17 	vmov	d7, r2, r3
 8001ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee4:	eef0 0a67 	vmov.f32	s1, s15
 8001ee8:	f008 fdda 	bl	800aaa0 <sqrt>
 8001eec:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    double segmentLength = sqrt(pow(point.x - previous.x, 2) + pow(point.y - previous.y, 2));
 8001ef0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001ef8:	f7fe f9e6 	bl	80002c8 <__aeabi_dsub>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	ec43 2b17 	vmov	d7, r2, r3
 8001f04:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8002168 <ASSERV_update+0x320>
 8001f08:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0c:	eef0 0a67 	vmov.f32	s1, s15
 8001f10:	f008 fd18 	bl	800a944 <pow>
 8001f14:	ec55 4b10 	vmov	r4, r5, d0
 8001f18:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001f1c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001f20:	f7fe f9d2 	bl	80002c8 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	ec43 2b17 	vmov	d7, r2, r3
 8001f2c:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8002168 <ASSERV_update+0x320>
 8001f30:	eeb0 0a47 	vmov.f32	s0, s14
 8001f34:	eef0 0a67 	vmov.f32	s1, s15
 8001f38:	f008 fd04 	bl	800a944 <pow>
 8001f3c:	ec53 2b10 	vmov	r2, r3, d0
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9c2 	bl	80002cc <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	ec43 2b17 	vmov	d7, r2, r3
 8001f50:	eeb0 0a47 	vmov.f32	s0, s14
 8001f54:	eef0 0a67 	vmov.f32	s1, s15
 8001f58:	f008 fda2 	bl	800aaa0 <sqrt>
 8001f5c:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
    double moveProgress = toZeroOne(1 - pointDistance/(segmentLength + VALID_RADIUS));
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <ASSERV_update+0x34c>)
 8001f66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f6a:	f7fe f9af 	bl	80002cc <__adddf3>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f76:	f7fe fc89 	bl	800088c <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	f04f 0000 	mov.w	r0, #0
 8001f82:	4985      	ldr	r1, [pc, #532]	; (8002198 <ASSERV_update+0x350>)
 8001f84:	f7fe f9a0 	bl	80002c8 <__aeabi_dsub>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	ec43 2b17 	vmov	d7, r2, r3
 8001f90:	eeb0 0a47 	vmov.f32	s0, s14
 8001f94:	eef0 0a67 	vmov.f32	s1, s15
 8001f98:	f7ff ff26 	bl	8001de8 <toZeroOne>
 8001f9c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    double pointDirection = atan2(point.y - g_y, point.x - g_x);
 8001fa0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001fa4:	4b7a      	ldr	r3, [pc, #488]	; (8002190 <ASSERV_update+0x348>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe f98d 	bl	80002c8 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	ec43 2b18 	vmov	d8, r2, r3
 8001fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fba:	4b74      	ldr	r3, [pc, #464]	; (800218c <ASSERV_update+0x344>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe f982 	bl	80002c8 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	ec43 2b17 	vmov	d7, r2, r3
 8001fcc:	eeb0 1a47 	vmov.f32	s2, s14
 8001fd0:	eef0 1a67 	vmov.f32	s3, s15
 8001fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8001fd8:	eef0 0a68 	vmov.f32	s1, s17
 8001fdc:	f008 fc74 	bl	800a8c8 <atan2>
 8001fe0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    double angleError = optimalAngle( pointDirection - g_angle - ((point.dir==BACKWARD)?M_PI:0) );
 8001fe4:	4b6d      	ldr	r3, [pc, #436]	; (800219c <ASSERV_update+0x354>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fee:	f7fe f96b 	bl	80002c8 <__aeabi_dsub>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <ASSERV_update+0x1c2>
 8002002:	a35b      	add	r3, pc, #364	; (adr r3, 8002170 <ASSERV_update+0x328>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	e003      	b.n	8002012 <ASSERV_update+0x1ca>
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	f7fe f959 	bl	80002c8 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ec43 2b17 	vmov	d7, r2, r3
 800201e:	eeb0 0a47 	vmov.f32	s0, s14
 8002022:	eef0 0a67 	vmov.f32	s1, s15
 8002026:	f7ff feb3 	bl	8001d90 <optimalAngle>
 800202a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    if (isnan(initialAngleError)) initialAngleError = angleError;
 800202e:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <ASSERV_update+0x358>)
 8002030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	f7fe fd98 	bl	8000b6c <__aeabi_dcmpun>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <ASSERV_update+0x204>
 8002042:	4957      	ldr	r1, [pc, #348]	; (80021a0 <ASSERV_update+0x358>)
 8002044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002048:	e9c1 2300 	strd	r2, r3, [r1]
    double rotateProgress = toZeroOne(1 - angleError/initialAngleError);
 800204c:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <ASSERV_update+0x358>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002056:	f7fe fc19 	bl	800088c <__aeabi_ddiv>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	494d      	ldr	r1, [pc, #308]	; (8002198 <ASSERV_update+0x350>)
 8002064:	f7fe f930 	bl	80002c8 <__aeabi_dsub>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ec43 2b17 	vmov	d7, r2, r3
 8002070:	eeb0 0a47 	vmov.f32	s0, s14
 8002074:	eef0 0a67 	vmov.f32	s1, s15
 8002078:	f7ff feb6 	bl	8001de8 <toZeroOne>
 800207c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

    // vitesse du robot

    if (pointDistance > VALID_RADIUS) {
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <ASSERV_update+0x34c>)
 8002086:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800208a:	f7fe fd65 	bl	8000b58 <__aeabi_dcmpgt>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8134 	beq.w	80022fe <ASSERV_update+0x4b6>
        // le robot est loin
    	double speed = 0, spin = 0;
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    	speed = VMAX_DISTANCE*speedCurve(moveProgress)*segmentLength/1000 + VMIN_DISTANCE;
 80020ae:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80020b2:	f7ff fdfb 	bl	8001cac <speedCurve>
 80020b6:	ec51 0b10 	vmov	r0, r1, d0
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <ASSERV_update+0x34c>)
 80020c0:	f7fe faba 	bl	8000638 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020d0:	f7fe fab2 	bl	8000638 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <ASSERV_update+0x35c>)
 80020e2:	f7fe fbd3 	bl	800088c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <ASSERV_update+0x360>)
 80020f4:	f7fe f8ea 	bl	80002cc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    	speed *= 1/(1+pow(fabs(angleError/VALID_ANGLE), 2));
 8002100:	a31d      	add	r3, pc, #116	; (adr r3, 8002178 <ASSERV_update+0x330>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800210a:	f7fe fbbf 	bl	800088c <__aeabi_ddiv>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4692      	mov	sl, r2
 8002114:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002118:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002168 <ASSERV_update+0x320>
 800211c:	ec4b ab10 	vmov	d0, sl, fp
 8002120:	f008 fc10 	bl	800a944 <pow>
 8002124:	ec51 0b10 	vmov	r0, r1, d0
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <ASSERV_update+0x350>)
 800212e:	f7fe f8cd 	bl	80002cc <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	f04f 0000 	mov.w	r0, #0
 800213a:	4917      	ldr	r1, [pc, #92]	; (8002198 <ASSERV_update+0x350>)
 800213c:	f7fe fba6 	bl	800088c <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002148:	f7fe fa76 	bl	8000638 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9c7 2308 	strd	r2, r3, [r7, #32]
    	speed *= (point.dir==FORWARD)?1:-1;
 8002154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002158:	2b01      	cmp	r3, #1
 800215a:	d127      	bne.n	80021ac <ASSERV_update+0x364>
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <ASSERV_update+0x350>)
 8002162:	e026      	b.n	80021b2 <ASSERV_update+0x36a>
 8002164:	f3af 8000 	nop.w
 8002168:	00000000 	.word	0x00000000
 800216c:	40000000 	.word	0x40000000
 8002170:	54442d18 	.word	0x54442d18
 8002174:	400921fb 	.word	0x400921fb
 8002178:	9999999a 	.word	0x9999999a
 800217c:	3fa99999 	.word	0x3fa99999
 8002180:	20000680 	.word	0x20000680
 8002184:	20000004 	.word	0x20000004
 8002188:	20000518 	.word	0x20000518
 800218c:	20000598 	.word	0x20000598
 8002190:	20000688 	.word	0x20000688
 8002194:	40140000 	.word	0x40140000
 8002198:	3ff00000 	.word	0x3ff00000
 800219c:	20000638 	.word	0x20000638
 80021a0:	200004a8 	.word	0x200004a8
 80021a4:	408f4000 	.word	0x408f4000
 80021a8:	3fe00000 	.word	0x3fe00000
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b73      	ldr	r3, [pc, #460]	; (8002380 <ASSERV_update+0x538>)
 80021b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021b6:	f7fe fa3f 	bl	8000638 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    	spin = VMAX_ROTATION*(speedCurve(rotateProgress)*fabs(initialAngleError)/M_PI + speedCurve(moveProgress)*fabs(angleError))/2;
 80021c2:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80021c6:	f7ff fd71 	bl	8001cac <speedCurve>
 80021ca:	ec51 0b10 	vmov	r0, r1, d0
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <ASSERV_update+0x53c>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	4690      	mov	r8, r2
 80021d6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021da:	4642      	mov	r2, r8
 80021dc:	464b      	mov	r3, r9
 80021de:	f7fe fa2b 	bl	8000638 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	a35f      	add	r3, pc, #380	; (adr r3, 8002368 <ASSERV_update+0x520>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fb4c 	bl	800088c <__aeabi_ddiv>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4614      	mov	r4, r2
 80021fa:	461d      	mov	r5, r3
 80021fc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002200:	f7ff fd54 	bl	8001cac <speedCurve>
 8002204:	ec51 0b10 	vmov	r0, r1, d0
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002218:	f7fe fa0e 	bl	8000638 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fe f852 	bl	80002cc <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	f7fe f84a 	bl	80002cc <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002248:	f7fe fb20 	bl	800088c <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 2306 	strd	r2, r3, [r7, #24]
    	spin += VMIN_ROTATION*(1-rotateProgress);
 8002254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	494a      	ldr	r1, [pc, #296]	; (8002388 <ASSERV_update+0x540>)
 800225e:	f7fe f833 	bl	80002c8 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	a341      	add	r3, pc, #260	; (adr r3, 8002370 <ASSERV_update+0x528>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f9e2 	bl	8000638 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800227c:	f7fe f826 	bl	80002cc <__adddf3>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9c7 2306 	strd	r2, r3, [r7, #24]
    	spin *= -angleError/fabs(angleError);// * (1-moveProgress);
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a8:	f7fe faf0 	bl	800088c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022b4:	f7fe f9c0 	bl	8000638 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    	setSmooth(speed - spin, speed + spin);
 80022c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022c8:	f7fd fffe 	bl	80002c8 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	ec43 2b18 	vmov	d8, r2, r3
 80022d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022dc:	f7fd fff6 	bl	80002cc <__adddf3>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	ec43 2b17 	vmov	d7, r2, r3
 80022e8:	eeb0 1a47 	vmov.f32	s2, s14
 80022ec:	eef0 1a67 	vmov.f32	s3, s15
 80022f0:	eeb0 0a48 	vmov.f32	s0, s16
 80022f4:	eef0 0a68 	vmov.f32	s1, s17
 80022f8:	f7ff fc6e 	bl	8001bd8 <setSmooth>
 80022fc:	e027      	b.n	800234e <ASSERV_update+0x506>
    } else {
        // le robot est arrivé au point visé
    	actionneursUpdate(point);
 80022fe:	466d      	mov	r5, sp
 8002300:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002308:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800230c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002310:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002316:	f7ff f99f 	bl	8001658 <actionneursUpdate>
    	indexStrategie++;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <ASSERV_update+0x544>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <ASSERV_update+0x544>)
 8002322:	6013      	str	r3, [r2, #0]
    	initialAngleError = NAN;
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <ASSERV_update+0x53c>)
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <ASSERV_update+0x548>)
 800232c:	e9c1 2300 	strd	r2, r3, [r1]
    	if (indexStrategie == nb_points) {
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <ASSERV_update+0x544>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <ASSERV_update+0x54c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d102      	bne.n	8002342 <ASSERV_update+0x4fa>
    		smoothReset();
 800233c:	f7ff fc8a 	bl	8001c54 <smoothReset>
 8002340:	e005      	b.n	800234e <ASSERV_update+0x506>
    	} else {
    		setSmooth(0, 0);
 8002342:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002378 <ASSERV_update+0x530>
 8002346:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002378 <ASSERV_update+0x530>
 800234a:	f7ff fc45 	bl	8001bd8 <setSmooth>
    	}
    }
    setMotorsSmoothly();
 800234e:	f7ff fbe1 	bl	8001b14 <setMotorsSmoothly>
}
 8002352:	3758      	adds	r7, #88	; 0x58
 8002354:	46bd      	mov	sp, r7
 8002356:	ecbd 8b02 	vpop	{d8}
 800235a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235e:	b004      	add	sp, #16
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	54442d18 	.word	0x54442d18
 800236c:	400921fb 	.word	0x400921fb
 8002370:	9999999a 	.word	0x9999999a
 8002374:	3fb99999 	.word	0x3fb99999
	...
 8002380:	bff00000 	.word	0xbff00000
 8002384:	200004a8 	.word	0x200004a8
 8002388:	3ff00000 	.word	0x3ff00000
 800238c:	20000680 	.word	0x20000680
 8002390:	7ff80000 	.word	0x7ff80000
 8002394:	20000004 	.word	0x20000004

08002398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <MX_GPIO_Init+0x130>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <MX_GPIO_Init+0x130>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <MX_GPIO_Init+0x130>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <MX_GPIO_Init+0x130>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <MX_GPIO_Init+0x130>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <MX_GPIO_Init+0x130>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <MX_GPIO_Init+0x130>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	f640 0107 	movw	r1, #2055	; 0x807
 8002440:	4822      	ldr	r0, [pc, #136]	; (80024cc <MX_GPIO_Init+0x134>)
 8002442:	f002 fcb3 	bl	8004dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2120      	movs	r1, #32
 800244a:	4821      	ldr	r0, [pc, #132]	; (80024d0 <MX_GPIO_Init+0x138>)
 800244c:	f002 fcae 	bl	8004dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin;
 8002450:	f640 0307 	movw	r3, #2055	; 0x807
 8002454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	4818      	ldr	r0, [pc, #96]	; (80024cc <MX_GPIO_Init+0x134>)
 800246a:	f002 fb0b 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800246e:	2320      	movs	r3, #32
 8002470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4812      	ldr	r0, [pc, #72]	; (80024d0 <MX_GPIO_Init+0x138>)
 8002486:	f002 fafd 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo4_Pin|Echo3_Pin|Echo2_Pin;
 800248a:	f24e 0302 	movw	r3, #57346	; 0xe002
 800248e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_GPIO_Init+0x13c>)
 8002492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	480e      	ldr	r0, [pc, #56]	; (80024d8 <MX_GPIO_Init+0x140>)
 80024a0:	f002 faf0 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tirette_Pin;
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <MX_GPIO_Init+0x134>)
 80024ba:	f002 fae3 	bl	8004a84 <HAL_GPIO_Init>

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	10110000 	.word	0x10110000
 80024d8:	40020400 	.word	0x40020400

080024dc <decodeMsgIHM>:
#include "ihm.h"

int decodeMsgIHM(char *trame){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

	char header = trame[0];
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	73fb      	strb	r3, [r7, #15]

	switch(header){
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b4d      	cmp	r3, #77	; 0x4d
 80024ee:	d017      	beq.n	8002520 <decodeMsgIHM+0x44>
 80024f0:	2b4d      	cmp	r3, #77	; 0x4d
 80024f2:	dc1e      	bgt.n	8002532 <decodeMsgIHM+0x56>
 80024f4:	2b42      	cmp	r3, #66	; 0x42
 80024f6:	d00a      	beq.n	800250e <decodeMsgIHM+0x32>
 80024f8:	2b4a      	cmp	r3, #74	; 0x4a
 80024fa:	d11a      	bne.n	8002532 <decodeMsgIHM+0x56>
		case 'J' :
			port_depart = JAUNE;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <decodeMsgIHM+0x64>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
			initStrategie();
 8002502:	f000 f98d 	bl	8002820 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Jaune\r\n");
 8002506:	480f      	ldr	r0, [pc, #60]	; (8002544 <decodeMsgIHM+0x68>)
 8002508:	f005 fff2 	bl	80084f0 <puts>
			#endif
			break;
 800250c:	e012      	b.n	8002534 <decodeMsgIHM+0x58>

		case 'B' :
			port_depart = BLEU;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <decodeMsgIHM+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
			initStrategie();
 8002514:	f000 f984 	bl	8002820 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Bleu\r\n");
 8002518:	480b      	ldr	r0, [pc, #44]	; (8002548 <decodeMsgIHM+0x6c>)
 800251a:	f005 ffe9 	bl	80084f0 <puts>
			#endif
			break;
 800251e:	e009      	b.n	8002534 <decodeMsgIHM+0x58>

		case 'M' :
			initStrategie();
 8002520:	f000 f97e 	bl	8002820 <initStrategie>
			//HAL_TIM_Base_Start_IT(&htim2);
			match_started = TRUE;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <decodeMsgIHM+0x70>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
			#if MODULE_DEBUG == 1
				printf("Go!\r\n");
 800252a:	4809      	ldr	r0, [pc, #36]	; (8002550 <decodeMsgIHM+0x74>)
 800252c:	f005 ffe0 	bl	80084f0 <puts>
			#endif
			break;
 8002530:	e000      	b.n	8002534 <decodeMsgIHM+0x58>

		default :
			break;
 8002532:	bf00      	nop
	}

	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000514 	.word	0x20000514
 8002544:	0800cef0 	.word	0x0800cef0
 8002548:	0800cf10 	.word	0x0800cf10
 800254c:	20000518 	.word	0x20000518
 8002550:	0800cf30 	.word	0x0800cf30

08002554 <getLidarData2>:
	#endif
	*/

}

void getLidarData2(){
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
	char header = lidarRawData[0];
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <getLidarData2+0x40>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	71fb      	strb	r3, [r7, #7]

	//#if MODULE_DEBUG == 1 && DEBUG_LIDAR
	//printf("header = %c\r\n",header);
	//#endif

	switch(header){
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2b42      	cmp	r3, #66	; 0x42
 8002564:	d002      	beq.n	800256c <getLidarData2+0x18>
 8002566:	2b46      	cmp	r3, #70	; 0x46
 8002568:	d007      	beq.n	800257a <getLidarData2+0x26>
			StopFront = 1;
			cpt_front = 0;
			break;

		default :
			break;
 800256a:	e00d      	b.n	8002588 <getLidarData2+0x34>
			StopBack = 1;
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <getLidarData2+0x44>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]
			cpt_back = 0;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <getLidarData2+0x48>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
			break;
 8002578:	e006      	b.n	8002588 <getLidarData2+0x34>
			StopFront = 1;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <getLidarData2+0x4c>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
			cpt_front = 0;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <getLidarData2+0x50>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
			break;
 8002586:	bf00      	nop
	}
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	200005c4 	.word	0x200005c4
 8002598:	20000694 	.word	0x20000694
 800259c:	20000644 	.word	0x20000644
 80025a0:	20000640 	.word	0x20000640
 80025a4:	20000604 	.word	0x20000604

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 fc53 	bl	8003e58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f889 	bl	80026c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f7ff feef 	bl	8002398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f001 fa37 	bl	8003a2c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80025be:	f000 fdcd 	bl	800315c <MX_TIM1_Init>
  MX_TIM8_Init();
 80025c2:	f000 ff31 	bl	8003428 <MX_TIM8_Init>
  MX_TIM11_Init();
 80025c6:	f000 ffcf 	bl	8003568 <MX_TIM11_Init>
  MX_UART4_Init();
 80025ca:	f001 f9b1 	bl	8003930 <MX_UART4_Init>
  MX_UART5_Init();
 80025ce:	f001 f9d9 	bl	8003984 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80025d2:	f001 fa55 	bl	8003a80 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80025d6:	f000 fe67 	bl	80032a8 <MX_TIM3_Init>
  MX_TIM7_Init();
 80025da:	f000 feef 	bl	80033bc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80025de:	f001 f9fb 	bl	80039d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80025e2:	f000 fe13 	bl	800320c <MX_TIM2_Init>
  MX_ADC1_Init();
 80025e6:	f7ff f989 	bl	80018fc <MX_ADC1_Init>
  MX_TIM6_Init();
 80025ea:	f000 feb1 	bl	8003350 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  initSerials();
 80025ee:	f000 f8ff 	bl	80027f0 <initSerials>

  port_depart = BLEU;
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <main+0x100>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  initStrategie();
 80025f8:	f000 f912 	bl	8002820 <initStrategie>

  initMoteurs();
 80025fc:	f000 fa4e 	bl	8002a9c <initMoteurs>
  initPinces();
 8002600:	f7ff f876 	bl	80016f0 <initPinces>
  initBras();
 8002604:	f7ff f92a 	bl	800185c <initBras>
  initFlag();
 8002608:	f7ff f8e8 	bl	80017dc <initFlag>

  indexStrategie = 1; // Variable parcourant le tableau de stratégie
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <main+0x104>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  initTimers();
 8002612:	f000 f8cd 	bl	80027b0 <initTimers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float voltage = 0;
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	607b      	str	r3, [r7, #4]

	do{
		#if MODULE_TIRETTE == TRUE
			HAL_ADC_Start(&hadc1);
 800261c:	4824      	ldr	r0, [pc, #144]	; (80026b0 <main+0x108>)
 800261e:	f001 fcf5 	bl	800400c <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8002622:	4924      	ldr	r1, [pc, #144]	; (80026b4 <main+0x10c>)
 8002624:	4822      	ldr	r0, [pc, #136]	; (80026b0 <main+0x108>)
 8002626:	f001 fdc3 	bl	80041b0 <HAL_ADC_PollForConversion>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11b      	bne.n	8002668 <main+0xc0>
			{
				g_ADCValue = HAL_ADC_GetValue(&hadc1);
 8002630:	481f      	ldr	r0, [pc, #124]	; (80026b0 <main+0x108>)
 8002632:	f001 fe48 	bl	80042c6 <HAL_ADC_GetValue>
 8002636:	ee07 0a90 	vmov	s15, r0
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <main+0x110>)
 8002640:	edc3 7a00 	vstr	s15, [r3]
				voltage = g_ADCValue * (3.3 / 4096.0);
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <main+0x110>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff9d 	bl	8000588 <__aeabi_f2d>
 800264e:	a314      	add	r3, pc, #80	; (adr r3, 80026a0 <main+0xf8>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fff0 	bl	8000638 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fae2 	bl	8000c28 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	607b      	str	r3, [r7, #4]
				#if MODULE_DEBUG && DEBUG_TIRETTE
					printf("%f\r\n",voltage);
				#endif
			}

			if((voltage < (float)TIRETTE_SEUIL) == TRUE && match_started == FALSE){
 8002668:	edd7 7a01 	vldr	s15, [r7, #4]
 800266c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80026bc <main+0x114>
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d508      	bpl.n	800268c <main+0xe4>
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <main+0x118>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <main+0xe4>
				match_started = TRUE;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <main+0x118>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
				initStrategie();
 8002688:	f000 f8ca 	bl	8002820 <initStrategie>
		#else
			match_started = TRUE;

		#endif
	}
	while(match_started == FALSE);
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <main+0x118>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0c3      	beq.n	800261c <main+0x74>

	#if MODULE_LIDAR
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
	#endif

	cptTempsMatch = 0;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <main+0x11c>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

	while (1)
 800269a:	e7fe      	b.n	800269a <main+0xf2>
 800269c:	f3af 8000 	nop.w
 80026a0:	66666666 	.word	0x66666666
 80026a4:	3f4a6666 	.word	0x3f4a6666
 80026a8:	20000514 	.word	0x20000514
 80026ac:	20000680 	.word	0x20000680
 80026b0:	20000550 	.word	0x20000550
 80026b4:	000f4240 	.word	0x000f4240
 80026b8:	20000504 	.word	0x20000504
 80026bc:	40433333 	.word	0x40433333
 80026c0:	20000518 	.word	0x20000518
 80026c4:	20000500 	.word	0x20000500

080026c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b094      	sub	sp, #80	; 0x50
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	2234      	movs	r2, #52	; 0x34
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 fa2a 	bl	8007b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <SystemClock_Config+0xe0>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <SystemClock_Config+0xe0>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <SystemClock_Config+0xe0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	2300      	movs	r3, #0
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <SystemClock_Config+0xe4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <SystemClock_Config+0xe4>)
 8002712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <SystemClock_Config+0xe4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002724:	2302      	movs	r3, #2
 8002726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002728:	2301      	movs	r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	2310      	movs	r3, #16
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002730:	2302      	movs	r3, #2
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002734:	2300      	movs	r3, #0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002738:	2310      	movs	r3, #16
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800273c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002742:	2302      	movs	r3, #2
 8002744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002746:	2302      	movs	r3, #2
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800274a:	2302      	movs	r3, #2
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fe60 	bl	8005418 <HAL_RCC_OscConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800275e:	f000 f995 	bl	8002a8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002762:	f002 fb3d 	bl	8004de0 <HAL_PWREx_EnableOverDrive>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800276c:	f000 f98e 	bl	8002a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002770:	230f      	movs	r3, #15
 8002772:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002774:	2302      	movs	r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800277c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	2105      	movs	r1, #5
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fb76 	bl	8004e80 <HAL_RCC_ClockConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800279a:	f000 f977 	bl	8002a8c <Error_Handler>
  }
}
 800279e:	bf00      	nop
 80027a0:	3750      	adds	r7, #80	; 0x50
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000

080027b0 <initTimers>:

/* USER CODE BEGIN 4 */

int initTimers(){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

	#if MODULE_ODOMETRIE
		HAL_TIM_Encoder_Start(&CODEUR_D, TIM_CHANNEL_ALL); // htim1
 80027b4:	213c      	movs	r1, #60	; 0x3c
 80027b6:	4809      	ldr	r0, [pc, #36]	; (80027dc <initTimers+0x2c>)
 80027b8:	f003 fb54 	bl	8005e64 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&CODEUR_G, TIM_CHANNEL_ALL); // htim3
 80027bc:	213c      	movs	r1, #60	; 0x3c
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <initTimers+0x30>)
 80027c0:	f003 fb50 	bl	8005e64 <HAL_TIM_Encoder_Start>
	#endif

	#if MODULE_ASSERVISSEMENT
		HAL_TIM_Base_Start_IT(&htim2); // 15ms
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <initTimers+0x34>)
 80027c6:	f003 f915 	bl	80059f4 <HAL_TIM_Base_Start_IT>
	#endif

	#if MODULE_COMPTEUR
		HAL_TIM_Base_Start_IT(&htim7); // 1sec
 80027ca:	4807      	ldr	r0, [pc, #28]	; (80027e8 <initTimers+0x38>)
 80027cc:	f003 f912 	bl	80059f4 <HAL_TIM_Base_Start_IT>
	#endif

	HAL_TIM_Base_Start_IT(&htim6); // 10ms
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <initTimers+0x3c>)
 80027d2:	f003 f90f 	bl	80059f4 <HAL_TIM_Base_Start_IT>

	return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000808 	.word	0x20000808
 80027e0:	20000730 	.word	0x20000730
 80027e4:	20000850 	.word	0x20000850
 80027e8:	20000898 	.word	0x20000898
 80027ec:	200007c0 	.word	0x200007c0

080027f0 <initSerials>:

int initSerials(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	#if MODULE_DEBUG == 1
		RetargetInit(&huart2);
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <initSerials+0x20>)
 80027f6:	f000 fb17 	bl	8002e28 <RetargetInit>
		printf("Mode debug actif\r\n");
 80027fa:	4806      	ldr	r0, [pc, #24]	; (8002814 <initSerials+0x24>)
 80027fc:	f005 fe78 	bl	80084f0 <puts>
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
	#endif
	*/

	#if MODULE_IHM
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002800:	2201      	movs	r2, #1
 8002802:	4905      	ldr	r1, [pc, #20]	; (8002818 <initSerials+0x28>)
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <initSerials+0x2c>)
 8002806:	f004 fbe0 	bl	8006fca <HAL_UART_Receive_IT>
	#endif

	return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200009f0 	.word	0x200009f0
 8002814:	0800cf38 	.word	0x0800cf38
 8002818:	200006a0 	.word	0x200006a0
 800281c:	200009ac 	.word	0x200009ac

08002820 <initStrategie>:

int initStrategie(){
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	if(port_depart == BLEU){
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <initStrategie+0x88>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d119      	bne.n	8002860 <initStrategie+0x40>
		ODO_setAngle(START_BLEU_ANGLE);
 800282c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80028a0 <initStrategie+0x80>
 8002830:	f000 fae8 	bl	8002e04 <ODO_setAngle>
		ODO_setX(consigneBleu[0].x);
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <initStrategie+0x8c>)
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	eeb0 0a47 	vmov.f32	s0, s14
 800283e:	eef0 0a67 	vmov.f32	s1, s15
 8002842:	f000 fabb 	bl	8002dbc <ODO_setX>
		ODO_setY(consigneBleu[0].y);
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <initStrategie+0x8c>)
 8002848:	ed93 7b02 	vldr	d7, [r3, #8]
 800284c:	eeb0 0a47 	vmov.f32	s0, s14
 8002850:	eef0 0a67 	vmov.f32	s1, s15
 8002854:	f000 fac4 	bl	8002de0 <ODO_setY>
		consigne = consigneBleu;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <initStrategie+0x90>)
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <initStrategie+0x8c>)
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e01c      	b.n	800289a <initStrategie+0x7a>
	}
	else if(port_depart == JAUNE){
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <initStrategie+0x88>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d118      	bne.n	800289a <initStrategie+0x7a>
		ODO_setAngle(START_JAUNE_ANGLE);
 8002868:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80028a0 <initStrategie+0x80>
 800286c:	f000 faca 	bl	8002e04 <ODO_setAngle>
		ODO_setX(consigneJaune[0].x);
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <initStrategie+0x94>)
 8002872:	ed93 7b00 	vldr	d7, [r3]
 8002876:	eeb0 0a47 	vmov.f32	s0, s14
 800287a:	eef0 0a67 	vmov.f32	s1, s15
 800287e:	f000 fa9d 	bl	8002dbc <ODO_setX>
		ODO_setY(consigneJaune[0].y);
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <initStrategie+0x94>)
 8002884:	ed93 7b02 	vldr	d7, [r3, #8]
 8002888:	eeb0 0a47 	vmov.f32	s0, s14
 800288c:	eef0 0a67 	vmov.f32	s1, s15
 8002890:	f000 faa6 	bl	8002de0 <ODO_setY>
		consigne = consigneJaune;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <initStrategie+0x90>)
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <initStrategie+0x94>)
 8002898:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
	...
 80028a8:	20000514 	.word	0x20000514
 80028ac:	20000008 	.word	0x20000008
 80028b0:	2000054c 	.word	0x2000054c
 80028b4:	20000158 	.word	0x20000158

080028b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ba:	b097      	sub	sp, #92	; 0x5c
 80028bc:	af14      	add	r7, sp, #80	; 0x50
 80028be:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d135      	bne.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(indexStrategie < nb_points && match_started == 1)
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	da2f      	bge.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x7e>
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12b      	bne.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x7e>
			ASSERV_update(consigne[indexStrategie], consigne[indexStrategie-1]);
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	18d6      	adds	r6, r2, r3
 80028f2:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	440b      	add	r3, r1
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	3b30      	subs	r3, #48	; 0x30
 8002906:	4413      	add	r3, r2
 8002908:	ac08      	add	r4, sp, #32
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800291c:	466d      	mov	r5, sp
 800291e:	f106 0410 	add.w	r4, r6, #16
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800292a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800292e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002932:	f7ff fa89 	bl	8001e48 <ASSERV_update>
	}

	if(htim->Instance == TIM6){
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d117      	bne.n	8002970 <HAL_TIM_PeriodElapsedCallback+0xb8>
		//printf("TIM6\r\n");
		cpt_back++;
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002948:	6013      	str	r3, [r2, #0]
		cpt_front++;
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002952:	6013      	str	r3, [r2, #0]
		//printf("cpt_front = %d\r\n",cpt_front);

		if (cpt_back > 250){
 8002954:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2bfa      	cmp	r3, #250	; 0xfa
 800295a:	dd02      	ble.n	8002962 <HAL_TIM_PeriodElapsedCallback+0xaa>
			StopBack = 0;
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
		}

		if (cpt_front > 250){
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2bfa      	cmp	r3, #250	; 0xfa
 8002968:	dd02      	ble.n	8002970 <HAL_TIM_PeriodElapsedCallback+0xb8>
			StopFront = 0;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM7){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11b      	bne.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0xfa>
		if(match_started == TRUE){
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d117      	bne.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0xfa>
			cptTempsMatch++;
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800298a:	6013      	str	r3, [r2, #0]

			if (cptTempsMatch >= TEMPS_PAVILLONS){
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b5f      	cmp	r3, #95	; 0x5f
 8002992:	dd01      	ble.n	8002998 <HAL_TIM_PeriodElapsedCallback+0xe0>
				raiseFlag();
 8002994:	f7fe ff56 	bl	8001844 <raiseFlag>
			}

			if (cptTempsMatch >= 98){
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b61      	cmp	r3, #97	; 0x61
 800299e:	dd08      	ble.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0xfa>
				stopMoteurs();
 80029a0:	f000 f8ae 	bl	8002b00 <stopMoteurs>
				initBras();
 80029a4:	f7fe ff5a 	bl	800185c <initBras>
				initPinces();
 80029a8:	f7fe fea2 	bl	80016f0 <initPinces>
				match_started = 0;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000680 	.word	0x20000680
 80029c0:	20000004 	.word	0x20000004
 80029c4:	20000518 	.word	0x20000518
 80029c8:	2000054c 	.word	0x2000054c
 80029cc:	40001000 	.word	0x40001000
 80029d0:	20000644 	.word	0x20000644
 80029d4:	20000604 	.word	0x20000604
 80029d8:	20000694 	.word	0x20000694
 80029dc:	20000640 	.word	0x20000640
 80029e0:	40001400 	.word	0x40001400
 80029e4:	20000500 	.word	0x20000500

080029e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_UART_RxCpltCallback+0x80>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d113      	bne.n	8002a22 <HAL_UART_RxCpltCallback+0x3a>
		strcat(lidarRawData,&buff_lidar);
 80029fa:	491c      	ldr	r1, [pc, #112]	; (8002a6c <HAL_UART_RxCpltCallback+0x84>)
 80029fc:	481c      	ldr	r0, [pc, #112]	; (8002a70 <HAL_UART_RxCpltCallback+0x88>)
 80029fe:	f005 fe45 	bl	800868c <strcat>
		if(buff_lidar == '\n'){
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_UART_RxCpltCallback+0x84>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b0a      	cmp	r3, #10
 8002a08:	d106      	bne.n	8002a18 <HAL_UART_RxCpltCallback+0x30>
			//getLidarData();
			getLidarData2();
 8002a0a:	f7ff fda3 	bl	8002554 <getLidarData2>
			memset(lidarRawData,0,sizeof(lidarRawData));
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	2100      	movs	r1, #0
 8002a12:	4817      	ldr	r0, [pc, #92]	; (8002a70 <HAL_UART_RxCpltCallback+0x88>)
 8002a14:	f005 f88c 	bl	8007b30 <memset>
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4914      	ldr	r1, [pc, #80]	; (8002a6c <HAL_UART_RxCpltCallback+0x84>)
 8002a1c:	4815      	ldr	r0, [pc, #84]	; (8002a74 <HAL_UART_RxCpltCallback+0x8c>)
 8002a1e:	f004 fad4 	bl	8006fca <HAL_UART_Receive_IT>
	}

	if(huart->Instance == UART4){
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_UART_RxCpltCallback+0x90>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d118      	bne.n	8002a5e <HAL_UART_RxCpltCallback+0x76>
		if(match_started == FALSE){
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_UART_RxCpltCallback+0x94>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d114      	bne.n	8002a5e <HAL_UART_RxCpltCallback+0x76>
			strcat(ihmRawData,&buff_ihm);
 8002a34:	4912      	ldr	r1, [pc, #72]	; (8002a80 <HAL_UART_RxCpltCallback+0x98>)
 8002a36:	4813      	ldr	r0, [pc, #76]	; (8002a84 <HAL_UART_RxCpltCallback+0x9c>)
 8002a38:	f005 fe28 	bl	800868c <strcat>
			if(buff_ihm == '\n'){
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_UART_RxCpltCallback+0x98>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b0a      	cmp	r3, #10
 8002a42:	d107      	bne.n	8002a54 <HAL_UART_RxCpltCallback+0x6c>
				decodeMsgIHM(ihmRawData);
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <HAL_UART_RxCpltCallback+0x9c>)
 8002a46:	f7ff fd49 	bl	80024dc <decodeMsgIHM>
				memset(ihmRawData,0,sizeof(ihmRawData));
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <HAL_UART_RxCpltCallback+0x9c>)
 8002a50:	f005 f86e 	bl	8007b30 <memset>
			}
			HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_UART_RxCpltCallback+0x98>)
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <HAL_UART_RxCpltCallback+0xa0>)
 8002a5a:	f004 fab6 	bl	8006fca <HAL_UART_Receive_IT>
		}
	}

}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40005000 	.word	0x40005000
 8002a6c:	20000690 	.word	0x20000690
 8002a70:	200005c4 	.word	0x200005c4
 8002a74:	20000924 	.word	0x20000924
 8002a78:	40004c00 	.word	0x40004c00
 8002a7c:	20000518 	.word	0x20000518
 8002a80:	200006a0 	.word	0x200006a0
 8002a84:	200006a4 	.word	0x200006a4
 8002a88:	200009ac 	.word	0x200009ac

08002a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <initMoteurs>:
#include <moteurs.h>

void initMoteurs(){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af04      	add	r7, sp, #16
	//DRV8825_moveMotorLineSpeed(&moteur_D, 0);
	//DRV8825_moveMotorLineSpeed(&moteur_G, 0);

	DRV8825_init(&moteur_D, EN_D_Pin, EN_D_GPIO_Port, Dir_D_Pin, Dir_D_GPIO_Port, &STEP_D, TIM_CHANNEL_4);
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <initMoteurs+0x50>)
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <initMoteurs+0x54>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <initMoteurs+0x54>)
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	480f      	ldr	r0, [pc, #60]	; (8002af4 <initMoteurs+0x58>)
 8002ab8:	f7fe fcac 	bl	8001414 <DRV8825_init>
	DRV8825_init(&moteur_G, EN_G_Pin, EN_G_GPIO_Port, Dir_G_Pin, Dir_G_GPIO_Port, &STEP_G, TIM_CHANNEL_1);
 8002abc:	2300      	movs	r3, #0
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <initMoteurs+0x5c>)
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <initMoteurs+0x54>)
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2304      	movs	r3, #4
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <initMoteurs+0x54>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <initMoteurs+0x60>)
 8002ad0:	f7fe fca0 	bl	8001414 <DRV8825_init>

	DRV8825_setStart(&moteur_D, STOP);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4807      	ldr	r0, [pc, #28]	; (8002af4 <initMoteurs+0x58>)
 8002ad8:	f7fe fcd1 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002adc:	2101      	movs	r1, #1
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <initMoteurs+0x60>)
 8002ae0:	f7fe fccd 	bl	800147e <DRV8825_setStart>

	//DRV8825_setStart(&moteur_D, START);
	//DRV8825_setStart(&moteur_G, START);

}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200006e8 	.word	0x200006e8
 8002af0:	40020800 	.word	0x40020800
 8002af4:	20000650 	.word	0x20000650
 8002af8:	20000778 	.word	0x20000778
 8002afc:	20000668 	.word	0x20000668

08002b00 <stopMoteurs>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed);
}

void stopMoteurs(){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, STOP);
 8002b04:	2101      	movs	r1, #1
 8002b06:	4804      	ldr	r0, [pc, #16]	; (8002b18 <stopMoteurs+0x18>)
 8002b08:	f7fe fcb9 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4803      	ldr	r0, [pc, #12]	; (8002b1c <stopMoteurs+0x1c>)
 8002b10:	f7fe fcb5 	bl	800147e <DRV8825_setStart>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000650 	.word	0x20000650
 8002b1c:	20000668 	.word	0x20000668

08002b20 <startMoteurs>:

void startMoteurs(){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, START);
 8002b24:	2100      	movs	r1, #0
 8002b26:	4804      	ldr	r0, [pc, #16]	; (8002b38 <startMoteurs+0x18>)
 8002b28:	f7fe fca9 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, START);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4803      	ldr	r0, [pc, #12]	; (8002b3c <startMoteurs+0x1c>)
 8002b30:	f7fe fca5 	bl	800147e <DRV8825_setStart>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000650 	.word	0x20000650
 8002b3c:	20000668 	.word	0x20000668

08002b40 <getTickRight>:
#include <asservissement.h>


int16_t getTickRight(){
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
	return (int16_t)(CODEUR_D.Instance->CNT);
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <getTickRight+0x18>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b21b      	sxth	r3, r3
	//return (int16_t)(~CODEUR_D.Instance->CNT + 1);
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000808 	.word	0x20000808

08002b5c <getTickLeft>:

int16_t getTickLeft(){
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	//return (int16_t)(CODEUR_G.Instance->CNT);
	return (int16_t)(~CODEUR_G.Instance->CNT + 1);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <getTickLeft+0x1c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	425b      	negs	r3, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b21b      	sxth	r3, r3
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000730 	.word	0x20000730

08002b7c <resetTickRight>:

void resetTickRight(){
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	CODEUR_D.Instance->CNT = 0;
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <resetTickRight+0x18>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000808 	.word	0x20000808

08002b98 <resetTickLeft>:
void resetTickLeft(){
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
	CODEUR_G.Instance->CNT = 0;
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <resetTickLeft+0x18>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000730 	.word	0x20000730
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <ODO_odometrie>:

void ODO_odometrie(){
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
			"y : %lf \n\r"
			"o : %lf \n\n\r",g_x, g_y, g_angle);
#endif


	int valCodG = getTickLeft();
 8002bbe:	f7ff ffcd 	bl	8002b5c <getTickLeft>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	607b      	str	r3, [r7, #4]
	int valCodD = getTickRight();
 8002bc6:	f7ff ffbb 	bl	8002b40 <getTickRight>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	603b      	str	r3, [r7, #0]

	dDistance =  (valCodG * COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fcc8 	bl	8000564 <__aeabi_i2d>
 8002bd4:	a36a      	add	r3, pc, #424	; (adr r3, 8002d80 <ODO_odometrie+0x1c8>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fd2d 	bl	8000638 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4614      	mov	r4, r2
 8002be4:	461d      	mov	r5, r3
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f7fd fcbc 	bl	8000564 <__aeabi_i2d>
 8002bec:	a362      	add	r3, pc, #392	; (adr r3, 8002d78 <ODO_odometrie+0x1c0>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fd21 	bl	8000638 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f7fd fb65 	bl	80002cc <__adddf3>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c12:	f7fd fe3b 	bl	800088c <__aeabi_ddiv>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4963      	ldr	r1, [pc, #396]	; (8002da8 <ODO_odometrie+0x1f0>)
 8002c1c:	e9c1 2300 	strd	r2, r3, [r1]
	dAngle = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE;
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f7fd fc9f 	bl	8000564 <__aeabi_i2d>
 8002c26:	a354      	add	r3, pc, #336	; (adr r3, 8002d78 <ODO_odometrie+0x1c0>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fd04 	bl	8000638 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4614      	mov	r4, r2
 8002c36:	461d      	mov	r5, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fc93 	bl	8000564 <__aeabi_i2d>
 8002c3e:	a350      	add	r3, pc, #320	; (adr r3, 8002d80 <ODO_odometrie+0x1c8>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fcf8 	bl	8000638 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fb3a 	bl	80002c8 <__aeabi_dsub>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	a34a      	add	r3, pc, #296	; (adr r3, 8002d88 <ODO_odometrie+0x1d0>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fe13 	bl	800088c <__aeabi_ddiv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4950      	ldr	r1, [pc, #320]	; (8002dac <ODO_odometrie+0x1f4>)
 8002c6c:	e9c1 2300 	strd	r2, r3, [r1]

	g_x += dDistance * cos(g_angle);
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002c72:	ed93 7b00 	vldr	d7, [r3]
 8002c76:	eeb0 0a47 	vmov.f32	s0, s14
 8002c7a:	eef0 0a67 	vmov.f32	s1, s15
 8002c7e:	f007 fd7f 	bl	800a780 <cos>
 8002c82:	ec51 0b10 	vmov	r0, r1, d0
 8002c86:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <ODO_odometrie+0x1f0>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fcd4 	bl	8000638 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <ODO_odometrie+0x1fc>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fb15 	bl	80002cc <__adddf3>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4943      	ldr	r1, [pc, #268]	; (8002db4 <ODO_odometrie+0x1fc>)
 8002ca8:	e9c1 2300 	strd	r2, r3, [r1]
	g_y += dDistance * sin(g_angle);
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002cae:	ed93 7b00 	vldr	d7, [r3]
 8002cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb6:	eef0 0a67 	vmov.f32	s1, s15
 8002cba:	f007 fdb1 	bl	800a820 <sin>
 8002cbe:	ec51 0b10 	vmov	r0, r1, d0
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <ODO_odometrie+0x1f0>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fcb6 	bl	8000638 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <ODO_odometrie+0x200>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd faf7 	bl	80002cc <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4935      	ldr	r1, [pc, #212]	; (8002db8 <ODO_odometrie+0x200>)
 8002ce4:	e9c1 2300 	strd	r2, r3, [r1]
	g_angle += dAngle;
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <ODO_odometrie+0x1f4>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f7fd faea 	bl	80002cc <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	492c      	ldr	r1, [pc, #176]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002cfe:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle > M_PI)
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d08:	a321      	add	r3, pc, #132	; (adr r3, 8002d90 <ODO_odometrie+0x1d8>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f7fd ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00c      	beq.n	8002d32 <ODO_odometrie+0x17a>
		g_angle = g_angle - (M_PI * 2.0f);
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d1e:	a31e      	add	r3, pc, #120	; (adr r3, 8002d98 <ODO_odometrie+0x1e0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fad0 	bl	80002c8 <__aeabi_dsub>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4920      	ldr	r1, [pc, #128]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d2e:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle < (-1) * M_PI)
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d38:	a319      	add	r3, pc, #100	; (adr r3, 8002da0 <ODO_odometrie+0x1e8>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd feed 	bl	8000b1c <__aeabi_dcmplt>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <ODO_odometrie+0x1aa>
		g_angle = g_angle + (M_PI * 2.0f);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d4e:	a312      	add	r3, pc, #72	; (adr r3, 8002d98 <ODO_odometrie+0x1e0>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd faba 	bl	80002cc <__adddf3>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4914      	ldr	r1, [pc, #80]	; (8002db0 <ODO_odometrie+0x1f8>)
 8002d5e:	e9c1 2300 	strd	r2, r3, [r1]

	resetTickRight();
 8002d62:	f7ff ff0b 	bl	8002b7c <resetTickRight>
	resetTickLeft();
 8002d66:	f7ff ff17 	bl	8002b98 <resetTickLeft>

}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	f3af 8000 	nop.w
 8002d78:	0f6c27c8 	.word	0x0f6c27c8
 8002d7c:	3fa4ad97 	.word	0x3fa4ad97
 8002d80:	0fa743d0 	.word	0x0fa743d0
 8002d84:	3fa4c5ef 	.word	0x3fa4c5ef
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	406f6000 	.word	0x406f6000
 8002d90:	54442d18 	.word	0x54442d18
 8002d94:	400921fb 	.word	0x400921fb
 8002d98:	54442d18 	.word	0x54442d18
 8002d9c:	401921fb 	.word	0x401921fb
 8002da0:	54442d18 	.word	0x54442d18
 8002da4:	c00921fb 	.word	0xc00921fb
 8002da8:	20000698 	.word	0x20000698
 8002dac:	20000648 	.word	0x20000648
 8002db0:	20000638 	.word	0x20000638
 8002db4:	20000598 	.word	0x20000598
 8002db8:	20000688 	.word	0x20000688

08002dbc <ODO_setX>:

void ODO_setX(double x){
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	ed87 0b00 	vstr	d0, [r7]
	g_x =x;
 8002dc6:	4905      	ldr	r1, [pc, #20]	; (8002ddc <ODO_setX+0x20>)
 8002dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dcc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	20000598 	.word	0x20000598

08002de0 <ODO_setY>:

void ODO_setY(double y){
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	ed87 0b00 	vstr	d0, [r7]
	g_y = y;
 8002dea:	4905      	ldr	r1, [pc, #20]	; (8002e00 <ODO_setY+0x20>)
 8002dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002df0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	20000688 	.word	0x20000688

08002e04 <ODO_setAngle>:
void ODO_setPosition(double x, double y){
	g_x = x;g_y = y;
}
void ODO_setAngle(double angle){
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	ed87 0b00 	vstr	d0, [r7]
	g_angle = angle;
 8002e0e:	4905      	ldr	r1, [pc, #20]	; (8002e24 <ODO_setAngle+0x20>)
 8002e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	20000638 	.word	0x20000638

08002e28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <RetargetInit+0x28>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <RetargetInit+0x2c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6898      	ldr	r0, [r3, #8]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2202      	movs	r2, #2
 8002e40:	2100      	movs	r1, #0
 8002e42:	f005 fb5d 	bl	8008500 <setvbuf>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200006e4 	.word	0x200006e4
 8002e54:	200002b4 	.word	0x200002b4

08002e58 <_isatty>:

int _isatty(int fd) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db04      	blt.n	8002e70 <_isatty+0x18>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	dc01      	bgt.n	8002e70 <_isatty+0x18>
    return 1;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e005      	b.n	8002e7c <_isatty+0x24>

  errno = EBADF;
 8002e70:	f004 fe34 	bl	8007adc <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2209      	movs	r2, #9
 8002e78:	601a      	str	r2, [r3, #0]
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_write>:

int _write(int fd, char* ptr, int len) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <_write+0x18>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d111      	bne.n	8002ec0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <_write+0x54>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	f003 ff5a 	bl	8006d62 <HAL_UART_Transmit>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <_write+0x38>
      return len;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	e008      	b.n	8002ece <_write+0x4a>
    else
      return EIO;
 8002ebc:	2305      	movs	r3, #5
 8002ebe:	e006      	b.n	8002ece <_write+0x4a>
  }
  errno = EBADF;
 8002ec0:	f004 fe0c 	bl	8007adc <__errno>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2209      	movs	r2, #9
 8002ec8:	601a      	str	r2, [r3, #0]
  return -1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200006e4 	.word	0x200006e4

08002edc <_close>:

int _close(int fd) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db04      	blt.n	8002ef4 <_close+0x18>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	dc01      	bgt.n	8002ef4 <_close+0x18>
    return 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e006      	b.n	8002f02 <_close+0x26>

  errno = EBADF;
 8002ef4:	f004 fdf2 	bl	8007adc <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2209      	movs	r2, #9
 8002efc:	601a      	str	r2, [r3, #0]
  return -1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002f16:	f004 fde1 	bl	8007adc <__errno>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2209      	movs	r2, #9
 8002f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_read>:

int _read(int fd, char* ptr, int len) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d110      	bne.n	8002f60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <_read+0x4c>)
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	2201      	movs	r2, #1
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	f003 ff9c 	bl	8006e86 <HAL_UART_Receive>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <_read+0x30>
      return 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e008      	b.n	8002f6e <_read+0x42>
    else
      return EIO;
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	e006      	b.n	8002f6e <_read+0x42>
  }
  errno = EBADF;
 8002f60:	f004 fdbc 	bl	8007adc <__errno>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2209      	movs	r2, #9
 8002f68:	601a      	str	r2, [r3, #0]
  return -1;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200006e4 	.word	0x200006e4

08002f7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db08      	blt.n	8002f9e <_fstat+0x22>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	dc05      	bgt.n	8002f9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f98:	605a      	str	r2, [r3, #4]
    return 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e005      	b.n	8002faa <_fstat+0x2e>
  }

  errno = EBADF;
 8002f9e:	f004 fd9d 	bl	8007adc <__errno>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2209      	movs	r2, #9
 8002fa6:	601a      	str	r2, [r3, #0]
  return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_MspInit+0x4c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_MspInit+0x4c>)
 8002fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_MspInit+0x4c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <HAL_MspInit+0x4c>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
#if DEBUG_G == 1 && DEBUG_FAULT
	printf("Bug !");
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003016:	e7fe      	b.n	8003016 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301c:	e7fe      	b.n	800301c <MemManage_Handler+0x4>

0800301e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <BusFault_Handler+0x4>

08003024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <UsageFault_Handler+0x4>

0800302a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003058:	f000 ff50 	bl	8003efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <TIM2_IRQHandler+0x10>)
 8003066:	f002 ff8b 	bl	8005f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000850 	.word	0x20000850

08003074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USART2_IRQHandler+0x10>)
 800307a:	f003 ffd7 	bl	800702c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200009f0 	.word	0x200009f0

08003088 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <UART4_IRQHandler+0x10>)
 800308e:	f003 ffcd 	bl	800702c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200009ac 	.word	0x200009ac

0800309c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <UART5_IRQHandler+0x10>)
 80030a2:	f003 ffc3 	bl	800702c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000924 	.word	0x20000924

080030b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <TIM6_DAC_IRQHandler+0x10>)
 80030b6:	f002 ff63 	bl	8005f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200007c0 	.word	0x200007c0

080030c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <TIM7_IRQHandler+0x10>)
 80030ca:	f002 ff59 	bl	8005f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000898 	.word	0x20000898

080030d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <_sbrk+0x50>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <_sbrk+0x16>
		heap_end = &end;
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <_sbrk+0x50>)
 80030ea:	4a10      	ldr	r2, [pc, #64]	; (800312c <_sbrk+0x54>)
 80030ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <_sbrk+0x50>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <_sbrk+0x50>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	466a      	mov	r2, sp
 80030fe:	4293      	cmp	r3, r2
 8003100:	d907      	bls.n	8003112 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003102:	f004 fceb 	bl	8007adc <__errno>
 8003106:	4603      	mov	r3, r0
 8003108:	220c      	movs	r2, #12
 800310a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e006      	b.n	8003120 <_sbrk+0x48>
	}

	heap_end += incr;
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <_sbrk+0x50>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	4a03      	ldr	r2, [pc, #12]	; (8003128 <_sbrk+0x50>)
 800311c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000508 	.word	0x20000508
 800312c:	20000a48 	.word	0x20000a48

08003130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <SystemInit+0x28>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <SystemInit+0x28>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SystemInit+0x28>)
 8003146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800314a:	609a      	str	r2, [r3, #8]
#endif
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fce0 	bl	8007b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <MX_TIM1_Init+0xa8>)
 800317a:	4a23      	ldr	r2, [pc, #140]	; (8003208 <MX_TIM1_Init+0xac>)
 800317c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <MX_TIM1_Init+0xa8>)
 8003180:	2200      	movs	r2, #0
 8003182:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <MX_TIM1_Init+0xa8>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <MX_TIM1_Init+0xa8>)
 800318c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <MX_TIM1_Init+0xa8>)
 8003194:	2200      	movs	r2, #0
 8003196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <MX_TIM1_Init+0xa8>)
 800319a:	2200      	movs	r2, #0
 800319c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <MX_TIM1_Init+0xa8>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031a4:	2303      	movs	r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80031b4:	230a      	movs	r3, #10
 80031b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031bc:	2301      	movs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	4619      	mov	r1, r3
 80031ce:	480d      	ldr	r0, [pc, #52]	; (8003204 <MX_TIM1_Init+0xa8>)
 80031d0:	f002 fda2 	bl	8005d18 <HAL_TIM_Encoder_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80031da:	f7ff fc57 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <MX_TIM1_Init+0xa8>)
 80031ec:	f003 fc8a 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80031f6:	f7ff fc49 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031fa:	bf00      	nop
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000808 	.word	0x20000808
 8003208:	40010000 	.word	0x40010000

0800320c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003220:	463b      	mov	r3, r7
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <MX_TIM2_Init+0x98>)
 800322a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800322e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <MX_TIM2_Init+0x98>)
 8003232:	f640 227e 	movw	r2, #2686	; 0xa7e
 8003236:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <MX_TIM2_Init+0x98>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <MX_TIM2_Init+0x98>)
 8003240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003244:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <MX_TIM2_Init+0x98>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <MX_TIM2_Init+0x98>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003252:	4814      	ldr	r0, [pc, #80]	; (80032a4 <MX_TIM2_Init+0x98>)
 8003254:	f002 fb7e 	bl	8005954 <HAL_TIM_Base_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800325e:	f7ff fc15 	bl	8002a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4619      	mov	r1, r3
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <MX_TIM2_Init+0x98>)
 8003270:	f003 f84c 	bl	800630c <HAL_TIM_ConfigClockSource>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800327a:	f7ff fc07 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003286:	463b      	mov	r3, r7
 8003288:	4619      	mov	r1, r3
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <MX_TIM2_Init+0x98>)
 800328c:	f003 fc3a 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003296:	f7ff fbf9 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000850 	.word	0x20000850

080032a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fc3a 	bl	8007b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032c6:	4a21      	ldr	r2, [pc, #132]	; (800334c <MX_TIM3_Init+0xa4>)
 80032c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <MX_TIM3_Init+0xa0>)
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032ea:	2303      	movs	r3, #3
 80032ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032f2:	2301      	movs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032fe:	2300      	movs	r3, #0
 8003300:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003302:	2301      	movs	r3, #1
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003306:	2300      	movs	r3, #0
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	4619      	mov	r1, r3
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <MX_TIM3_Init+0xa0>)
 8003316:	f002 fcff 	bl	8005d18 <HAL_TIM_Encoder_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003320:	f7ff fbb4 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_TIM3_Init+0xa0>)
 8003332:	f003 fbe7 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800333c:	f7ff fba6 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003340:	bf00      	nop
 8003342:	3730      	adds	r7, #48	; 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000730 	.word	0x20000730
 800334c:	40000400 	.word	0x40000400

08003350 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003356:	463b      	mov	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <MX_TIM6_Init+0x64>)
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <MX_TIM6_Init+0x68>)
 8003362:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <MX_TIM6_Init+0x64>)
 8003366:	f242 3227 	movw	r2, #8999	; 0x2327
 800336a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_TIM6_Init+0x64>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <MX_TIM6_Init+0x64>)
 8003374:	2263      	movs	r2, #99	; 0x63
 8003376:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_TIM6_Init+0x64>)
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800337e:	480d      	ldr	r0, [pc, #52]	; (80033b4 <MX_TIM6_Init+0x64>)
 8003380:	f002 fae8 	bl	8005954 <HAL_TIM_Base_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800338a:	f7ff fb7f 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003396:	463b      	mov	r3, r7
 8003398:	4619      	mov	r1, r3
 800339a:	4806      	ldr	r0, [pc, #24]	; (80033b4 <MX_TIM6_Init+0x64>)
 800339c:	f003 fbb2 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80033a6:	f7ff fb71 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200007c0 	.word	0x200007c0
 80033b8:	40001000 	.word	0x40001000

080033bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c2:	463b      	mov	r3, r7
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <MX_TIM7_Init+0x64>)
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <MX_TIM7_Init+0x68>)
 80033ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <MX_TIM7_Init+0x64>)
 80033d2:	f242 3227 	movw	r2, #8999	; 0x2327
 80033d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_TIM7_Init+0x64>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_TIM7_Init+0x64>)
 80033e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80033e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_TIM7_Init+0x64>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <MX_TIM7_Init+0x64>)
 80033ee:	f002 fab1 	bl	8005954 <HAL_TIM_Base_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80033f8:	f7ff fb48 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003404:	463b      	mov	r3, r7
 8003406:	4619      	mov	r1, r3
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_TIM7_Init+0x64>)
 800340a:	f003 fb7b 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003414:	f7ff fb3a 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000898 	.word	0x20000898
 8003424:	40001400 	.word	0x40001400

08003428 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b096      	sub	sp, #88	; 0x58
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800342e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	611a      	str	r2, [r3, #16]
 8003456:	615a      	str	r2, [r3, #20]
 8003458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	2220      	movs	r2, #32
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f004 fb65 	bl	8007b30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <MX_TIM8_Init+0x138>)
 8003468:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <MX_TIM8_Init+0x13c>)
 800346a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 800346c:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <MX_TIM8_Init+0x138>)
 800346e:	22b3      	movs	r2, #179	; 0xb3
 8003470:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <MX_TIM8_Init+0x138>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <MX_TIM8_Init+0x138>)
 800347a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003480:	4b37      	ldr	r3, [pc, #220]	; (8003560 <MX_TIM8_Init+0x138>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <MX_TIM8_Init+0x138>)
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <MX_TIM8_Init+0x138>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003492:	4833      	ldr	r0, [pc, #204]	; (8003560 <MX_TIM8_Init+0x138>)
 8003494:	f002 fa5e 	bl	8005954 <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800349e:	f7ff faf5 	bl	8002a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034ac:	4619      	mov	r1, r3
 80034ae:	482c      	ldr	r0, [pc, #176]	; (8003560 <MX_TIM8_Init+0x138>)
 80034b0:	f002 ff2c 	bl	800630c <HAL_TIM_ConfigClockSource>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80034ba:	f7ff fae7 	bl	8002a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034be:	4828      	ldr	r0, [pc, #160]	; (8003560 <MX_TIM8_Init+0x138>)
 80034c0:	f002 fb08 	bl	8005ad4 <HAL_TIM_PWM_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80034ca:	f7ff fadf 	bl	8002a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034da:	4619      	mov	r1, r3
 80034dc:	4820      	ldr	r0, [pc, #128]	; (8003560 <MX_TIM8_Init+0x138>)
 80034de:	f003 fb11 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80034e8:	f7ff fad0 	bl	8002a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ec:	2360      	movs	r3, #96	; 0x60
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80034f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350a:	220c      	movs	r2, #12
 800350c:	4619      	mov	r1, r3
 800350e:	4814      	ldr	r0, [pc, #80]	; (8003560 <MX_TIM8_Init+0x138>)
 8003510:	f002 fe3e 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800351a:	f7ff fab7 	bl	8002a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4807      	ldr	r0, [pc, #28]	; (8003560 <MX_TIM8_Init+0x138>)
 8003542:	f003 fb5b 	bl	8006bfc <HAL_TIMEx_ConfigBreakDeadTime>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800354c:	f7ff fa9e 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003550:	4803      	ldr	r0, [pc, #12]	; (8003560 <MX_TIM8_Init+0x138>)
 8003552:	f000 f989 	bl	8003868 <HAL_TIM_MspPostInit>

}
 8003556:	bf00      	nop
 8003558:	3758      	adds	r7, #88	; 0x58
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200006e8 	.word	0x200006e8
 8003564:	40010400 	.word	0x40010400

08003568 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <MX_TIM11_Init+0x94>)
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <MX_TIM11_Init+0x98>)
 8003584:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <MX_TIM11_Init+0x94>)
 8003588:	22b3      	movs	r2, #179	; 0xb3
 800358a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <MX_TIM11_Init+0x94>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <MX_TIM11_Init+0x94>)
 8003594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003598:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <MX_TIM11_Init+0x94>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <MX_TIM11_Init+0x94>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80035a6:	4815      	ldr	r0, [pc, #84]	; (80035fc <MX_TIM11_Init+0x94>)
 80035a8:	f002 f9d4 	bl	8005954 <HAL_TIM_Base_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80035b2:	f7ff fa6b 	bl	8002a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80035b6:	4811      	ldr	r0, [pc, #68]	; (80035fc <MX_TIM11_Init+0x94>)
 80035b8:	f002 fa8c 	bl	8005ad4 <HAL_TIM_PWM_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80035c2:	f7ff fa63 	bl	8002a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035c6:	2360      	movs	r3, #96	; 0x60
 80035c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	4619      	mov	r1, r3
 80035dc:	4807      	ldr	r0, [pc, #28]	; (80035fc <MX_TIM11_Init+0x94>)
 80035de:	f002 fdd7 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80035e8:	f7ff fa50 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <MX_TIM11_Init+0x94>)
 80035ee:	f000 f93b 	bl	8003868 <HAL_TIM_MspPostInit>

}
 80035f2:	bf00      	nop
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000778 	.word	0x20000778
 8003600:	40014800 	.word	0x40014800

08003604 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a32      	ldr	r2, [pc, #200]	; (80036ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d12d      	bne.n	8003682 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a30      	ldr	r2, [pc, #192]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800365e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2300      	movs	r3, #0
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003670:	2301      	movs	r3, #1
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f107 031c 	add.w	r3, r7, #28
 8003678:	4619      	mov	r1, r3
 800367a:	481e      	ldr	r0, [pc, #120]	; (80036f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800367c:	f001 fa02 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003680:	e030      	b.n	80036e4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d12b      	bne.n	80036e4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6313      	str	r3, [r2, #48]	; 0x30
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036c4:	23c0      	movs	r3, #192	; 0xc0
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036d4:	2302      	movs	r3, #2
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80036e0:	f001 f9d0 	bl	8004a84 <HAL_GPIO_Init>
}
 80036e4:	bf00      	nop
 80036e6:	3730      	adds	r7, #48	; 0x30
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020000 	.word	0x40020000
 80036f8:	40000400 	.word	0x40000400

080036fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	; 0x38
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d134      	bne.n	8003788 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a4a      	ldr	r2, [pc, #296]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	4b44      	ldr	r3, [pc, #272]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003756:	2304      	movs	r3, #4
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	2300      	movs	r3, #0
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003766:	2301      	movs	r3, #1
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376e:	4619      	mov	r1, r3
 8003770:	4838      	ldr	r0, [pc, #224]	; (8003854 <HAL_TIM_Base_MspInit+0x158>)
 8003772:	f001 f987 	bl	8004a84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2100      	movs	r1, #0
 800377a:	201c      	movs	r0, #28
 800377c:	f001 f8b9 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003780:	201c      	movs	r0, #28
 8003782:	f001 f8d2 	bl	800492a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003786:	e05e      	b.n	8003846 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM6)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a32      	ldr	r2, [pc, #200]	; (8003858 <HAL_TIM_Base_MspInit+0x15c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d116      	bne.n	80037c0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	2036      	movs	r0, #54	; 0x36
 80037b4:	f001 f89d 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037b8:	2036      	movs	r0, #54	; 0x36
 80037ba:	f001 f8b6 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 80037be:	e042      	b.n	8003846 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM7)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <HAL_TIM_Base_MspInit+0x160>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d116      	bne.n	80037f8 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 80037d4:	f043 0320 	orr.w	r3, r3, #32
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2102      	movs	r1, #2
 80037ea:	2037      	movs	r0, #55	; 0x37
 80037ec:	f001 f881 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037f0:	2037      	movs	r0, #55	; 0x37
 80037f2:	f001 f89a 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 80037f6:	e026      	b.n	8003846 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM8)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_TIM_Base_MspInit+0x164>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	4a11      	ldr	r2, [pc, #68]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6453      	str	r3, [r2, #68]	; 0x44
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
}
 800381e:	e012      	b.n	8003846 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM11)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_TIM_Base_MspInit+0x168>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10d      	bne.n	8003846 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003838:	6453      	str	r3, [r2, #68]	; 0x44
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_TIM_Base_MspInit+0x154>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	bf00      	nop
 8003848:	3738      	adds	r7, #56	; 0x38
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40020400 	.word	0x40020400
 8003858:	40001000 	.word	0x40001000
 800385c:	40001400 	.word	0x40001400
 8003860:	40010400 	.word	0x40010400
 8003864:	40014800 	.word	0x40014800

08003868 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a25      	ldr	r2, [pc, #148]	; (800391c <HAL_TIM_MspPostInit+0xb4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d11f      	bne.n	80038ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038b8:	2303      	movs	r3, #3
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	4818      	ldr	r0, [pc, #96]	; (8003924 <HAL_TIM_MspPostInit+0xbc>)
 80038c4:	f001 f8de 	bl	8004a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80038c8:	e023      	b.n	8003912 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_MspPostInit+0xc0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d11e      	bne.n	8003912 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_TIM_MspPostInit+0xb8>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003902:	2303      	movs	r3, #3
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	4807      	ldr	r0, [pc, #28]	; (800392c <HAL_TIM_MspPostInit+0xc4>)
 800390e:	f001 f8b9 	bl	8004a84 <HAL_GPIO_Init>
}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40010400 	.word	0x40010400
 8003920:	40023800 	.word	0x40023800
 8003924:	40020800 	.word	0x40020800
 8003928:	40014800 	.word	0x40014800
 800392c:	40020400 	.word	0x40020400

08003930 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_UART4_Init+0x4c>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <MX_UART4_Init+0x50>)
 8003938:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <MX_UART4_Init+0x4c>)
 800393c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003940:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_UART4_Init+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_UART4_Init+0x4c>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_UART4_Init+0x4c>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_UART4_Init+0x4c>)
 8003956:	220c      	movs	r2, #12
 8003958:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_UART4_Init+0x4c>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_UART4_Init+0x4c>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_UART4_Init+0x4c>)
 8003968:	f003 f9ae 	bl	8006cc8 <HAL_UART_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003972:	f7ff f88b 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200009ac 	.word	0x200009ac
 8003980:	40004c00 	.word	0x40004c00

08003984 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <MX_UART5_Init+0x4c>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <MX_UART5_Init+0x50>)
 800398c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <MX_UART5_Init+0x4c>)
 8003990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003994:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <MX_UART5_Init+0x4c>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_UART5_Init+0x4c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <MX_UART5_Init+0x4c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_UART5_Init+0x4c>)
 80039aa:	220c      	movs	r2, #12
 80039ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <MX_UART5_Init+0x4c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_UART5_Init+0x4c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80039ba:	4805      	ldr	r0, [pc, #20]	; (80039d0 <MX_UART5_Init+0x4c>)
 80039bc:	f003 f984 	bl	8006cc8 <HAL_UART_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80039c6:	f7ff f861 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000924 	.word	0x20000924
 80039d4:	40005000 	.word	0x40005000

080039d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <MX_USART1_UART_Init+0x50>)
 80039e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 80039fe:	220c      	movs	r2, #12
 8003a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a0e:	4805      	ldr	r0, [pc, #20]	; (8003a24 <MX_USART1_UART_Init+0x4c>)
 8003a10:	f003 f95a 	bl	8006cc8 <HAL_UART_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a1a:	f7ff f837 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000968 	.word	0x20000968
 8003a28:	40011000 	.word	0x40011000

08003a2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <MX_USART2_UART_Init+0x50>)
 8003a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a52:	220c      	movs	r2, #12
 8003a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a62:	4805      	ldr	r0, [pc, #20]	; (8003a78 <MX_USART2_UART_Init+0x4c>)
 8003a64:	f003 f930 	bl	8006cc8 <HAL_UART_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a6e:	f7ff f80d 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200009f0 	.word	0x200009f0
 8003a7c:	40004400 	.word	0x40004400

08003a80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003a8c:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <MX_USART3_UART_Init+0x50>)
 8003a8e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003aa4:	220c      	movs	r2, #12
 8003aa6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ab4:	4804      	ldr	r0, [pc, #16]	; (8003ac8 <MX_USART3_UART_Init+0x48>)
 8003ab6:	f003 f907 	bl	8006cc8 <HAL_UART_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003ac0:	f7fe ffe4 	bl	8002a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200008e0 	.word	0x200008e0
 8003acc:	40004800 	.word	0x40004800
 8003ad0:	0003d090 	.word	0x0003d090

08003ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b094      	sub	sp, #80	; 0x50
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a8d      	ldr	r2, [pc, #564]	; (8003d28 <HAL_UART_MspInit+0x254>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d134      	bne.n	8003b60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003afa:	4b8c      	ldr	r3, [pc, #560]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a8b      	ldr	r2, [pc, #556]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a84      	ldr	r2, [pc, #528]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b36:	2301      	movs	r3, #1
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b3e:	2308      	movs	r3, #8
 8003b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b46:	4619      	mov	r1, r3
 8003b48:	4879      	ldr	r0, [pc, #484]	; (8003d30 <HAL_UART_MspInit+0x25c>)
 8003b4a:	f000 ff9b 	bl	8004a84 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2034      	movs	r0, #52	; 0x34
 8003b54:	f000 fecd 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003b58:	2034      	movs	r0, #52	; 0x34
 8003b5a:	f000 fee6 	bl	800492a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b5e:	e145      	b.n	8003dec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART5)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a73      	ldr	r2, [pc, #460]	; (8003d34 <HAL_UART_MspInit+0x260>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d153      	bne.n	8003c12 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a60      	ldr	r2, [pc, #384]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4857      	ldr	r0, [pc, #348]	; (8003d38 <HAL_UART_MspInit+0x264>)
 8003bdc:	f000 ff52 	bl	8004a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003be0:	2304      	movs	r3, #4
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be8:	2301      	movs	r3, #1
 8003bea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4850      	ldr	r0, [pc, #320]	; (8003d3c <HAL_UART_MspInit+0x268>)
 8003bfc:	f000 ff42 	bl	8004a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2035      	movs	r0, #53	; 0x35
 8003c06:	f000 fe74 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003c0a:	2035      	movs	r0, #53	; 0x35
 8003c0c:	f000 fe8d 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 8003c10:	e0ec      	b.n	8003dec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_UART_MspInit+0x26c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d14b      	bne.n	8003cb4 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	4a41      	ldr	r2, [pc, #260]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c26:	f043 0310 	orr.w	r3, r3, #16
 8003c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6313      	str	r3, [r2, #48]	; 0x30
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4a33      	ldr	r2, [pc, #204]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	6313      	str	r3, [r2, #48]	; 0x30
 8003c64:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c82:	2307      	movs	r3, #7
 8003c84:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4828      	ldr	r0, [pc, #160]	; (8003d30 <HAL_UART_MspInit+0x25c>)
 8003c8e:	f000 fef9 	bl	8004a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003caa:	4619      	mov	r1, r3
 8003cac:	4825      	ldr	r0, [pc, #148]	; (8003d44 <HAL_UART_MspInit+0x270>)
 8003cae:	f000 fee9 	bl	8004a84 <HAL_GPIO_Init>
}
 8003cb2:	e09b      	b.n	8003dec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <HAL_UART_MspInit+0x274>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d146      	bne.n	8003d4c <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_UART_MspInit+0x258>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d02:	2303      	movs	r3, #3
 8003d04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d06:	2307      	movs	r3, #7
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4807      	ldr	r0, [pc, #28]	; (8003d30 <HAL_UART_MspInit+0x25c>)
 8003d12:	f000 feb7 	bl	8004a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2105      	movs	r1, #5
 8003d1a:	2026      	movs	r0, #38	; 0x26
 8003d1c:	f000 fde9 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d20:	2026      	movs	r0, #38	; 0x26
 8003d22:	f000 fe02 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 8003d26:	e061      	b.n	8003dec <HAL_UART_MspInit+0x318>
 8003d28:	40004c00 	.word	0x40004c00
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40005000 	.word	0x40005000
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <HAL_UART_MspInit+0x320>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d14a      	bne.n	8003dec <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003d98:	f043 0302 	orr.w	r3, r3, #2
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_UART_MspInit+0x324>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003daa:	2320      	movs	r3, #32
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db6:	2303      	movs	r3, #3
 8003db8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dba:	2307      	movs	r3, #7
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <HAL_UART_MspInit+0x328>)
 8003dc6:	f000 fe5d 	bl	8004a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ddc:	2307      	movs	r3, #7
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003de4:	4619      	mov	r1, r3
 8003de6:	4806      	ldr	r0, [pc, #24]	; (8003e00 <HAL_UART_MspInit+0x32c>)
 8003de8:	f000 fe4c 	bl	8004a84 <HAL_GPIO_Init>
}
 8003dec:	bf00      	nop
 8003dee:	3750      	adds	r7, #80	; 0x50
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40004800 	.word	0x40004800
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40020800 	.word	0x40020800
 8003e00:	40020400 	.word	0x40020400

08003e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e0a:	e003      	b.n	8003e14 <LoopCopyDataInit>

08003e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e12:	3104      	adds	r1, #4

08003e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e1c:	d3f6      	bcc.n	8003e0c <CopyDataInit>
  ldr  r2, =_sbss
 8003e1e:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e20:	e002      	b.n	8003e28 <LoopFillZerobss>

08003e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e24:	f842 3b04 	str.w	r3, [r2], #4

08003e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e2c:	d3f9      	bcc.n	8003e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e2e:	f7ff f97f 	bl	8003130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e32:	f003 fe59 	bl	8007ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e36:	f7fe fbb7 	bl	80025a8 <main>
  bx  lr    
 8003e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e40:	0800d5f8 	.word	0x0800d5f8
  ldr  r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e48:	20000488 	.word	0x20000488
  ldr  r2, =_sbss
 8003e4c:	20000488 	.word	0x20000488
  ldr  r3, = _ebss
 8003e50:	20000a48 	.word	0x20000a48

08003e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <ADC_IRQHandler>
	...

08003e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <HAL_Init+0x40>)
 8003e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_Init+0x40>)
 8003e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_Init+0x40>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <HAL_Init+0x40>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e80:	2003      	movs	r0, #3
 8003e82:	f000 fd2b 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f000 f808 	bl	8003e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e8c:	f7ff f892 	bl	8002fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00

08003e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_InitTick+0x54>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_InitTick+0x58>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fd43 	bl	8004946 <HAL_SYSTICK_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00e      	b.n	8003ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d80a      	bhi.n	8003ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f000 fd0b 	bl	80048f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003edc:	4a06      	ldr	r2, [pc, #24]	; (8003ef8 <HAL_InitTick+0x5c>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200002a8 	.word	0x200002a8
 8003ef4:	200002b0 	.word	0x200002b0
 8003ef8:	200002ac 	.word	0x200002ac

08003efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_IncTick+0x20>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_IncTick+0x24>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_IncTick+0x24>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200002b0 	.word	0x200002b0
 8003f20:	20000a34 	.word	0x20000a34

08003f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return uwTick;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_GetTick+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000a34 	.word	0x20000a34

08003f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7ff ffee 	bl	8003f24 <HAL_GetTick>
 8003f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d005      	beq.n	8003f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_Delay+0x44>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f62:	bf00      	nop
 8003f64:	f7ff ffde 	bl	8003f24 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d8f7      	bhi.n	8003f64 <HAL_Delay+0x28>
  {
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200002b0 	.word	0x200002b0

08003f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e033      	b.n	8004002 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fcfc 	bl	80019a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fca:	f023 0302 	bic.w	r3, r3, #2
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fab4 	bl	8004544 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff2:	e001      	b.n	8003ff8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_ADC_Start+0x1a>
 8004022:	2302      	movs	r3, #2
 8004024:	e0b2      	b.n	800418c <HAL_ADC_Start+0x180>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d018      	beq.n	800406e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800404c:	4b52      	ldr	r3, [pc, #328]	; (8004198 <HAL_ADC_Start+0x18c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a52      	ldr	r2, [pc, #328]	; (800419c <HAL_ADC_Start+0x190>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0c9a      	lsrs	r2, r3, #18
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004060:	e002      	b.n	8004068 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3b01      	subs	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d17a      	bne.n	8004172 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d106      	bne.n	80040ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	f023 0206 	bic.w	r2, r3, #6
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44
 80040c8:	e002      	b.n	80040d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_ADC_Start+0x194>)
 80040da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d12a      	bne.n	8004148 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <HAL_ADC_Start+0x198>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d015      	beq.n	8004128 <HAL_ADC_Start+0x11c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_ADC_Start+0x19c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d105      	bne.n	8004112 <HAL_ADC_Start+0x106>
 8004106:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <HAL_ADC_Start+0x194>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <HAL_ADC_Start+0x1a0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d136      	bne.n	800418a <HAL_ADC_Start+0x17e>
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_ADC_Start+0x194>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d130      	bne.n	800418a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d129      	bne.n	800418a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	e020      	b.n	800418a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <HAL_ADC_Start+0x198>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d11b      	bne.n	800418a <HAL_ADC_Start+0x17e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d114      	bne.n	800418a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	e00b      	b.n	800418a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	200002a8 	.word	0x200002a8
 800419c:	431bde83 	.word	0x431bde83
 80041a0:	40012300 	.word	0x40012300
 80041a4:	40012000 	.word	0x40012000
 80041a8:	40012100 	.word	0x40012100
 80041ac:	40012200 	.word	0x40012200

080041b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d113      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d10b      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e063      	b.n	80042be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041f6:	f7ff fe95 	bl	8003f24 <HAL_GetTick>
 80041fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041fc:	e021      	b.n	8004242 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d01d      	beq.n	8004242 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_ADC_PollForConversion+0x6c>
 800420c:	f7ff fe8a 	bl	8003f24 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d212      	bcs.n	8004242 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d00b      	beq.n	8004242 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e03d      	b.n	80042be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	d1d6      	bne.n	80041fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0212 	mvn.w	r2, #18
 8004258:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d123      	bne.n	80042bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11f      	bne.n	80042bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004294:	2b00      	cmp	r3, #0
 8004296:	d111      	bne.n	80042bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e113      	b.n	8004524 <HAL_ADC_ConfigChannel+0x244>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b09      	cmp	r3, #9
 800430a:	d925      	bls.n	8004358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	3b1e      	subs	r3, #30
 8004322:	2207      	movs	r2, #7
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43da      	mvns	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	400a      	ands	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	4618      	mov	r0, r3
 8004344:	4603      	mov	r3, r0
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4403      	add	r3, r0
 800434a:	3b1e      	subs	r3, #30
 800434c:	409a      	lsls	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e022      	b.n	800439e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	2207      	movs	r2, #7
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	400a      	ands	r2, r1
 800437a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	4603      	mov	r3, r0
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4403      	add	r3, r0
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d824      	bhi.n	80043f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	3b05      	subs	r3, #5
 80043b8:	221f      	movs	r2, #31
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	400a      	ands	r2, r1
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4618      	mov	r0, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	3b05      	subs	r3, #5
 80043e2:	fa00 f203 	lsl.w	r2, r0, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34
 80043ee:	e04c      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d824      	bhi.n	8004442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	3b23      	subs	r3, #35	; 0x23
 800440a:	221f      	movs	r2, #31
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	400a      	ands	r2, r1
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	4618      	mov	r0, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	3b23      	subs	r3, #35	; 0x23
 8004434:	fa00 f203 	lsl.w	r2, r0, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
 8004440:	e023      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b41      	subs	r3, #65	; 0x41
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b41      	subs	r3, #65	; 0x41
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800448a:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_ADC_ConfigChannel+0x250>)
 800448c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a28      	ldr	r2, [pc, #160]	; (8004534 <HAL_ADC_ConfigChannel+0x254>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10f      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x1d8>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b12      	cmp	r3, #18
 800449e:	d10b      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_ADC_ConfigChannel+0x254>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12b      	bne.n	800451a <HAL_ADC_ConfigChannel+0x23a>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <HAL_ADC_ConfigChannel+0x258>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x1f4>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b11      	cmp	r3, #17
 80044d2:	d122      	bne.n	800451a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_ADC_ConfigChannel+0x258>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_ADC_ConfigChannel+0x25c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a11      	ldr	r2, [pc, #68]	; (8004540 <HAL_ADC_ConfigChannel+0x260>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	0c9a      	lsrs	r2, r3, #18
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800450c:	e002      	b.n	8004514 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3b01      	subs	r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f9      	bne.n	800450e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40012300 	.word	0x40012300
 8004534:	40012000 	.word	0x40012000
 8004538:	10000012 	.word	0x10000012
 800453c:	200002a8 	.word	0x200002a8
 8004540:	431bde83 	.word	0x431bde83

08004544 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454c:	4b79      	ldr	r3, [pc, #484]	; (8004734 <ADC_Init+0x1f0>)
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800459c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	4a58      	ldr	r2, [pc, #352]	; (8004738 <ADC_Init+0x1f4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800460c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e00f      	b.n	8004642 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004640:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0202 	bic.w	r2, r2, #2
 8004650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7e1b      	ldrb	r3, [r3, #24]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800468e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	3b01      	subs	r3, #1
 800469c:	035a      	lsls	r2, r3, #13
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	e007      	b.n	80046b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	051a      	lsls	r2, r3, #20
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046fa:	025a      	lsls	r2, r3, #9
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	029a      	lsls	r2, r3, #10
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40012300 	.word	0x40012300
 8004738:	0f000001 	.word	0x0f000001

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <__NVIC_EnableIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db0a      	blt.n	8004806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	490c      	ldr	r1, [pc, #48]	; (8004828 <__NVIC_SetPriority+0x4c>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	0112      	lsls	r2, r2, #4
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	440b      	add	r3, r1
 8004800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004804:	e00a      	b.n	800481c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <__NVIC_SetPriority+0x50>)
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	3b04      	subs	r3, #4
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	440b      	add	r3, r1
 800481a:	761a      	strb	r2, [r3, #24]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000e100 	.word	0xe000e100
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f1c3 0307 	rsb	r3, r3, #7
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf28      	it	cs
 800484e:	2304      	movcs	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3304      	adds	r3, #4
 8004856:	2b06      	cmp	r3, #6
 8004858:	d902      	bls.n	8004860 <NVIC_EncodePriority+0x30>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3b03      	subs	r3, #3
 800485e:	e000      	b.n	8004862 <NVIC_EncodePriority+0x32>
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	401a      	ands	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004878:	f04f 31ff 	mov.w	r1, #4294967295
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43d9      	mvns	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	4313      	orrs	r3, r2
         );
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a8:	d301      	bcc.n	80048ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <SysTick_Config+0x40>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048b6:	210f      	movs	r1, #15
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f7ff ff8e 	bl	80047dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <SysTick_Config+0x40>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048c6:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <SysTick_Config+0x40>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e010 	.word	0xe000e010

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff29 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004904:	f7ff ff3e 	bl	8004784 <__NVIC_GetPriorityGrouping>
 8004908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff8e 	bl	8004830 <NVIC_EncodePriority>
 8004914:	4602      	mov	r2, r0
 8004916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff5d 	bl	80047dc <__NVIC_SetPriority>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff31 	bl	80047a0 <__NVIC_EnableIRQ>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffa2 	bl	8004898 <SysTick_Config>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7ff fada 	bl	8003f24 <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d008      	beq.n	8004990 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e052      	b.n	8004a36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0216 	bic.w	r2, r2, #22
 800499e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <HAL_DMA_Abort+0x62>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0208 	bic.w	r2, r2, #8
 80049ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e0:	e013      	b.n	8004a0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e2:	f7ff fa9f 	bl	8003f24 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d90c      	bls.n	8004a0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2203      	movs	r2, #3
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e015      	b.n	8004a36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e4      	bne.n	80049e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d004      	beq.n	8004a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e00c      	b.n	8004a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	; 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	e165      	b.n	8004d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f040 8154 	bne.w	8004d66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d005      	beq.n	8004ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d130      	bne.n	8004b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 0201 	and.w	r2, r3, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d017      	beq.n	8004b74 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d123      	bne.n	8004bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	08da      	lsrs	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3208      	adds	r2, #8
 8004b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	220f      	movs	r2, #15
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	69b9      	ldr	r1, [r7, #24]
 8004bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0203 	and.w	r2, r3, #3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80ae 	beq.w	8004d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b5d      	ldr	r3, [pc, #372]	; (8004d84 <HAL_GPIO_Init+0x300>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	4a5c      	ldr	r2, [pc, #368]	; (8004d84 <HAL_GPIO_Init+0x300>)
 8004c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c18:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1a:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <HAL_GPIO_Init+0x300>)
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c26:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a4f      	ldr	r2, [pc, #316]	; (8004d8c <HAL_GPIO_Init+0x308>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d025      	beq.n	8004c9e <HAL_GPIO_Init+0x21a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4e      	ldr	r2, [pc, #312]	; (8004d90 <HAL_GPIO_Init+0x30c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01f      	beq.n	8004c9a <HAL_GPIO_Init+0x216>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4d      	ldr	r2, [pc, #308]	; (8004d94 <HAL_GPIO_Init+0x310>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d019      	beq.n	8004c96 <HAL_GPIO_Init+0x212>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4c      	ldr	r2, [pc, #304]	; (8004d98 <HAL_GPIO_Init+0x314>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_GPIO_Init+0x20e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	; (8004d9c <HAL_GPIO_Init+0x318>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00d      	beq.n	8004c8e <HAL_GPIO_Init+0x20a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4a      	ldr	r2, [pc, #296]	; (8004da0 <HAL_GPIO_Init+0x31c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <HAL_GPIO_Init+0x206>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a49      	ldr	r2, [pc, #292]	; (8004da4 <HAL_GPIO_Init+0x320>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <HAL_GPIO_Init+0x202>
 8004c82:	2306      	movs	r3, #6
 8004c84:	e00c      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c86:	2307      	movs	r3, #7
 8004c88:	e00a      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	e008      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	e006      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c92:	2303      	movs	r3, #3
 8004c94:	e004      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e002      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_GPIO_Init+0x21c>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	f002 0203 	and.w	r2, r2, #3
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	4093      	lsls	r3, r2
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb0:	4935      	ldr	r1, [pc, #212]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ce2:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ce8:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d12:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d36:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d60:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <HAL_GPIO_Init+0x324>)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	f67f ae96 	bls.w	8004aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020c00 	.word	0x40020c00
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40021400 	.word	0x40021400
 8004da4:	40021800 	.word	0x40021800
 8004da8:	40013c00 	.word	0x40013c00

08004dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	807b      	strh	r3, [r7, #2]
 8004db8:	4613      	mov	r3, r2
 8004dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dbc:	787b      	ldrb	r3, [r7, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc2:	887a      	ldrh	r2, [r7, #2]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc8:	e003      	b.n	8004dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	041a      	lsls	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	619a      	str	r2, [r3, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0c:	f7ff f88a 	bl	8003f24 <HAL_GetTick>
 8004e10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e12:	e009      	b.n	8004e28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e14:	f7ff f886 	bl	8003f24 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e22:	d901      	bls.n	8004e28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e01f      	b.n	8004e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d1ee      	bne.n	8004e14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e3c:	f7ff f872 	bl	8003f24 <HAL_GetTick>
 8004e40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e42:	e009      	b.n	8004e58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e44:	f7ff f86e 	bl	8003f24 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e52:	d901      	bls.n	8004e58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e007      	b.n	8004e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e64:	d1ee      	bne.n	8004e44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	420e0040 	.word	0x420e0040
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	420e0044 	.word	0x420e0044

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d90c      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b63      	ldr	r3, [pc, #396]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0b8      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eec:	4b53      	ldr	r3, [pc, #332]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	494d      	ldr	r1, [pc, #308]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e067      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fe ffd8 	bl	8003f24 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fe ffd4 	bl	8003f24 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20c      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e032      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4916      	ldr	r1, [pc, #88]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	490e      	ldr	r1, [pc, #56]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005006:	f000 f855 	bl	80050b4 <HAL_RCC_GetSysClockFreq>
 800500a:	4602      	mov	r2, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe ff38 	bl	8003e9c <HAL_InitTick>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	0800cf4c 	.word	0x0800cf4c
 8005044:	200002a8 	.word	0x200002a8
 8005048:	200002ac 	.word	0x200002ac

0800504c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_GetHCLKFreq+0x14>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200002a8 	.word	0x200002a8

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005068:	f7ff fff0 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0a9b      	lsrs	r3, r3, #10
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4903      	ldr	r1, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	0800cf5c 	.word	0x0800cf5c

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005090:	f7ff ffdc 	bl	800504c <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0b5b      	lsrs	r3, r3, #13
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800cf5c 	.word	0x0800cf5c

080050b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b088      	sub	sp, #32
 80050ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d0:	4bce      	ldr	r3, [pc, #824]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	f200 818d 	bhi.w	80053f8 <HAL_RCC_GetSysClockFreq+0x344>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005119 	.word	0x08005119
 80050e8:	080053f9 	.word	0x080053f9
 80050ec:	080053f9 	.word	0x080053f9
 80050f0:	080053f9 	.word	0x080053f9
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	080053f9 	.word	0x080053f9
 80050fc:	080053f9 	.word	0x080053f9
 8005100:	080053f9 	.word	0x080053f9
 8005104:	08005125 	.word	0x08005125
 8005108:	080053f9 	.word	0x080053f9
 800510c:	080053f9 	.word	0x080053f9
 8005110:	080053f9 	.word	0x080053f9
 8005114:	08005299 	.word	0x08005299
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005118:	4bbd      	ldr	r3, [pc, #756]	; (8005410 <HAL_RCC_GetSysClockFreq+0x35c>)
 800511a:	61bb      	str	r3, [r7, #24]
       break;
 800511c:	e16f      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800511e:	4bbd      	ldr	r3, [pc, #756]	; (8005414 <HAL_RCC_GetSysClockFreq+0x360>)
 8005120:	61bb      	str	r3, [r7, #24]
      break;
 8005122:	e16c      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005124:	4bb9      	ldr	r3, [pc, #740]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800512e:	4bb7      	ldr	r3, [pc, #732]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d053      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513a:	4bb4      	ldr	r3, [pc, #720]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	461a      	mov	r2, r3
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	ea02 0400 	and.w	r4, r2, r0
 8005152:	603c      	str	r4, [r7, #0]
 8005154:	400b      	ands	r3, r1
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	014b      	lsls	r3, r1, #5
 800516a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800516e:	0142      	lsls	r2, r0, #5
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	4623      	mov	r3, r4
 8005176:	1ac0      	subs	r0, r0, r3
 8005178:	462b      	mov	r3, r5
 800517a:	eb61 0103 	sbc.w	r1, r1, r3
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	018b      	lsls	r3, r1, #6
 8005188:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800518c:	0182      	lsls	r2, r0, #6
 800518e:	1a12      	subs	r2, r2, r0
 8005190:	eb63 0301 	sbc.w	r3, r3, r1
 8005194:	f04f 0000 	mov.w	r0, #0
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	00d9      	lsls	r1, r3, #3
 800519e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051a2:	00d0      	lsls	r0, r2, #3
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4621      	mov	r1, r4
 80051aa:	1852      	adds	r2, r2, r1
 80051ac:	4629      	mov	r1, r5
 80051ae:	eb43 0101 	adc.w	r1, r3, r1
 80051b2:	460b      	mov	r3, r1
 80051b4:	f04f 0000 	mov.w	r0, #0
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	0259      	lsls	r1, r3, #9
 80051be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051c2:	0250      	lsls	r0, r2, #9
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	f7fb fd78 	bl	8000cc8 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4613      	mov	r3, r2
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e04c      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b8a      	ldr	r3, [pc, #552]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	461a      	mov	r2, r3
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	ea02 0a00 	and.w	sl, r2, r0
 80051fa:	ea03 0b01 	and.w	fp, r3, r1
 80051fe:	4650      	mov	r0, sl
 8005200:	4659      	mov	r1, fp
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	014b      	lsls	r3, r1, #5
 800520c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005210:	0142      	lsls	r2, r0, #5
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	ebb0 000a 	subs.w	r0, r0, sl
 800521a:	eb61 010b 	sbc.w	r1, r1, fp
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800522c:	0182      	lsls	r2, r0, #6
 800522e:	1a12      	subs	r2, r2, r0
 8005230:	eb63 0301 	sbc.w	r3, r3, r1
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	00d9      	lsls	r1, r3, #3
 800523e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005242:	00d0      	lsls	r0, r2, #3
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	eb12 020a 	adds.w	r2, r2, sl
 800524c:	eb43 030b 	adc.w	r3, r3, fp
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	0299      	lsls	r1, r3, #10
 800525a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800525e:	0290      	lsls	r0, r2, #10
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f7fb fd2a 	bl	8000cc8 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800527c:	4b63      	ldr	r3, [pc, #396]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	3301      	adds	r3, #1
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	61bb      	str	r3, [r7, #24]
      break;
 8005296:	e0b2      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005298:	4b5c      	ldr	r3, [pc, #368]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a2:	4b5a      	ldr	r3, [pc, #360]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04d      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ae:	4b57      	ldr	r3, [pc, #348]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	461a      	mov	r2, r3
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052be:	f04f 0100 	mov.w	r1, #0
 80052c2:	ea02 0800 	and.w	r8, r2, r0
 80052c6:	ea03 0901 	and.w	r9, r3, r1
 80052ca:	4640      	mov	r0, r8
 80052cc:	4649      	mov	r1, r9
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	014b      	lsls	r3, r1, #5
 80052d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052dc:	0142      	lsls	r2, r0, #5
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	ebb0 0008 	subs.w	r0, r0, r8
 80052e6:	eb61 0109 	sbc.w	r1, r1, r9
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	018b      	lsls	r3, r1, #6
 80052f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052f8:	0182      	lsls	r2, r0, #6
 80052fa:	1a12      	subs	r2, r2, r0
 80052fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005300:	f04f 0000 	mov.w	r0, #0
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	00d9      	lsls	r1, r3, #3
 800530a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800530e:	00d0      	lsls	r0, r2, #3
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	eb12 0208 	adds.w	r2, r2, r8
 8005318:	eb43 0309 	adc.w	r3, r3, r9
 800531c:	f04f 0000 	mov.w	r0, #0
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	0259      	lsls	r1, r3, #9
 8005326:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800532a:	0250      	lsls	r0, r2, #9
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	461a      	mov	r2, r3
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f7fb fcc4 	bl	8000cc8 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e04a      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534a:	4b30      	ldr	r3, [pc, #192]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	099b      	lsrs	r3, r3, #6
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	ea02 0400 	and.w	r4, r2, r0
 8005362:	ea03 0501 	and.w	r5, r3, r1
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	014b      	lsls	r3, r1, #5
 8005374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005378:	0142      	lsls	r2, r0, #5
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	1b00      	subs	r0, r0, r4
 8005380:	eb61 0105 	sbc.w	r1, r1, r5
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	018b      	lsls	r3, r1, #6
 800538e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005392:	0182      	lsls	r2, r0, #6
 8005394:	1a12      	subs	r2, r2, r0
 8005396:	eb63 0301 	sbc.w	r3, r3, r1
 800539a:	f04f 0000 	mov.w	r0, #0
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	00d9      	lsls	r1, r3, #3
 80053a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053a8:	00d0      	lsls	r0, r2, #3
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	1912      	adds	r2, r2, r4
 80053b0:	eb45 0303 	adc.w	r3, r5, r3
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0299      	lsls	r1, r3, #10
 80053be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053c2:	0290      	lsls	r0, r2, #10
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f7fb fc78 	bl	8000cc8 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4613      	mov	r3, r2
 80053de:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	0f1b      	lsrs	r3, r3, #28
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	61bb      	str	r3, [r7, #24]
      break;
 80053f6:	e002      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetSysClockFreq+0x35c>)
 80053fa:	61bb      	str	r3, [r7, #24]
      break;
 80053fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fe:	69bb      	ldr	r3, [r7, #24]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	00f42400 	.word	0x00f42400
 8005414:	007a1200 	.word	0x007a1200

08005418 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e28d      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8083 	beq.w	800553e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005438:	4b94      	ldr	r3, [pc, #592]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b04      	cmp	r3, #4
 8005442:	d019      	beq.n	8005478 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005444:	4b91      	ldr	r3, [pc, #580]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800544c:	2b08      	cmp	r3, #8
 800544e:	d106      	bne.n	800545e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005450:	4b8e      	ldr	r3, [pc, #568]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545c:	d00c      	beq.n	8005478 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545e:	4b8b      	ldr	r3, [pc, #556]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005466:	2b0c      	cmp	r3, #12
 8005468:	d112      	bne.n	8005490 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800546a:	4b88      	ldr	r3, [pc, #544]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005476:	d10b      	bne.n	8005490 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05b      	beq.n	800553c <HAL_RCC_OscConfig+0x124>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d157      	bne.n	800553c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e25a      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005498:	d106      	bne.n	80054a8 <HAL_RCC_OscConfig+0x90>
 800549a:	4b7c      	ldr	r3, [pc, #496]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a7b      	ldr	r2, [pc, #492]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e01d      	b.n	80054e4 <HAL_RCC_OscConfig+0xcc>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0xb4>
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a75      	ldr	r2, [pc, #468]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b73      	ldr	r3, [pc, #460]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a72      	ldr	r2, [pc, #456]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0xcc>
 80054cc:	4b6f      	ldr	r3, [pc, #444]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6e      	ldr	r2, [pc, #440]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b6c      	ldr	r3, [pc, #432]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a6b      	ldr	r2, [pc, #428]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80054de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fe fd1a 	bl	8003f24 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fe fd16 	bl	8003f24 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	; 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e21f      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0xdc>
 8005512:	e014      	b.n	800553e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fd06 	bl	8003f24 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800551c:	f7fe fd02 	bl	8003f24 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e20b      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552e:	4b57      	ldr	r3, [pc, #348]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x104>
 800553a:	e000      	b.n	800553e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d06f      	beq.n	800562a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800554a:	4b50      	ldr	r3, [pc, #320]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005556:	4b4d      	ldr	r3, [pc, #308]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800555e:	2b08      	cmp	r3, #8
 8005560:	d105      	bne.n	800556e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005562:	4b4a      	ldr	r3, [pc, #296]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d11c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x274>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_RCC_OscConfig+0x186>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e1d3      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4937      	ldr	r1, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	e03a      	b.n	800562a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCC_OscConfig+0x278>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fe fcaf 	bl	8003f24 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fe fcab 	bl	8003f24 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e1b4      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4925      	ldr	r1, [pc, #148]	; (800568c <HAL_RCC_OscConfig+0x274>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x278>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe fc8e 	bl	8003f24 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560c:	f7fe fc8a 	bl	8003f24 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e193      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d036      	beq.n	80056a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fe fc6e 	bl	8003f24 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fe fc6a 	bl	8003f24 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e173      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x234>
 800566a:	e01b      	b.n	80056a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005672:	f7fe fc57 	bl	8003f24 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	e00e      	b.n	8005698 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567a:	f7fe fc53 	bl	8003f24 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d907      	bls.n	8005698 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e15c      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
 800568c:	40023800 	.word	0x40023800
 8005690:	42470000 	.word	0x42470000
 8005694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	4b8a      	ldr	r3, [pc, #552]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8097 	beq.w	80057e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b6:	4b83      	ldr	r3, [pc, #524]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b7f      	ldr	r3, [pc, #508]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	4a7e      	ldr	r2, [pc, #504]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6413      	str	r3, [r2, #64]	; 0x40
 80056d2:	4b7c      	ldr	r3, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b79      	ldr	r3, [pc, #484]	; (80058c8 <HAL_RCC_OscConfig+0x4b0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b76      	ldr	r3, [pc, #472]	; (80058c8 <HAL_RCC_OscConfig+0x4b0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a75      	ldr	r2, [pc, #468]	; (80058c8 <HAL_RCC_OscConfig+0x4b0>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fe fc13 	bl	8003f24 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fe fc0f 	bl	8003f24 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e118      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	4b6c      	ldr	r3, [pc, #432]	; (80058c8 <HAL_RCC_OscConfig+0x4b0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x31e>
 8005728:	4b66      	ldr	r3, [pc, #408]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a65      	ldr	r2, [pc, #404]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	e01c      	b.n	8005770 <HAL_RCC_OscConfig+0x358>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x340>
 800573e:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a60      	ldr	r2, [pc, #384]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	4b5e      	ldr	r3, [pc, #376]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a5d      	ldr	r2, [pc, #372]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0x358>
 8005758:	4b5a      	ldr	r3, [pc, #360]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a59      	ldr	r2, [pc, #356]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	4b57      	ldr	r3, [pc, #348]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a56      	ldr	r2, [pc, #344]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fe fbd4 	bl	8003f24 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	e00a      	b.n	8005796 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fe fbd0 	bl	8003f24 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0d7      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RCC_OscConfig+0x368>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fe fbbe 	bl	8003f24 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fe fbba 	bl	8003f24 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0c1      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c2:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ee      	bne.n	80057ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d4:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80ad 	beq.w	8005944 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d060      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d145      	bne.n	800588a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fe:	4b33      	ldr	r3, [pc, #204]	; (80058cc <HAL_RCC_OscConfig+0x4b4>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fe fb8e 	bl	8003f24 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800580c:	f7fe fb8a 	bl	8003f24 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e093      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	491b      	ldr	r1, [pc, #108]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	4313      	orrs	r3, r2
 800585a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_OscConfig+0x4b4>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fe fb5f 	bl	8003f24 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586a:	f7fe fb5b 	bl	8003f24 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e064      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x452>
 8005888:	e05c      	b.n	8005944 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_RCC_OscConfig+0x4b4>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fe fb48 	bl	8003f24 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005898:	f7fe fb44 	bl	8003f24 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e04d      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_RCC_OscConfig+0x4ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x480>
 80058b6:	e045      	b.n	8005944 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e040      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40007000 	.word	0x40007000
 80058cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d0:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <HAL_RCC_OscConfig+0x538>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d030      	beq.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d129      	bne.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d122      	bne.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005908:	4293      	cmp	r3, r2
 800590a:	d119      	bne.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	3b01      	subs	r3, #1
 800591a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d10f      	bne.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d107      	bne.n	8005940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40023800 	.word	0x40023800

08005954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e041      	b.n	80059ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fd febe 	bl	80036fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 fda6 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d001      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04e      	b.n	8005aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a23      	ldr	r2, [pc, #140]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d01d      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_TIM_Base_Start_IT+0xc8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <HAL_TIM_Base_Start_IT+0xd8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d111      	bne.n	8005a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d010      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a96:	e007      	b.n	8005aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e041      	b.n	8005b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f839 	bl	8005b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 fce6 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_TIM_PWM_Start+0x24>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e022      	b.n	8005bf2 <HAL_TIM_PWM_Start+0x6a>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d109      	bne.n	8005bc6 <HAL_TIM_PWM_Start+0x3e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	e015      	b.n	8005bf2 <HAL_TIM_PWM_Start+0x6a>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d109      	bne.n	8005be0 <HAL_TIM_PWM_Start+0x58>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e008      	b.n	8005bf2 <HAL_TIM_PWM_Start+0x6a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e07c      	b.n	8005cf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x82>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	e013      	b.n	8005c32 <HAL_TIM_PWM_Start+0xaa>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x92>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	e00b      	b.n	8005c32 <HAL_TIM_PWM_Start+0xaa>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xa2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c28:	e003      	b.n	8005c32 <HAL_TIM_PWM_Start+0xaa>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2201      	movs	r2, #1
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 ff3c 	bl	8006ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <HAL_TIM_PWM_Start+0x174>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_PWM_Start+0xcc>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <HAL_TIM_PWM_Start+0x178>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_PWM_Start+0xd0>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_TIM_PWM_Start+0xd2>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <HAL_TIM_PWM_Start+0x174>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d01d      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_PWM_Start+0x17c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_TIM_PWM_Start+0x180>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIM_PWM_Start+0x184>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <HAL_TIM_PWM_Start+0x178>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <HAL_TIM_PWM_Start+0x188>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x136>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <HAL_TIM_PWM_Start+0x18c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d111      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b06      	cmp	r3, #6
 8005cce:	d010      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce0:	e007      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40001800 	.word	0x40001800

08005d18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e097      	b.n	8005e5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fd fc5f 	bl	8003604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 fbb9 	bl	80064e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	4313      	orrs	r3, r2
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005db8:	f023 030c 	bic.w	r3, r3, #12
 8005dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	031b      	lsls	r3, r3, #12
 8005de8:	4313      	orrs	r3, r2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d110      	bne.n	8005eb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d102      	bne.n	8005ea0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d001      	beq.n	8005ea4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e069      	b.n	8005f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	e031      	b.n	8005f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d110      	bne.n	8005ede <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d102      	bne.n	8005ec8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec2:	7b3b      	ldrb	r3, [r7, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e055      	b.n	8005f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005edc:	e01d      	b.n	8005f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d108      	bne.n	8005ef6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eea:	7b7b      	ldrb	r3, [r7, #13]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d102      	bne.n	8005ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ef0:	7b3b      	ldrb	r3, [r7, #12]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e03e      	b.n	8005f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_TIM_Encoder_Start+0xc4>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d008      	beq.n	8005f38 <HAL_TIM_Encoder_Start+0xd4>
 8005f26:	e00f      	b.n	8005f48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fdc1 	bl	8006ab8 <TIM_CCxChannelCmd>
      break;
 8005f36:	e016      	b.n	8005f66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2104      	movs	r1, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fdb9 	bl	8006ab8 <TIM_CCxChannelCmd>
      break;
 8005f46:	e00e      	b.n	8005f66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fdb1 	bl	8006ab8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	2104      	movs	r1, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fdaa 	bl	8006ab8 <TIM_CCxChannelCmd>
      break;
 8005f64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d122      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d11b      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0202 	mvn.w	r2, #2
 8005fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa70 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fa62 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fa73 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d122      	bne.n	8006030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d11b      	bne.n	8006030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0204 	mvn.w	r2, #4
 8006000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa46 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 800601c:	e005      	b.n	800602a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa38 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa49 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b08      	cmp	r3, #8
 800603c:	d122      	bne.n	8006084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d11b      	bne.n	8006084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0208 	mvn.w	r2, #8
 8006054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2204      	movs	r2, #4
 800605a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa1c 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 8006070:	e005      	b.n	800607e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa0e 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa1f 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b10      	cmp	r3, #16
 8006090:	d122      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b10      	cmp	r3, #16
 800609e:	d11b      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0210 	mvn.w	r2, #16
 80060a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2208      	movs	r2, #8
 80060ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9f2 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9e4 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f9f5 	bl	80064bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0201 	mvn.w	r2, #1
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fc fbda 	bl	80028b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b80      	cmp	r3, #128	; 0x80
 8006110:	d10e      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	d107      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fdc2 	bl	8006cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d10e      	bne.n	800615c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d107      	bne.n	800615c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9ba 	bl	80064d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b20      	cmp	r3, #32
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0220 	mvn.w	r2, #32
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fd8c 	bl	8006ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0ac      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x174>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	f200 809f 	bhi.w	80062f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080062f9 	.word	0x080062f9
 80061c8:	080062f9 	.word	0x080062f9
 80061cc:	080062f9 	.word	0x080062f9
 80061d0:	08006235 	.word	0x08006235
 80061d4:	080062f9 	.word	0x080062f9
 80061d8:	080062f9 	.word	0x080062f9
 80061dc:	080062f9 	.word	0x080062f9
 80061e0:	08006277 	.word	0x08006277
 80061e4:	080062f9 	.word	0x080062f9
 80061e8:	080062f9 	.word	0x080062f9
 80061ec:	080062f9 	.word	0x080062f9
 80061f0:	080062b7 	.word	0x080062b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fa12 	bl	8006624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
      break;
 8006232:	e062      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa62 	bl	8006704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6999      	ldr	r1, [r3, #24]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]
      break;
 8006274:	e041      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fab7 	bl	80067f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0208 	orr.w	r2, r2, #8
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0204 	bic.w	r2, r2, #4
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	61da      	str	r2, [r3, #28]
      break;
 80062b4:	e021      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fb0b 	bl	80068d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69d9      	ldr	r1, [r3, #28]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	61da      	str	r2, [r3, #28]
      break;
 80062f6:	e000      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80062f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_TIM_ConfigClockSource+0x18>
 8006320:	2302      	movs	r3, #2
 8006322:	e0b3      	b.n	800648c <HAL_TIM_ConfigClockSource+0x180>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800634a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635c:	d03e      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0xd0>
 800635e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006362:	f200 8087 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x168>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	f000 8085 	beq.w	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d87f      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d01a      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0xa2>
 8006378:	2b70      	cmp	r3, #112	; 0x70
 800637a:	d87b      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d050      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x116>
 8006380:	2b60      	cmp	r3, #96	; 0x60
 8006382:	d877      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d03c      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0xf6>
 8006388:	2b50      	cmp	r3, #80	; 0x50
 800638a:	d873      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d058      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x136>
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d86f      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d064      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x156>
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d86b      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d060      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x156>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d867      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05c      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x156>
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d05a      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063ac:	e062      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6899      	ldr	r1, [r3, #8]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f000 fb5b 	bl	8006a78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	609a      	str	r2, [r3, #8]
      break;
 80063da:	e04e      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	6899      	ldr	r1, [r3, #8]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f000 fb44 	bl	8006a78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fe:	609a      	str	r2, [r3, #8]
      break;
 8006400:	e03b      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fab8 	bl	8006984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2150      	movs	r1, #80	; 0x50
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb11 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006420:	e02b      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	461a      	mov	r2, r3
 8006430:	f000 fad7 	bl	80069e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2160      	movs	r1, #96	; 0x60
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fb01 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006440:	e01b      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6859      	ldr	r1, [r3, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	461a      	mov	r2, r3
 8006450:	f000 fa98 	bl	8006984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	4618      	mov	r0, r3
 800645c:	f000 faf1 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006460:	e00b      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f000 fae8 	bl	8006a42 <TIM_ITRx_SetConfig>
        break;
 8006472:	e002      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a40      	ldr	r2, [pc, #256]	; (80065f8 <TIM_Base_SetConfig+0x114>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3d      	ldr	r2, [pc, #244]	; (80065fc <TIM_Base_SetConfig+0x118>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3c      	ldr	r2, [pc, #240]	; (8006600 <TIM_Base_SetConfig+0x11c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a3b      	ldr	r2, [pc, #236]	; (8006604 <TIM_Base_SetConfig+0x120>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a3a      	ldr	r2, [pc, #232]	; (8006608 <TIM_Base_SetConfig+0x124>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <TIM_Base_SetConfig+0x114>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d02b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d027      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <TIM_Base_SetConfig+0x118>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d023      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <TIM_Base_SetConfig+0x11c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01f      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <TIM_Base_SetConfig+0x120>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a29      	ldr	r2, [pc, #164]	; (8006608 <TIM_Base_SetConfig+0x124>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d017      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <TIM_Base_SetConfig+0x128>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a27      	ldr	r2, [pc, #156]	; (8006610 <TIM_Base_SetConfig+0x12c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a26      	ldr	r2, [pc, #152]	; (8006614 <TIM_Base_SetConfig+0x130>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <TIM_Base_SetConfig+0x134>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a24      	ldr	r2, [pc, #144]	; (800661c <TIM_Base_SetConfig+0x138>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <TIM_Base_SetConfig+0x13c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d108      	bne.n	80065a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <TIM_Base_SetConfig+0x114>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_Base_SetConfig+0xf8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <TIM_Base_SetConfig+0x124>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d103      	bne.n	80065e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	615a      	str	r2, [r3, #20]
}
 80065ea:	bf00      	nop
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40010400 	.word	0x40010400
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400
 8006614:	40014800 	.word	0x40014800
 8006618:	40001800 	.word	0x40001800
 800661c:	40001c00 	.word	0x40001c00
 8006620:	40002000 	.word	0x40002000

08006624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f023 0302 	bic.w	r3, r3, #2
 800666c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a20      	ldr	r2, [pc, #128]	; (80066fc <TIM_OC1_SetConfig+0xd8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_OC1_SetConfig+0x64>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <TIM_OC1_SetConfig+0xdc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d10c      	bne.n	80066a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0308 	bic.w	r3, r3, #8
 800668e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 0304 	bic.w	r3, r3, #4
 80066a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a15      	ldr	r2, [pc, #84]	; (80066fc <TIM_OC1_SetConfig+0xd8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_OC1_SetConfig+0x8e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <TIM_OC1_SetConfig+0xdc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d111      	bne.n	80066d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0210 	bic.w	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0320 	bic.w	r3, r3, #32
 800674e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <TIM_OC2_SetConfig+0xe4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC2_SetConfig+0x68>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <TIM_OC2_SetConfig+0xe8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10d      	bne.n	8006788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <TIM_OC2_SetConfig+0xe4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0x94>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a16      	ldr	r2, [pc, #88]	; (80067ec <TIM_OC2_SetConfig+0xe8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a21      	ldr	r2, [pc, #132]	; (80068d0 <TIM_OC3_SetConfig+0xe0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_OC3_SetConfig+0x66>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <TIM_OC3_SetConfig+0xe4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10d      	bne.n	8006872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a16      	ldr	r2, [pc, #88]	; (80068d0 <TIM_OC3_SetConfig+0xe0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_OC3_SetConfig+0x92>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <TIM_OC3_SetConfig+0xe4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d113      	bne.n	80068aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40010400 	.word	0x40010400

080068d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	031b      	lsls	r3, r3, #12
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a12      	ldr	r2, [pc, #72]	; (800697c <TIM_OC4_SetConfig+0xa4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC4_SetConfig+0x68>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a11      	ldr	r2, [pc, #68]	; (8006980 <TIM_OC4_SetConfig+0xa8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d109      	bne.n	8006954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f023 030a 	bic.w	r3, r3, #10
 80069c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b087      	sub	sp, #28
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0210 	bic.w	r2, r3, #16
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	031b      	lsls	r3, r3, #12
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f043 0307 	orr.w	r3, r3, #7
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	609a      	str	r2, [r3, #8]
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	021a      	lsls	r2, r3, #8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	2201      	movs	r2, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1a      	ldr	r2, [r3, #32]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e05a      	b.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a21      	ldr	r2, [pc, #132]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40010400 	.word	0x40010400
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40001800 	.word	0x40001800

08006bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e03d      	b.n	8006c94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e03f      	b.n	8006d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fc fef0 	bl	8003ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	; 0x24
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fd1d 	bl	800774c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b08a      	sub	sp, #40	; 0x28
 8006d66:	af02      	add	r7, sp, #8
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d17c      	bne.n	8006e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_UART_Transmit+0x2c>
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e075      	b.n	8006e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Transmit+0x3e>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e06e      	b.n	8006e7e <HAL_UART_Transmit+0x11c>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2221      	movs	r2, #33	; 0x21
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006db6:	f7fd f8b5 	bl	8003f24 <HAL_GetTick>
 8006dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	d108      	bne.n	8006de4 <HAL_UART_Transmit+0x82>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d104      	bne.n	8006de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e003      	b.n	8006dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006df4:	e02a      	b.n	8006e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2180      	movs	r1, #128	; 0x80
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fadf 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e036      	b.n	8006e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	3302      	adds	r3, #2
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	e007      	b.n	8006e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1cf      	bne.n	8006df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2140      	movs	r1, #64	; 0x40
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 faaf 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e006      	b.n	8006e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b08a      	sub	sp, #40	; 0x28
 8006e8a:	af02      	add	r7, sp, #8
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	f040 808c 	bne.w	8006fc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_UART_Receive+0x2e>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e084      	b.n	8006fc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Receive+0x40>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e07d      	b.n	8006fc2 <HAL_UART_Receive+0x13c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2222      	movs	r2, #34	; 0x22
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee2:	f7fd f81f 	bl	8003f24 <HAL_GetTick>
 8006ee6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	d108      	bne.n	8006f10 <HAL_UART_Receive+0x8a>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e003      	b.n	8006f18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f20:	e043      	b.n	8006faa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2120      	movs	r1, #32
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fa49 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e042      	b.n	8006fc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10c      	bne.n	8006f5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	3302      	adds	r3, #2
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e01f      	b.n	8006f9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d007      	beq.n	8006f76 <HAL_UART_Receive+0xf0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_UART_Receive+0xfe>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e008      	b.n	8006f96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1b6      	bne.n	8006f22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d11d      	bne.n	8007020 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_UART_Receive_IT+0x26>
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e016      	b.n	8007022 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Receive_IT+0x38>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e00f      	b.n	8007022 <HAL_UART_Receive_IT+0x58>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	461a      	mov	r2, r3
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fa1e 	bl	8007458 <UART_Start_Receive_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	e000      	b.n	8007022 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800704c:	2300      	movs	r3, #0
 800704e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10d      	bne.n	800707e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_UART_IRQHandler+0x52>
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fad1 	bl	800761e <UART_Receive_IT>
      return;
 800707c:	e17c      	b.n	8007378 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80b1 	beq.w	80071e8 <HAL_UART_IRQHandler+0x1bc>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <HAL_UART_IRQHandler+0x70>
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80a6 	beq.w	80071e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <HAL_UART_IRQHandler+0x90>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	f043 0201 	orr.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_UART_IRQHandler+0xb0>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	f043 0202 	orr.w	r2, r3, #2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_UART_IRQHandler+0xd0>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	f043 0204 	orr.w	r2, r3, #4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00f      	beq.n	8007126 <HAL_UART_IRQHandler+0xfa>
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_UART_IRQHandler+0xee>
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f043 0208 	orr.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 811f 	beq.w	800736e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_UART_IRQHandler+0x11e>
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa6a 	bl	800761e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_UART_IRQHandler+0x146>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d031      	beq.n	80071d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9aa 	bl	80074cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b40      	cmp	r3, #64	; 0x40
 8007184:	d123      	bne.n	80071ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007194:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	4a77      	ldr	r2, [pc, #476]	; (8007380 <HAL_UART_IRQHandler+0x354>)
 80071a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fd fc47 	bl	8004a3e <HAL_DMA_Abort_IT>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d016      	beq.n	80071e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	e00e      	b.n	80071e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f8e6 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	e00a      	b.n	80071e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f8e2 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e006      	b.n	80071e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8de 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071e2:	e0c4      	b.n	800736e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	bf00      	nop
    return;
 80071e6:	e0c2      	b.n	800736e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	f040 80a2 	bne.w	8007336 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 809c 	beq.w	8007336 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8096 	beq.w	8007336 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d14f      	bne.n	80072ce <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007238:	8a3b      	ldrh	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8099 	beq.w	8007372 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007244:	8a3a      	ldrh	r2, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	f080 8093 	bcs.w	8007372 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8a3a      	ldrh	r2, [r7, #16]
 8007250:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725c:	d02b      	beq.n	80072b6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800726c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	695a      	ldr	r2, [r3, #20]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0210 	bic.w	r2, r2, #16
 80072aa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fd fb54 	bl	800495e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f870 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072cc:	e051      	b.n	8007372 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d047      	beq.n	8007376 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80072e6:	8a7b      	ldrh	r3, [r7, #18]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d044      	beq.n	8007376 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072fa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695a      	ldr	r2, [r3, #20]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0201 	bic.w	r2, r2, #1
 800730a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0210 	bic.w	r2, r2, #16
 8007328:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800732a:	8a7b      	ldrh	r3, [r7, #18]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f83c 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007334:	e01f      	b.n	8007376 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_UART_IRQHandler+0x326>
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f8ff 	bl	800754e <UART_Transmit_IT>
    return;
 8007350:	e012      	b.n	8007378 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <HAL_UART_IRQHandler+0x34c>
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f941 	bl	80075ee <UART_EndTransmit_IT>
    return;
 800736c:	e004      	b.n	8007378 <HAL_UART_IRQHandler+0x34c>
    return;
 800736e:	bf00      	nop
 8007370:	e002      	b.n	8007378 <HAL_UART_IRQHandler+0x34c>
      return;
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <HAL_UART_IRQHandler+0x34c>
      return;
 8007376:	bf00      	nop
  }
}
 8007378:	3728      	adds	r7, #40	; 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	08007527 	.word	0x08007527

08007384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d4:	e02c      	b.n	8007430 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d028      	beq.n	8007430 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073e4:	f7fc fd9e 	bl	8003f24 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d21d      	bcs.n	8007430 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007402:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e00f      	b.n	8007450 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	429a      	cmp	r2, r3
 800744c:	d0c3      	beq.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2222      	movs	r2, #34	; 0x22
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800749c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d107      	bne.n	800750c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0210 	bic.w	r2, r2, #16
 800750a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff ff29 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b21      	cmp	r3, #33	; 0x21
 8007560:	d13e      	bne.n	80075e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d114      	bne.n	8007596 <UART_Transmit_IT+0x48>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d110      	bne.n	8007596 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	1c9a      	adds	r2, r3, #2
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	621a      	str	r2, [r3, #32]
 8007594:	e008      	b.n	80075a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6211      	str	r1, [r2, #32]
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	4619      	mov	r1, r3
 80075b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10f      	bne.n	80075dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	e000      	b.n	80075e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075e0:	2302      	movs	r3, #2
  }
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff feb8 	bl	8007384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b22      	cmp	r3, #34	; 0x22
 8007630:	f040 8087 	bne.w	8007742 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763c:	d117      	bne.n	800766e <UART_Receive_IT+0x50>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d113      	bne.n	800766e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	b29a      	uxth	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	629a      	str	r2, [r3, #40]	; 0x28
 800766c:	e026      	b.n	80076bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007680:	d007      	beq.n	8007692 <UART_Receive_IT+0x74>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <UART_Receive_IT+0x82>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e008      	b.n	80076b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4619      	mov	r1, r3
 80076ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d136      	bne.n	800773e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0220 	bic.w	r2, r2, #32
 80076de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10e      	bne.n	800772e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0210 	bic.w	r2, r2, #16
 800771e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff fe40 	bl	80073ac <HAL_UARTEx_RxEventCallback>
 800772c:	e002      	b.n	8007734 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fb f95a 	bl	80029e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	e002      	b.n	8007744 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	b09f      	sub	sp, #124	; 0x7c
 8007752:	af00      	add	r7, sp, #0
 8007754:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	68d9      	ldr	r1, [r3, #12]
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	ea40 0301 	orr.w	r3, r0, r1
 800776c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800776e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	431a      	orrs	r2, r3
 8007778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	431a      	orrs	r2, r3
 800777e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4313      	orrs	r3, r2
 8007784:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007790:	f021 010c 	bic.w	r1, r1, #12
 8007794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779a:	430b      	orrs	r3, r1
 800779c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800779e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	6999      	ldr	r1, [r3, #24]
 80077ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	ea40 0301 	orr.w	r3, r0, r1
 80077b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4bc5      	ldr	r3, [pc, #788]	; (8007ad0 <UART_SetConfig+0x384>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d004      	beq.n	80077ca <UART_SetConfig+0x7e>
 80077c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4bc3      	ldr	r3, [pc, #780]	; (8007ad4 <UART_SetConfig+0x388>)
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d103      	bne.n	80077d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077ca:	f7fd fc5f 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 80077ce:	6778      	str	r0, [r7, #116]	; 0x74
 80077d0:	e002      	b.n	80077d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077d2:	f7fd fc47 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 80077d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e0:	f040 80b6 	bne.w	8007950 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e6:	461c      	mov	r4, r3
 80077e8:	f04f 0500 	mov.w	r5, #0
 80077ec:	4622      	mov	r2, r4
 80077ee:	462b      	mov	r3, r5
 80077f0:	1891      	adds	r1, r2, r2
 80077f2:	6439      	str	r1, [r7, #64]	; 0x40
 80077f4:	415b      	adcs	r3, r3
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
 80077f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077fc:	1912      	adds	r2, r2, r4
 80077fe:	eb45 0303 	adc.w	r3, r5, r3
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	00d9      	lsls	r1, r3, #3
 800780c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007810:	00d0      	lsls	r0, r2, #3
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	1911      	adds	r1, r2, r4
 8007818:	6639      	str	r1, [r7, #96]	; 0x60
 800781a:	416b      	adcs	r3, r5
 800781c:	667b      	str	r3, [r7, #100]	; 0x64
 800781e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	461a      	mov	r2, r3
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	1891      	adds	r1, r2, r2
 800782a:	63b9      	str	r1, [r7, #56]	; 0x38
 800782c:	415b      	adcs	r3, r3
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007834:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007838:	f7f9 fa46 	bl	8000cc8 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4ba5      	ldr	r3, [pc, #660]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007842:	fba3 2302 	umull	r2, r3, r3, r2
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	011e      	lsls	r6, r3, #4
 800784a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784c:	461c      	mov	r4, r3
 800784e:	f04f 0500 	mov.w	r5, #0
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	1891      	adds	r1, r2, r2
 8007858:	6339      	str	r1, [r7, #48]	; 0x30
 800785a:	415b      	adcs	r3, r3
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
 800785e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007862:	1912      	adds	r2, r2, r4
 8007864:	eb45 0303 	adc.w	r3, r5, r3
 8007868:	f04f 0000 	mov.w	r0, #0
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	00d9      	lsls	r1, r3, #3
 8007872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007876:	00d0      	lsls	r0, r2, #3
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	1911      	adds	r1, r2, r4
 800787e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007880:	416b      	adcs	r3, r5
 8007882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	461a      	mov	r2, r3
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	1891      	adds	r1, r2, r2
 8007890:	62b9      	str	r1, [r7, #40]	; 0x28
 8007892:	415b      	adcs	r3, r3
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800789a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800789e:	f7f9 fa13 	bl	8000cc8 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4b8c      	ldr	r3, [pc, #560]	; (8007ad8 <UART_SetConfig+0x38c>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	; 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	3332      	adds	r3, #50	; 0x32
 80078ba:	4a87      	ldr	r2, [pc, #540]	; (8007ad8 <UART_SetConfig+0x38c>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078c8:	441e      	add	r6, r3
 80078ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078cc:	4618      	mov	r0, r3
 80078ce:	f04f 0100 	mov.w	r1, #0
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	1894      	adds	r4, r2, r2
 80078d8:	623c      	str	r4, [r7, #32]
 80078da:	415b      	adcs	r3, r3
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
 80078de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078e2:	1812      	adds	r2, r2, r0
 80078e4:	eb41 0303 	adc.w	r3, r1, r3
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	f04f 0500 	mov.w	r5, #0
 80078f0:	00dd      	lsls	r5, r3, #3
 80078f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078f6:	00d4      	lsls	r4, r2, #3
 80078f8:	4622      	mov	r2, r4
 80078fa:	462b      	mov	r3, r5
 80078fc:	1814      	adds	r4, r2, r0
 80078fe:	653c      	str	r4, [r7, #80]	; 0x50
 8007900:	414b      	adcs	r3, r1
 8007902:	657b      	str	r3, [r7, #84]	; 0x54
 8007904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	461a      	mov	r2, r3
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	1891      	adds	r1, r2, r2
 8007910:	61b9      	str	r1, [r7, #24]
 8007912:	415b      	adcs	r3, r3
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800791a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800791e:	f7f9 f9d3 	bl	8000cc8 <__aeabi_uldivmod>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4b6c      	ldr	r3, [pc, #432]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007928:	fba3 1302 	umull	r1, r3, r3, r2
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	2164      	movs	r1, #100	; 0x64
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	3332      	adds	r3, #50	; 0x32
 800793a:	4a67      	ldr	r2, [pc, #412]	; (8007ad8 <UART_SetConfig+0x38c>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	f003 0207 	and.w	r2, r3, #7
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4432      	add	r2, r6
 800794c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800794e:	e0b9      	b.n	8007ac4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007952:	461c      	mov	r4, r3
 8007954:	f04f 0500 	mov.w	r5, #0
 8007958:	4622      	mov	r2, r4
 800795a:	462b      	mov	r3, r5
 800795c:	1891      	adds	r1, r2, r2
 800795e:	6139      	str	r1, [r7, #16]
 8007960:	415b      	adcs	r3, r3
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007968:	1912      	adds	r2, r2, r4
 800796a:	eb45 0303 	adc.w	r3, r5, r3
 800796e:	f04f 0000 	mov.w	r0, #0
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	00d9      	lsls	r1, r3, #3
 8007978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800797c:	00d0      	lsls	r0, r2, #3
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	eb12 0804 	adds.w	r8, r2, r4
 8007986:	eb43 0905 	adc.w	r9, r3, r5
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4618      	mov	r0, r3
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	008b      	lsls	r3, r1, #2
 800799e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079a2:	0082      	lsls	r2, r0, #2
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f98e 	bl	8000cc8 <__aeabi_uldivmod>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4b49      	ldr	r3, [pc, #292]	; (8007ad8 <UART_SetConfig+0x38c>)
 80079b2:	fba3 2302 	umull	r2, r3, r3, r2
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	011e      	lsls	r6, r3, #4
 80079ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079bc:	4618      	mov	r0, r3
 80079be:	f04f 0100 	mov.w	r1, #0
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	1894      	adds	r4, r2, r2
 80079c8:	60bc      	str	r4, [r7, #8]
 80079ca:	415b      	adcs	r3, r3
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d2:	1812      	adds	r2, r2, r0
 80079d4:	eb41 0303 	adc.w	r3, r1, r3
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	f04f 0500 	mov.w	r5, #0
 80079e0:	00dd      	lsls	r5, r3, #3
 80079e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079e6:	00d4      	lsls	r4, r2, #3
 80079e8:	4622      	mov	r2, r4
 80079ea:	462b      	mov	r3, r5
 80079ec:	1814      	adds	r4, r2, r0
 80079ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80079f0:	414b      	adcs	r3, r1
 80079f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f04f 0100 	mov.w	r1, #0
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	008b      	lsls	r3, r1, #2
 8007a08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a0c:	0082      	lsls	r2, r0, #2
 8007a0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a12:	f7f9 f959 	bl	8000cc8 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4b2f      	ldr	r3, [pc, #188]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	2164      	movs	r1, #100	; 0x64
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	3332      	adds	r3, #50	; 0x32
 8007a2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007a30:	fba2 2303 	umull	r2, r3, r2, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a3a:	441e      	add	r6, r3
 8007a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	1894      	adds	r4, r2, r2
 8007a4a:	603c      	str	r4, [r7, #0]
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	607b      	str	r3, [r7, #4]
 8007a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a54:	1812      	adds	r2, r2, r0
 8007a56:	eb41 0303 	adc.w	r3, r1, r3
 8007a5a:	f04f 0400 	mov.w	r4, #0
 8007a5e:	f04f 0500 	mov.w	r5, #0
 8007a62:	00dd      	lsls	r5, r3, #3
 8007a64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a68:	00d4      	lsls	r4, r2, #3
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	eb12 0a00 	adds.w	sl, r2, r0
 8007a72:	eb43 0b01 	adc.w	fp, r3, r1
 8007a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	008b      	lsls	r3, r1, #2
 8007a8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a8e:	0082      	lsls	r2, r0, #2
 8007a90:	4650      	mov	r0, sl
 8007a92:	4659      	mov	r1, fp
 8007a94:	f7f9 f918 	bl	8000cc8 <__aeabi_uldivmod>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	2164      	movs	r1, #100	; 0x64
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	3332      	adds	r3, #50	; 0x32
 8007ab0:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <UART_SetConfig+0x38c>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	f003 020f 	and.w	r2, r3, #15
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4432      	add	r2, r6
 8007ac2:	609a      	str	r2, [r3, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	377c      	adds	r7, #124	; 0x7c
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	bf00      	nop
 8007ad0:	40011000 	.word	0x40011000
 8007ad4:	40011400 	.word	0x40011400
 8007ad8:	51eb851f 	.word	0x51eb851f

08007adc <__errno>:
 8007adc:	4b01      	ldr	r3, [pc, #4]	; (8007ae4 <__errno+0x8>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	200002b4 	.word	0x200002b4

08007ae8 <__libc_init_array>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4d0d      	ldr	r5, [pc, #52]	; (8007b20 <__libc_init_array+0x38>)
 8007aec:	4c0d      	ldr	r4, [pc, #52]	; (8007b24 <__libc_init_array+0x3c>)
 8007aee:	1b64      	subs	r4, r4, r5
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	2600      	movs	r6, #0
 8007af4:	42a6      	cmp	r6, r4
 8007af6:	d109      	bne.n	8007b0c <__libc_init_array+0x24>
 8007af8:	4d0b      	ldr	r5, [pc, #44]	; (8007b28 <__libc_init_array+0x40>)
 8007afa:	4c0c      	ldr	r4, [pc, #48]	; (8007b2c <__libc_init_array+0x44>)
 8007afc:	f005 f9ec 	bl	800ced8 <_init>
 8007b00:	1b64      	subs	r4, r4, r5
 8007b02:	10a4      	asrs	r4, r4, #2
 8007b04:	2600      	movs	r6, #0
 8007b06:	42a6      	cmp	r6, r4
 8007b08:	d105      	bne.n	8007b16 <__libc_init_array+0x2e>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b10:	4798      	blx	r3
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7ee      	b.n	8007af4 <__libc_init_array+0xc>
 8007b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1a:	4798      	blx	r3
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	e7f2      	b.n	8007b06 <__libc_init_array+0x1e>
 8007b20:	0800d5f0 	.word	0x0800d5f0
 8007b24:	0800d5f0 	.word	0x0800d5f0
 8007b28:	0800d5f0 	.word	0x0800d5f0
 8007b2c:	0800d5f4 	.word	0x0800d5f4

08007b30 <memset>:
 8007b30:	4402      	add	r2, r0
 8007b32:	4603      	mov	r3, r0
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d100      	bne.n	8007b3a <memset+0xa>
 8007b38:	4770      	bx	lr
 8007b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3e:	e7f9      	b.n	8007b34 <memset+0x4>

08007b40 <__cvt>:
 8007b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	ec55 4b10 	vmov	r4, r5, d0
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	460e      	mov	r6, r1
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	462b      	mov	r3, r5
 8007b50:	bfbb      	ittet	lt
 8007b52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b56:	461d      	movlt	r5, r3
 8007b58:	2300      	movge	r3, #0
 8007b5a:	232d      	movlt	r3, #45	; 0x2d
 8007b5c:	700b      	strb	r3, [r1, #0]
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b64:	4691      	mov	r9, r2
 8007b66:	f023 0820 	bic.w	r8, r3, #32
 8007b6a:	bfbc      	itt	lt
 8007b6c:	4622      	movlt	r2, r4
 8007b6e:	4614      	movlt	r4, r2
 8007b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b74:	d005      	beq.n	8007b82 <__cvt+0x42>
 8007b76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b7a:	d100      	bne.n	8007b7e <__cvt+0x3e>
 8007b7c:	3601      	adds	r6, #1
 8007b7e:	2102      	movs	r1, #2
 8007b80:	e000      	b.n	8007b84 <__cvt+0x44>
 8007b82:	2103      	movs	r1, #3
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	ab02      	add	r3, sp, #8
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	ec45 4b10 	vmov	d0, r4, r5
 8007b90:	4653      	mov	r3, sl
 8007b92:	4632      	mov	r2, r6
 8007b94:	f000 fed8 	bl	8008948 <_dtoa_r>
 8007b98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	d102      	bne.n	8007ba6 <__cvt+0x66>
 8007ba0:	f019 0f01 	tst.w	r9, #1
 8007ba4:	d022      	beq.n	8007bec <__cvt+0xac>
 8007ba6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007baa:	eb07 0906 	add.w	r9, r7, r6
 8007bae:	d110      	bne.n	8007bd2 <__cvt+0x92>
 8007bb0:	783b      	ldrb	r3, [r7, #0]
 8007bb2:	2b30      	cmp	r3, #48	; 0x30
 8007bb4:	d10a      	bne.n	8007bcc <__cvt+0x8c>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4620      	mov	r0, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7f8 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 8007bc2:	b918      	cbnz	r0, 8007bcc <__cvt+0x8c>
 8007bc4:	f1c6 0601 	rsb	r6, r6, #1
 8007bc8:	f8ca 6000 	str.w	r6, [sl]
 8007bcc:	f8da 3000 	ldr.w	r3, [sl]
 8007bd0:	4499      	add	r9, r3
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 ff95 	bl	8000b08 <__aeabi_dcmpeq>
 8007bde:	b108      	cbz	r0, 8007be4 <__cvt+0xa4>
 8007be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be4:	2230      	movs	r2, #48	; 0x30
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	454b      	cmp	r3, r9
 8007bea:	d307      	bcc.n	8007bfc <__cvt+0xbc>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf0:	1bdb      	subs	r3, r3, r7
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	b004      	add	sp, #16
 8007bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfc:	1c59      	adds	r1, r3, #1
 8007bfe:	9103      	str	r1, [sp, #12]
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	e7f0      	b.n	8007be6 <__cvt+0xa6>

08007c04 <__exponent>:
 8007c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c06:	4603      	mov	r3, r0
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	bfb8      	it	lt
 8007c0c:	4249      	neglt	r1, r1
 8007c0e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c12:	bfb4      	ite	lt
 8007c14:	222d      	movlt	r2, #45	; 0x2d
 8007c16:	222b      	movge	r2, #43	; 0x2b
 8007c18:	2909      	cmp	r1, #9
 8007c1a:	7042      	strb	r2, [r0, #1]
 8007c1c:	dd2a      	ble.n	8007c74 <__exponent+0x70>
 8007c1e:	f10d 0407 	add.w	r4, sp, #7
 8007c22:	46a4      	mov	ip, r4
 8007c24:	270a      	movs	r7, #10
 8007c26:	46a6      	mov	lr, r4
 8007c28:	460a      	mov	r2, r1
 8007c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c2e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c32:	3530      	adds	r5, #48	; 0x30
 8007c34:	2a63      	cmp	r2, #99	; 0x63
 8007c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c3e:	4631      	mov	r1, r6
 8007c40:	dcf1      	bgt.n	8007c26 <__exponent+0x22>
 8007c42:	3130      	adds	r1, #48	; 0x30
 8007c44:	f1ae 0502 	sub.w	r5, lr, #2
 8007c48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c4c:	1c44      	adds	r4, r0, #1
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4561      	cmp	r1, ip
 8007c52:	d30a      	bcc.n	8007c6a <__exponent+0x66>
 8007c54:	f10d 0209 	add.w	r2, sp, #9
 8007c58:	eba2 020e 	sub.w	r2, r2, lr
 8007c5c:	4565      	cmp	r5, ip
 8007c5e:	bf88      	it	hi
 8007c60:	2200      	movhi	r2, #0
 8007c62:	4413      	add	r3, r2
 8007c64:	1a18      	subs	r0, r3, r0
 8007c66:	b003      	add	sp, #12
 8007c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c72:	e7ed      	b.n	8007c50 <__exponent+0x4c>
 8007c74:	2330      	movs	r3, #48	; 0x30
 8007c76:	3130      	adds	r1, #48	; 0x30
 8007c78:	7083      	strb	r3, [r0, #2]
 8007c7a:	70c1      	strb	r1, [r0, #3]
 8007c7c:	1d03      	adds	r3, r0, #4
 8007c7e:	e7f1      	b.n	8007c64 <__exponent+0x60>

08007c80 <_printf_float>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	ed2d 8b02 	vpush	{d8}
 8007c88:	b08d      	sub	sp, #52	; 0x34
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c90:	4616      	mov	r6, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	4605      	mov	r5, r0
 8007c96:	f001 fdfb 	bl	8009890 <_localeconv_r>
 8007c9a:	f8d0 a000 	ldr.w	sl, [r0]
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	f7f8 fab6 	bl	8000210 <strlen>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cb4:	3307      	adds	r3, #7
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	f103 0208 	add.w	r2, r3, #8
 8007cbe:	f8c8 2000 	str.w	r2, [r8]
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd8:	ee08 0a10 	vmov	s16, r0
 8007cdc:	4b9f      	ldr	r3, [pc, #636]	; (8007f5c <_printf_float+0x2dc>)
 8007cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	f7f8 ff41 	bl	8000b6c <__aeabi_dcmpun>
 8007cea:	bb88      	cbnz	r0, 8007d50 <_printf_float+0xd0>
 8007cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <_printf_float+0x2dc>)
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	f7f8 ff1b 	bl	8000b30 <__aeabi_dcmple>
 8007cfa:	bb48      	cbnz	r0, 8007d50 <_printf_float+0xd0>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 ff0a 	bl	8000b1c <__aeabi_dcmplt>
 8007d08:	b110      	cbz	r0, 8007d10 <_printf_float+0x90>
 8007d0a:	232d      	movs	r3, #45	; 0x2d
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d10:	4b93      	ldr	r3, [pc, #588]	; (8007f60 <_printf_float+0x2e0>)
 8007d12:	4894      	ldr	r0, [pc, #592]	; (8007f64 <_printf_float+0x2e4>)
 8007d14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d18:	bf94      	ite	ls
 8007d1a:	4698      	movls	r8, r3
 8007d1c:	4680      	movhi	r8, r0
 8007d1e:	2303      	movs	r3, #3
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	9b05      	ldr	r3, [sp, #20]
 8007d24:	f023 0204 	bic.w	r2, r3, #4
 8007d28:	6022      	str	r2, [r4, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	9700      	str	r7, [sp, #0]
 8007d30:	4633      	mov	r3, r6
 8007d32:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f9d8 	bl	80080ec <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f040 8090 	bne.w	8007e62 <_printf_float+0x1e2>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	b00d      	add	sp, #52	; 0x34
 8007d48:	ecbd 8b02 	vpop	{d8}
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 ff08 	bl	8000b6c <__aeabi_dcmpun>
 8007d5c:	b140      	cbz	r0, 8007d70 <_printf_float+0xf0>
 8007d5e:	464b      	mov	r3, r9
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfbc      	itt	lt
 8007d64:	232d      	movlt	r3, #45	; 0x2d
 8007d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d6a:	487f      	ldr	r0, [pc, #508]	; (8007f68 <_printf_float+0x2e8>)
 8007d6c:	4b7f      	ldr	r3, [pc, #508]	; (8007f6c <_printf_float+0x2ec>)
 8007d6e:	e7d1      	b.n	8007d14 <_printf_float+0x94>
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d76:	9206      	str	r2, [sp, #24]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	d13f      	bne.n	8007dfc <_printf_float+0x17c>
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	6861      	ldr	r1, [r4, #4]
 8007d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d92:	ab09      	add	r3, sp, #36	; 0x24
 8007d94:	ec49 8b10 	vmov	d0, r8, r9
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6022      	str	r2, [r4, #0]
 8007d9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007da0:	4628      	mov	r0, r5
 8007da2:	f7ff fecd 	bl	8007b40 <__cvt>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007daa:	2b47      	cmp	r3, #71	; 0x47
 8007dac:	4680      	mov	r8, r0
 8007dae:	d108      	bne.n	8007dc2 <_printf_float+0x142>
 8007db0:	1cc8      	adds	r0, r1, #3
 8007db2:	db02      	blt.n	8007dba <_printf_float+0x13a>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	4299      	cmp	r1, r3
 8007db8:	dd41      	ble.n	8007e3e <_printf_float+0x1be>
 8007dba:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dbe:	fa5f fb8b 	uxtb.w	fp, fp
 8007dc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc6:	d820      	bhi.n	8007e0a <_printf_float+0x18a>
 8007dc8:	3901      	subs	r1, #1
 8007dca:	465a      	mov	r2, fp
 8007dcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8007dd2:	f7ff ff17 	bl	8007c04 <__exponent>
 8007dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd8:	1813      	adds	r3, r2, r0
 8007dda:	2a01      	cmp	r2, #1
 8007ddc:	4681      	mov	r9, r0
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	dc02      	bgt.n	8007de8 <_printf_float+0x168>
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	07d2      	lsls	r2, r2, #31
 8007de6:	d501      	bpl.n	8007dec <_printf_float+0x16c>
 8007de8:	3301      	adds	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d09c      	beq.n	8007d2e <_printf_float+0xae>
 8007df4:	232d      	movs	r3, #45	; 0x2d
 8007df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfa:	e798      	b.n	8007d2e <_printf_float+0xae>
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	2a47      	cmp	r2, #71	; 0x47
 8007e00:	d1be      	bne.n	8007d80 <_printf_float+0x100>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1bc      	bne.n	8007d80 <_printf_float+0x100>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7b9      	b.n	8007d7e <_printf_float+0xfe>
 8007e0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e0e:	d118      	bne.n	8007e42 <_printf_float+0x1c2>
 8007e10:	2900      	cmp	r1, #0
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	dd0b      	ble.n	8007e2e <_printf_float+0x1ae>
 8007e16:	6121      	str	r1, [r4, #16]
 8007e18:	b913      	cbnz	r3, 8007e20 <_printf_float+0x1a0>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d502      	bpl.n	8007e26 <_printf_float+0x1a6>
 8007e20:	3301      	adds	r3, #1
 8007e22:	440b      	add	r3, r1
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e28:	f04f 0900 	mov.w	r9, #0
 8007e2c:	e7de      	b.n	8007dec <_printf_float+0x16c>
 8007e2e:	b913      	cbnz	r3, 8007e36 <_printf_float+0x1b6>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	07d2      	lsls	r2, r2, #31
 8007e34:	d501      	bpl.n	8007e3a <_printf_float+0x1ba>
 8007e36:	3302      	adds	r3, #2
 8007e38:	e7f4      	b.n	8007e24 <_printf_float+0x1a4>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e7f2      	b.n	8007e24 <_printf_float+0x1a4>
 8007e3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	4299      	cmp	r1, r3
 8007e46:	db05      	blt.n	8007e54 <_printf_float+0x1d4>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	6121      	str	r1, [r4, #16]
 8007e4c:	07d8      	lsls	r0, r3, #31
 8007e4e:	d5ea      	bpl.n	8007e26 <_printf_float+0x1a6>
 8007e50:	1c4b      	adds	r3, r1, #1
 8007e52:	e7e7      	b.n	8007e24 <_printf_float+0x1a4>
 8007e54:	2900      	cmp	r1, #0
 8007e56:	bfd4      	ite	le
 8007e58:	f1c1 0202 	rsble	r2, r1, #2
 8007e5c:	2201      	movgt	r2, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	e7e0      	b.n	8007e24 <_printf_float+0x1a4>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	055a      	lsls	r2, r3, #21
 8007e66:	d407      	bmi.n	8007e78 <_printf_float+0x1f8>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	d12c      	bne.n	8007ed0 <_printf_float+0x250>
 8007e76:	e764      	b.n	8007d42 <_printf_float+0xc2>
 8007e78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7c:	f240 80e0 	bls.w	8008040 <_printf_float+0x3c0>
 8007e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e84:	2200      	movs	r2, #0
 8007e86:	2300      	movs	r3, #0
 8007e88:	f7f8 fe3e 	bl	8000b08 <__aeabi_dcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d034      	beq.n	8007efa <_printf_float+0x27a>
 8007e90:	4a37      	ldr	r2, [pc, #220]	; (8007f70 <_printf_float+0x2f0>)
 8007e92:	2301      	movs	r3, #1
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af51 	beq.w	8007d42 <_printf_float+0xc2>
 8007ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	db02      	blt.n	8007eae <_printf_float+0x22e>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07d8      	lsls	r0, r3, #31
 8007eac:	d510      	bpl.n	8007ed0 <_printf_float+0x250>
 8007eae:	ee18 3a10 	vmov	r3, s16
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f af41 	beq.w	8007d42 <_printf_float+0xc2>
 8007ec0:	f04f 0800 	mov.w	r8, #0
 8007ec4:	f104 091a 	add.w	r9, r4, #26
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4543      	cmp	r3, r8
 8007ece:	dc09      	bgt.n	8007ee4 <_printf_float+0x264>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	079b      	lsls	r3, r3, #30
 8007ed4:	f100 8105 	bmi.w	80080e2 <_printf_float+0x462>
 8007ed8:	68e0      	ldr	r0, [r4, #12]
 8007eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007edc:	4298      	cmp	r0, r3
 8007ede:	bfb8      	it	lt
 8007ee0:	4618      	movlt	r0, r3
 8007ee2:	e730      	b.n	8007d46 <_printf_float+0xc6>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af27 	beq.w	8007d42 <_printf_float+0xc2>
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	e7e6      	b.n	8007ec8 <_printf_float+0x248>
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dc39      	bgt.n	8007f74 <_printf_float+0x2f4>
 8007f00:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <_printf_float+0x2f0>)
 8007f02:	2301      	movs	r3, #1
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af19 	beq.w	8007d42 <_printf_float+0xc2>
 8007f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f14:	4313      	orrs	r3, r2
 8007f16:	d102      	bne.n	8007f1e <_printf_float+0x29e>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	07d9      	lsls	r1, r3, #31
 8007f1c:	d5d8      	bpl.n	8007ed0 <_printf_float+0x250>
 8007f1e:	ee18 3a10 	vmov	r3, s16
 8007f22:	4652      	mov	r2, sl
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af09 	beq.w	8007d42 <_printf_float+0xc2>
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	f104 0a1a 	add.w	sl, r4, #26
 8007f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3a:	425b      	negs	r3, r3
 8007f3c:	454b      	cmp	r3, r9
 8007f3e:	dc01      	bgt.n	8007f44 <_printf_float+0x2c4>
 8007f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f42:	e792      	b.n	8007e6a <_printf_float+0x1ea>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f aef7 	beq.w	8007d42 <_printf_float+0xc2>
 8007f54:	f109 0901 	add.w	r9, r9, #1
 8007f58:	e7ee      	b.n	8007f38 <_printf_float+0x2b8>
 8007f5a:	bf00      	nop
 8007f5c:	7fefffff 	.word	0x7fefffff
 8007f60:	0800cf68 	.word	0x0800cf68
 8007f64:	0800cf6c 	.word	0x0800cf6c
 8007f68:	0800cf74 	.word	0x0800cf74
 8007f6c:	0800cf70 	.word	0x0800cf70
 8007f70:	0800cf78 	.word	0x0800cf78
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	bfa8      	it	ge
 8007f7c:	461a      	movge	r2, r3
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	4691      	mov	r9, r2
 8007f82:	dc37      	bgt.n	8007ff4 <_printf_float+0x374>
 8007f84:	f04f 0b00 	mov.w	fp, #0
 8007f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f8c:	f104 021a 	add.w	r2, r4, #26
 8007f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	eba3 0309 	sub.w	r3, r3, r9
 8007f98:	455b      	cmp	r3, fp
 8007f9a:	dc33      	bgt.n	8008004 <_printf_float+0x384>
 8007f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	db3b      	blt.n	800801c <_printf_float+0x39c>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	07da      	lsls	r2, r3, #31
 8007fa8:	d438      	bmi.n	800801c <_printf_float+0x39c>
 8007faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	eba2 0901 	sub.w	r9, r2, r1
 8007fb6:	4599      	cmp	r9, r3
 8007fb8:	bfa8      	it	ge
 8007fba:	4699      	movge	r9, r3
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	dc35      	bgt.n	800802e <_printf_float+0x3ae>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fca:	f104 0a1a 	add.w	sl, r4, #26
 8007fce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	eba3 0309 	sub.w	r3, r3, r9
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	f77f af79 	ble.w	8007ed0 <_printf_float+0x250>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f aeaa 	beq.w	8007d42 <_printf_float+0xc2>
 8007fee:	f108 0801 	add.w	r8, r8, #1
 8007ff2:	e7ec      	b.n	8007fce <_printf_float+0x34e>
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	d1c0      	bne.n	8007f84 <_printf_float+0x304>
 8008002:	e69e      	b.n	8007d42 <_printf_float+0xc2>
 8008004:	2301      	movs	r3, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	9205      	str	r2, [sp, #20]
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f ae97 	beq.w	8007d42 <_printf_float+0xc2>
 8008014:	9a05      	ldr	r2, [sp, #20]
 8008016:	f10b 0b01 	add.w	fp, fp, #1
 800801a:	e7b9      	b.n	8007f90 <_printf_float+0x310>
 800801c:	ee18 3a10 	vmov	r3, s16
 8008020:	4652      	mov	r2, sl
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d1be      	bne.n	8007faa <_printf_float+0x32a>
 800802c:	e689      	b.n	8007d42 <_printf_float+0xc2>
 800802e:	9a05      	ldr	r2, [sp, #20]
 8008030:	464b      	mov	r3, r9
 8008032:	4442      	add	r2, r8
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	d1c1      	bne.n	8007fc2 <_printf_float+0x342>
 800803e:	e680      	b.n	8007d42 <_printf_float+0xc2>
 8008040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008042:	2a01      	cmp	r2, #1
 8008044:	dc01      	bgt.n	800804a <_printf_float+0x3ca>
 8008046:	07db      	lsls	r3, r3, #31
 8008048:	d538      	bpl.n	80080bc <_printf_float+0x43c>
 800804a:	2301      	movs	r3, #1
 800804c:	4642      	mov	r2, r8
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	47b8      	blx	r7
 8008054:	3001      	adds	r0, #1
 8008056:	f43f ae74 	beq.w	8007d42 <_printf_float+0xc2>
 800805a:	ee18 3a10 	vmov	r3, s16
 800805e:	4652      	mov	r2, sl
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae6b 	beq.w	8007d42 <_printf_float+0xc2>
 800806c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	f7f8 fd48 	bl	8000b08 <__aeabi_dcmpeq>
 8008078:	b9d8      	cbnz	r0, 80080b2 <_printf_float+0x432>
 800807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807c:	f108 0201 	add.w	r2, r8, #1
 8008080:	3b01      	subs	r3, #1
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	d10e      	bne.n	80080aa <_printf_float+0x42a>
 800808c:	e659      	b.n	8007d42 <_printf_float+0xc2>
 800808e:	2301      	movs	r3, #1
 8008090:	4652      	mov	r2, sl
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	f43f ae52 	beq.w	8007d42 <_printf_float+0xc2>
 800809e:	f108 0801 	add.w	r8, r8, #1
 80080a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4543      	cmp	r3, r8
 80080a8:	dcf1      	bgt.n	800808e <_printf_float+0x40e>
 80080aa:	464b      	mov	r3, r9
 80080ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080b0:	e6dc      	b.n	8007e6c <_printf_float+0x1ec>
 80080b2:	f04f 0800 	mov.w	r8, #0
 80080b6:	f104 0a1a 	add.w	sl, r4, #26
 80080ba:	e7f2      	b.n	80080a2 <_printf_float+0x422>
 80080bc:	2301      	movs	r3, #1
 80080be:	4642      	mov	r2, r8
 80080c0:	e7df      	b.n	8008082 <_printf_float+0x402>
 80080c2:	2301      	movs	r3, #1
 80080c4:	464a      	mov	r2, r9
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	f43f ae38 	beq.w	8007d42 <_printf_float+0xc2>
 80080d2:	f108 0801 	add.w	r8, r8, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	4543      	cmp	r3, r8
 80080de:	dcf0      	bgt.n	80080c2 <_printf_float+0x442>
 80080e0:	e6fa      	b.n	8007ed8 <_printf_float+0x258>
 80080e2:	f04f 0800 	mov.w	r8, #0
 80080e6:	f104 0919 	add.w	r9, r4, #25
 80080ea:	e7f4      	b.n	80080d6 <_printf_float+0x456>

080080ec <_printf_common>:
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	4616      	mov	r6, r2
 80080f2:	4699      	mov	r9, r3
 80080f4:	688a      	ldr	r2, [r1, #8]
 80080f6:	690b      	ldr	r3, [r1, #16]
 80080f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bfb8      	it	lt
 8008100:	4613      	movlt	r3, r2
 8008102:	6033      	str	r3, [r6, #0]
 8008104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008108:	4607      	mov	r7, r0
 800810a:	460c      	mov	r4, r1
 800810c:	b10a      	cbz	r2, 8008112 <_printf_common+0x26>
 800810e:	3301      	adds	r3, #1
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	0699      	lsls	r1, r3, #26
 8008116:	bf42      	ittt	mi
 8008118:	6833      	ldrmi	r3, [r6, #0]
 800811a:	3302      	addmi	r3, #2
 800811c:	6033      	strmi	r3, [r6, #0]
 800811e:	6825      	ldr	r5, [r4, #0]
 8008120:	f015 0506 	ands.w	r5, r5, #6
 8008124:	d106      	bne.n	8008134 <_printf_common+0x48>
 8008126:	f104 0a19 	add.w	sl, r4, #25
 800812a:	68e3      	ldr	r3, [r4, #12]
 800812c:	6832      	ldr	r2, [r6, #0]
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	42ab      	cmp	r3, r5
 8008132:	dc26      	bgt.n	8008182 <_printf_common+0x96>
 8008134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008138:	1e13      	subs	r3, r2, #0
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	bf18      	it	ne
 800813e:	2301      	movne	r3, #1
 8008140:	0692      	lsls	r2, r2, #26
 8008142:	d42b      	bmi.n	800819c <_printf_common+0xb0>
 8008144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008148:	4649      	mov	r1, r9
 800814a:	4638      	mov	r0, r7
 800814c:	47c0      	blx	r8
 800814e:	3001      	adds	r0, #1
 8008150:	d01e      	beq.n	8008190 <_printf_common+0xa4>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	68e5      	ldr	r5, [r4, #12]
 8008156:	6832      	ldr	r2, [r6, #0]
 8008158:	f003 0306 	and.w	r3, r3, #6
 800815c:	2b04      	cmp	r3, #4
 800815e:	bf08      	it	eq
 8008160:	1aad      	subeq	r5, r5, r2
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	bf0c      	ite	eq
 8008168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800816c:	2500      	movne	r5, #0
 800816e:	4293      	cmp	r3, r2
 8008170:	bfc4      	itt	gt
 8008172:	1a9b      	subgt	r3, r3, r2
 8008174:	18ed      	addgt	r5, r5, r3
 8008176:	2600      	movs	r6, #0
 8008178:	341a      	adds	r4, #26
 800817a:	42b5      	cmp	r5, r6
 800817c:	d11a      	bne.n	80081b4 <_printf_common+0xc8>
 800817e:	2000      	movs	r0, #0
 8008180:	e008      	b.n	8008194 <_printf_common+0xa8>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4649      	mov	r1, r9
 8008188:	4638      	mov	r0, r7
 800818a:	47c0      	blx	r8
 800818c:	3001      	adds	r0, #1
 800818e:	d103      	bne.n	8008198 <_printf_common+0xac>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	3501      	adds	r5, #1
 800819a:	e7c6      	b.n	800812a <_printf_common+0x3e>
 800819c:	18e1      	adds	r1, r4, r3
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	2030      	movs	r0, #48	; 0x30
 80081a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081a6:	4422      	add	r2, r4
 80081a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b0:	3302      	adds	r3, #2
 80081b2:	e7c7      	b.n	8008144 <_printf_common+0x58>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4622      	mov	r2, r4
 80081b8:	4649      	mov	r1, r9
 80081ba:	4638      	mov	r0, r7
 80081bc:	47c0      	blx	r8
 80081be:	3001      	adds	r0, #1
 80081c0:	d0e6      	beq.n	8008190 <_printf_common+0xa4>
 80081c2:	3601      	adds	r6, #1
 80081c4:	e7d9      	b.n	800817a <_printf_common+0x8e>
	...

080081c8 <_printf_i>:
 80081c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	460c      	mov	r4, r1
 80081ce:	4691      	mov	r9, r2
 80081d0:	7e27      	ldrb	r7, [r4, #24]
 80081d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081d4:	2f78      	cmp	r7, #120	; 0x78
 80081d6:	4680      	mov	r8, r0
 80081d8:	469a      	mov	sl, r3
 80081da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081de:	d807      	bhi.n	80081f0 <_printf_i+0x28>
 80081e0:	2f62      	cmp	r7, #98	; 0x62
 80081e2:	d80a      	bhi.n	80081fa <_printf_i+0x32>
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	f000 80d8 	beq.w	800839a <_printf_i+0x1d2>
 80081ea:	2f58      	cmp	r7, #88	; 0x58
 80081ec:	f000 80a3 	beq.w	8008336 <_printf_i+0x16e>
 80081f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f8:	e03a      	b.n	8008270 <_printf_i+0xa8>
 80081fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081fe:	2b15      	cmp	r3, #21
 8008200:	d8f6      	bhi.n	80081f0 <_printf_i+0x28>
 8008202:	a001      	add	r0, pc, #4	; (adr r0, 8008208 <_printf_i+0x40>)
 8008204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008208:	08008261 	.word	0x08008261
 800820c:	08008275 	.word	0x08008275
 8008210:	080081f1 	.word	0x080081f1
 8008214:	080081f1 	.word	0x080081f1
 8008218:	080081f1 	.word	0x080081f1
 800821c:	080081f1 	.word	0x080081f1
 8008220:	08008275 	.word	0x08008275
 8008224:	080081f1 	.word	0x080081f1
 8008228:	080081f1 	.word	0x080081f1
 800822c:	080081f1 	.word	0x080081f1
 8008230:	080081f1 	.word	0x080081f1
 8008234:	08008381 	.word	0x08008381
 8008238:	080082a5 	.word	0x080082a5
 800823c:	08008363 	.word	0x08008363
 8008240:	080081f1 	.word	0x080081f1
 8008244:	080081f1 	.word	0x080081f1
 8008248:	080083a3 	.word	0x080083a3
 800824c:	080081f1 	.word	0x080081f1
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080081f1 	.word	0x080081f1
 8008258:	080081f1 	.word	0x080081f1
 800825c:	0800836b 	.word	0x0800836b
 8008260:	680b      	ldr	r3, [r1, #0]
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	600a      	str	r2, [r1, #0]
 8008268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800826c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008270:	2301      	movs	r3, #1
 8008272:	e0a3      	b.n	80083bc <_printf_i+0x1f4>
 8008274:	6825      	ldr	r5, [r4, #0]
 8008276:	6808      	ldr	r0, [r1, #0]
 8008278:	062e      	lsls	r6, r5, #24
 800827a:	f100 0304 	add.w	r3, r0, #4
 800827e:	d50a      	bpl.n	8008296 <_printf_i+0xce>
 8008280:	6805      	ldr	r5, [r0, #0]
 8008282:	600b      	str	r3, [r1, #0]
 8008284:	2d00      	cmp	r5, #0
 8008286:	da03      	bge.n	8008290 <_printf_i+0xc8>
 8008288:	232d      	movs	r3, #45	; 0x2d
 800828a:	426d      	negs	r5, r5
 800828c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008290:	485e      	ldr	r0, [pc, #376]	; (800840c <_printf_i+0x244>)
 8008292:	230a      	movs	r3, #10
 8008294:	e019      	b.n	80082ca <_printf_i+0x102>
 8008296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800829a:	6805      	ldr	r5, [r0, #0]
 800829c:	600b      	str	r3, [r1, #0]
 800829e:	bf18      	it	ne
 80082a0:	b22d      	sxthne	r5, r5
 80082a2:	e7ef      	b.n	8008284 <_printf_i+0xbc>
 80082a4:	680b      	ldr	r3, [r1, #0]
 80082a6:	6825      	ldr	r5, [r4, #0]
 80082a8:	1d18      	adds	r0, r3, #4
 80082aa:	6008      	str	r0, [r1, #0]
 80082ac:	0628      	lsls	r0, r5, #24
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0xec>
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0xf2>
 80082b4:	0669      	lsls	r1, r5, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0xe8>
 80082b8:	881d      	ldrh	r5, [r3, #0]
 80082ba:	4854      	ldr	r0, [pc, #336]	; (800840c <_printf_i+0x244>)
 80082bc:	2f6f      	cmp	r7, #111	; 0x6f
 80082be:	bf0c      	ite	eq
 80082c0:	2308      	moveq	r3, #8
 80082c2:	230a      	movne	r3, #10
 80082c4:	2100      	movs	r1, #0
 80082c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ca:	6866      	ldr	r6, [r4, #4]
 80082cc:	60a6      	str	r6, [r4, #8]
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	bfa2      	ittt	ge
 80082d2:	6821      	ldrge	r1, [r4, #0]
 80082d4:	f021 0104 	bicge.w	r1, r1, #4
 80082d8:	6021      	strge	r1, [r4, #0]
 80082da:	b90d      	cbnz	r5, 80082e0 <_printf_i+0x118>
 80082dc:	2e00      	cmp	r6, #0
 80082de:	d04d      	beq.n	800837c <_printf_i+0x1b4>
 80082e0:	4616      	mov	r6, r2
 80082e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80082e6:	fb03 5711 	mls	r7, r3, r1, r5
 80082ea:	5dc7      	ldrb	r7, [r0, r7]
 80082ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082f0:	462f      	mov	r7, r5
 80082f2:	42bb      	cmp	r3, r7
 80082f4:	460d      	mov	r5, r1
 80082f6:	d9f4      	bls.n	80082e2 <_printf_i+0x11a>
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d10b      	bne.n	8008314 <_printf_i+0x14c>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	07df      	lsls	r7, r3, #31
 8008300:	d508      	bpl.n	8008314 <_printf_i+0x14c>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6861      	ldr	r1, [r4, #4]
 8008306:	4299      	cmp	r1, r3
 8008308:	bfde      	ittt	le
 800830a:	2330      	movle	r3, #48	; 0x30
 800830c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008310:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008314:	1b92      	subs	r2, r2, r6
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	f8cd a000 	str.w	sl, [sp]
 800831c:	464b      	mov	r3, r9
 800831e:	aa03      	add	r2, sp, #12
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff fee2 	bl	80080ec <_printf_common>
 8008328:	3001      	adds	r0, #1
 800832a:	d14c      	bne.n	80083c6 <_printf_i+0x1fe>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	b004      	add	sp, #16
 8008332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008336:	4835      	ldr	r0, [pc, #212]	; (800840c <_printf_i+0x244>)
 8008338:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	680e      	ldr	r6, [r1, #0]
 8008340:	061f      	lsls	r7, r3, #24
 8008342:	f856 5b04 	ldr.w	r5, [r6], #4
 8008346:	600e      	str	r6, [r1, #0]
 8008348:	d514      	bpl.n	8008374 <_printf_i+0x1ac>
 800834a:	07d9      	lsls	r1, r3, #31
 800834c:	bf44      	itt	mi
 800834e:	f043 0320 	orrmi.w	r3, r3, #32
 8008352:	6023      	strmi	r3, [r4, #0]
 8008354:	b91d      	cbnz	r5, 800835e <_printf_i+0x196>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	f023 0320 	bic.w	r3, r3, #32
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	2310      	movs	r3, #16
 8008360:	e7b0      	b.n	80082c4 <_printf_i+0xfc>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f043 0320 	orr.w	r3, r3, #32
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	2378      	movs	r3, #120	; 0x78
 800836c:	4828      	ldr	r0, [pc, #160]	; (8008410 <_printf_i+0x248>)
 800836e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008372:	e7e3      	b.n	800833c <_printf_i+0x174>
 8008374:	065e      	lsls	r6, r3, #25
 8008376:	bf48      	it	mi
 8008378:	b2ad      	uxthmi	r5, r5
 800837a:	e7e6      	b.n	800834a <_printf_i+0x182>
 800837c:	4616      	mov	r6, r2
 800837e:	e7bb      	b.n	80082f8 <_printf_i+0x130>
 8008380:	680b      	ldr	r3, [r1, #0]
 8008382:	6826      	ldr	r6, [r4, #0]
 8008384:	6960      	ldr	r0, [r4, #20]
 8008386:	1d1d      	adds	r5, r3, #4
 8008388:	600d      	str	r5, [r1, #0]
 800838a:	0635      	lsls	r5, r6, #24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	d501      	bpl.n	8008394 <_printf_i+0x1cc>
 8008390:	6018      	str	r0, [r3, #0]
 8008392:	e002      	b.n	800839a <_printf_i+0x1d2>
 8008394:	0671      	lsls	r1, r6, #25
 8008396:	d5fb      	bpl.n	8008390 <_printf_i+0x1c8>
 8008398:	8018      	strh	r0, [r3, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	4616      	mov	r6, r2
 80083a0:	e7ba      	b.n	8008318 <_printf_i+0x150>
 80083a2:	680b      	ldr	r3, [r1, #0]
 80083a4:	1d1a      	adds	r2, r3, #4
 80083a6:	600a      	str	r2, [r1, #0]
 80083a8:	681e      	ldr	r6, [r3, #0]
 80083aa:	6862      	ldr	r2, [r4, #4]
 80083ac:	2100      	movs	r1, #0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7f7 ff36 	bl	8000220 <memchr>
 80083b4:	b108      	cbz	r0, 80083ba <_printf_i+0x1f2>
 80083b6:	1b80      	subs	r0, r0, r6
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	6863      	ldr	r3, [r4, #4]
 80083bc:	6123      	str	r3, [r4, #16]
 80083be:	2300      	movs	r3, #0
 80083c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c4:	e7a8      	b.n	8008318 <_printf_i+0x150>
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	4632      	mov	r2, r6
 80083ca:	4649      	mov	r1, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	47d0      	blx	sl
 80083d0:	3001      	adds	r0, #1
 80083d2:	d0ab      	beq.n	800832c <_printf_i+0x164>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	079b      	lsls	r3, r3, #30
 80083d8:	d413      	bmi.n	8008402 <_printf_i+0x23a>
 80083da:	68e0      	ldr	r0, [r4, #12]
 80083dc:	9b03      	ldr	r3, [sp, #12]
 80083de:	4298      	cmp	r0, r3
 80083e0:	bfb8      	it	lt
 80083e2:	4618      	movlt	r0, r3
 80083e4:	e7a4      	b.n	8008330 <_printf_i+0x168>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4632      	mov	r2, r6
 80083ea:	4649      	mov	r1, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	47d0      	blx	sl
 80083f0:	3001      	adds	r0, #1
 80083f2:	d09b      	beq.n	800832c <_printf_i+0x164>
 80083f4:	3501      	adds	r5, #1
 80083f6:	68e3      	ldr	r3, [r4, #12]
 80083f8:	9903      	ldr	r1, [sp, #12]
 80083fa:	1a5b      	subs	r3, r3, r1
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	dcf2      	bgt.n	80083e6 <_printf_i+0x21e>
 8008400:	e7eb      	b.n	80083da <_printf_i+0x212>
 8008402:	2500      	movs	r5, #0
 8008404:	f104 0619 	add.w	r6, r4, #25
 8008408:	e7f5      	b.n	80083f6 <_printf_i+0x22e>
 800840a:	bf00      	nop
 800840c:	0800cf7a 	.word	0x0800cf7a
 8008410:	0800cf8b 	.word	0x0800cf8b

08008414 <_puts_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	460e      	mov	r6, r1
 8008418:	4605      	mov	r5, r0
 800841a:	b118      	cbz	r0, 8008424 <_puts_r+0x10>
 800841c:	6983      	ldr	r3, [r0, #24]
 800841e:	b90b      	cbnz	r3, 8008424 <_puts_r+0x10>
 8008420:	f001 f998 	bl	8009754 <__sinit>
 8008424:	69ab      	ldr	r3, [r5, #24]
 8008426:	68ac      	ldr	r4, [r5, #8]
 8008428:	b913      	cbnz	r3, 8008430 <_puts_r+0x1c>
 800842a:	4628      	mov	r0, r5
 800842c:	f001 f992 	bl	8009754 <__sinit>
 8008430:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <_puts_r+0xd0>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d120      	bne.n	8008478 <_puts_r+0x64>
 8008436:	686c      	ldr	r4, [r5, #4]
 8008438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843a:	07db      	lsls	r3, r3, #31
 800843c:	d405      	bmi.n	800844a <_puts_r+0x36>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	0598      	lsls	r0, r3, #22
 8008442:	d402      	bmi.n	800844a <_puts_r+0x36>
 8008444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008446:	f001 fa28 	bl	800989a <__retarget_lock_acquire_recursive>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	0719      	lsls	r1, r3, #28
 800844e:	d51d      	bpl.n	800848c <_puts_r+0x78>
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	b1db      	cbz	r3, 800848c <_puts_r+0x78>
 8008454:	3e01      	subs	r6, #1
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800845c:	3b01      	subs	r3, #1
 800845e:	60a3      	str	r3, [r4, #8]
 8008460:	bb39      	cbnz	r1, 80084b2 <_puts_r+0x9e>
 8008462:	2b00      	cmp	r3, #0
 8008464:	da38      	bge.n	80084d8 <_puts_r+0xc4>
 8008466:	4622      	mov	r2, r4
 8008468:	210a      	movs	r1, #10
 800846a:	4628      	mov	r0, r5
 800846c:	f000 f91e 	bl	80086ac <__swbuf_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d011      	beq.n	8008498 <_puts_r+0x84>
 8008474:	250a      	movs	r5, #10
 8008476:	e011      	b.n	800849c <_puts_r+0x88>
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <_puts_r+0xd4>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d101      	bne.n	8008482 <_puts_r+0x6e>
 800847e:	68ac      	ldr	r4, [r5, #8]
 8008480:	e7da      	b.n	8008438 <_puts_r+0x24>
 8008482:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <_puts_r+0xd8>)
 8008484:	429c      	cmp	r4, r3
 8008486:	bf08      	it	eq
 8008488:	68ec      	ldreq	r4, [r5, #12]
 800848a:	e7d5      	b.n	8008438 <_puts_r+0x24>
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f000 f95e 	bl	8008750 <__swsetup_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	d0dd      	beq.n	8008454 <_puts_r+0x40>
 8008498:	f04f 35ff 	mov.w	r5, #4294967295
 800849c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849e:	07da      	lsls	r2, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_puts_r+0x9a>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_puts_r+0x9a>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f001 f9f7 	bl	800989c <__retarget_lock_release_recursive>
 80084ae:	4628      	mov	r0, r5
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da04      	bge.n	80084c0 <_puts_r+0xac>
 80084b6:	69a2      	ldr	r2, [r4, #24]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	dc06      	bgt.n	80084ca <_puts_r+0xb6>
 80084bc:	290a      	cmp	r1, #10
 80084be:	d004      	beq.n	80084ca <_puts_r+0xb6>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	7019      	strb	r1, [r3, #0]
 80084c8:	e7c5      	b.n	8008456 <_puts_r+0x42>
 80084ca:	4622      	mov	r2, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f8ed 	bl	80086ac <__swbuf_r>
 80084d2:	3001      	adds	r0, #1
 80084d4:	d1bf      	bne.n	8008456 <_puts_r+0x42>
 80084d6:	e7df      	b.n	8008498 <_puts_r+0x84>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	250a      	movs	r5, #10
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	701d      	strb	r5, [r3, #0]
 80084e2:	e7db      	b.n	800849c <_puts_r+0x88>
 80084e4:	0800d154 	.word	0x0800d154
 80084e8:	0800d174 	.word	0x0800d174
 80084ec:	0800d134 	.word	0x0800d134

080084f0 <puts>:
 80084f0:	4b02      	ldr	r3, [pc, #8]	; (80084fc <puts+0xc>)
 80084f2:	4601      	mov	r1, r0
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	f7ff bf8d 	b.w	8008414 <_puts_r>
 80084fa:	bf00      	nop
 80084fc:	200002b4 	.word	0x200002b4

08008500 <setvbuf>:
 8008500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008504:	461d      	mov	r5, r3
 8008506:	4b5d      	ldr	r3, [pc, #372]	; (800867c <setvbuf+0x17c>)
 8008508:	681f      	ldr	r7, [r3, #0]
 800850a:	4604      	mov	r4, r0
 800850c:	460e      	mov	r6, r1
 800850e:	4690      	mov	r8, r2
 8008510:	b127      	cbz	r7, 800851c <setvbuf+0x1c>
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	b913      	cbnz	r3, 800851c <setvbuf+0x1c>
 8008516:	4638      	mov	r0, r7
 8008518:	f001 f91c 	bl	8009754 <__sinit>
 800851c:	4b58      	ldr	r3, [pc, #352]	; (8008680 <setvbuf+0x180>)
 800851e:	429c      	cmp	r4, r3
 8008520:	d167      	bne.n	80085f2 <setvbuf+0xf2>
 8008522:	687c      	ldr	r4, [r7, #4]
 8008524:	f1b8 0f02 	cmp.w	r8, #2
 8008528:	d006      	beq.n	8008538 <setvbuf+0x38>
 800852a:	f1b8 0f01 	cmp.w	r8, #1
 800852e:	f200 809f 	bhi.w	8008670 <setvbuf+0x170>
 8008532:	2d00      	cmp	r5, #0
 8008534:	f2c0 809c 	blt.w	8008670 <setvbuf+0x170>
 8008538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800853a:	07db      	lsls	r3, r3, #31
 800853c:	d405      	bmi.n	800854a <setvbuf+0x4a>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	0598      	lsls	r0, r3, #22
 8008542:	d402      	bmi.n	800854a <setvbuf+0x4a>
 8008544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008546:	f001 f9a8 	bl	800989a <__retarget_lock_acquire_recursive>
 800854a:	4621      	mov	r1, r4
 800854c:	4638      	mov	r0, r7
 800854e:	f001 f86d 	bl	800962c <_fflush_r>
 8008552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008554:	b141      	cbz	r1, 8008568 <setvbuf+0x68>
 8008556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800855a:	4299      	cmp	r1, r3
 800855c:	d002      	beq.n	8008564 <setvbuf+0x64>
 800855e:	4638      	mov	r0, r7
 8008560:	f001 fda6 	bl	800a0b0 <_free_r>
 8008564:	2300      	movs	r3, #0
 8008566:	6363      	str	r3, [r4, #52]	; 0x34
 8008568:	2300      	movs	r3, #0
 800856a:	61a3      	str	r3, [r4, #24]
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	0619      	lsls	r1, r3, #24
 8008572:	d503      	bpl.n	800857c <setvbuf+0x7c>
 8008574:	6921      	ldr	r1, [r4, #16]
 8008576:	4638      	mov	r0, r7
 8008578:	f001 fd9a 	bl	800a0b0 <_free_r>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	f1b8 0f02 	cmp.w	r8, #2
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	d06c      	beq.n	8008668 <setvbuf+0x168>
 800858e:	ab01      	add	r3, sp, #4
 8008590:	466a      	mov	r2, sp
 8008592:	4621      	mov	r1, r4
 8008594:	4638      	mov	r0, r7
 8008596:	f001 f982 	bl	800989e <__swhatbuf_r>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	4318      	orrs	r0, r3
 800859e:	81a0      	strh	r0, [r4, #12]
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	d130      	bne.n	8008606 <setvbuf+0x106>
 80085a4:	9d00      	ldr	r5, [sp, #0]
 80085a6:	4628      	mov	r0, r5
 80085a8:	f001 f9de 	bl	8009968 <malloc>
 80085ac:	4606      	mov	r6, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d155      	bne.n	800865e <setvbuf+0x15e>
 80085b2:	f8dd 9000 	ldr.w	r9, [sp]
 80085b6:	45a9      	cmp	r9, r5
 80085b8:	d14a      	bne.n	8008650 <setvbuf+0x150>
 80085ba:	f04f 35ff 	mov.w	r5, #4294967295
 80085be:	2200      	movs	r2, #0
 80085c0:	60a2      	str	r2, [r4, #8]
 80085c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80085c6:	6022      	str	r2, [r4, #0]
 80085c8:	6122      	str	r2, [r4, #16]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d0:	6162      	str	r2, [r4, #20]
 80085d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	07d2      	lsls	r2, r2, #31
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	d405      	bmi.n	80085ea <setvbuf+0xea>
 80085de:	f413 7f00 	tst.w	r3, #512	; 0x200
 80085e2:	d102      	bne.n	80085ea <setvbuf+0xea>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f001 f959 	bl	800989c <__retarget_lock_release_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f2:	4b24      	ldr	r3, [pc, #144]	; (8008684 <setvbuf+0x184>)
 80085f4:	429c      	cmp	r4, r3
 80085f6:	d101      	bne.n	80085fc <setvbuf+0xfc>
 80085f8:	68bc      	ldr	r4, [r7, #8]
 80085fa:	e793      	b.n	8008524 <setvbuf+0x24>
 80085fc:	4b22      	ldr	r3, [pc, #136]	; (8008688 <setvbuf+0x188>)
 80085fe:	429c      	cmp	r4, r3
 8008600:	bf08      	it	eq
 8008602:	68fc      	ldreq	r4, [r7, #12]
 8008604:	e78e      	b.n	8008524 <setvbuf+0x24>
 8008606:	2e00      	cmp	r6, #0
 8008608:	d0cd      	beq.n	80085a6 <setvbuf+0xa6>
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	b913      	cbnz	r3, 8008614 <setvbuf+0x114>
 800860e:	4638      	mov	r0, r7
 8008610:	f001 f8a0 	bl	8009754 <__sinit>
 8008614:	f1b8 0f01 	cmp.w	r8, #1
 8008618:	bf08      	it	eq
 800861a:	89a3      	ldrheq	r3, [r4, #12]
 800861c:	6026      	str	r6, [r4, #0]
 800861e:	bf04      	itt	eq
 8008620:	f043 0301 	orreq.w	r3, r3, #1
 8008624:	81a3      	strheq	r3, [r4, #12]
 8008626:	89a2      	ldrh	r2, [r4, #12]
 8008628:	f012 0308 	ands.w	r3, r2, #8
 800862c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008630:	d01c      	beq.n	800866c <setvbuf+0x16c>
 8008632:	07d3      	lsls	r3, r2, #31
 8008634:	bf41      	itttt	mi
 8008636:	2300      	movmi	r3, #0
 8008638:	426d      	negmi	r5, r5
 800863a:	60a3      	strmi	r3, [r4, #8]
 800863c:	61a5      	strmi	r5, [r4, #24]
 800863e:	bf58      	it	pl
 8008640:	60a5      	strpl	r5, [r4, #8]
 8008642:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008644:	f015 0501 	ands.w	r5, r5, #1
 8008648:	d115      	bne.n	8008676 <setvbuf+0x176>
 800864a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800864e:	e7c8      	b.n	80085e2 <setvbuf+0xe2>
 8008650:	4648      	mov	r0, r9
 8008652:	f001 f989 	bl	8009968 <malloc>
 8008656:	4606      	mov	r6, r0
 8008658:	2800      	cmp	r0, #0
 800865a:	d0ae      	beq.n	80085ba <setvbuf+0xba>
 800865c:	464d      	mov	r5, r9
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	e7d0      	b.n	800860a <setvbuf+0x10a>
 8008668:	2500      	movs	r5, #0
 800866a:	e7a8      	b.n	80085be <setvbuf+0xbe>
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	e7e8      	b.n	8008642 <setvbuf+0x142>
 8008670:	f04f 35ff 	mov.w	r5, #4294967295
 8008674:	e7b9      	b.n	80085ea <setvbuf+0xea>
 8008676:	2500      	movs	r5, #0
 8008678:	e7b7      	b.n	80085ea <setvbuf+0xea>
 800867a:	bf00      	nop
 800867c:	200002b4 	.word	0x200002b4
 8008680:	0800d154 	.word	0x0800d154
 8008684:	0800d174 	.word	0x0800d174
 8008688:	0800d134 	.word	0x0800d134

0800868c <strcat>:
 800868c:	b510      	push	{r4, lr}
 800868e:	4602      	mov	r2, r0
 8008690:	7814      	ldrb	r4, [r2, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	3201      	adds	r2, #1
 8008696:	2c00      	cmp	r4, #0
 8008698:	d1fa      	bne.n	8008690 <strcat+0x4>
 800869a:	3b01      	subs	r3, #1
 800869c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	d1f9      	bne.n	800869c <strcat+0x10>
 80086a8:	bd10      	pop	{r4, pc}
	...

080086ac <__swbuf_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	460e      	mov	r6, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	4605      	mov	r5, r0
 80086b4:	b118      	cbz	r0, 80086be <__swbuf_r+0x12>
 80086b6:	6983      	ldr	r3, [r0, #24]
 80086b8:	b90b      	cbnz	r3, 80086be <__swbuf_r+0x12>
 80086ba:	f001 f84b 	bl	8009754 <__sinit>
 80086be:	4b21      	ldr	r3, [pc, #132]	; (8008744 <__swbuf_r+0x98>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d12b      	bne.n	800871c <__swbuf_r+0x70>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	60a3      	str	r3, [r4, #8]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	071a      	lsls	r2, r3, #28
 80086ce:	d52f      	bpl.n	8008730 <__swbuf_r+0x84>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b36b      	cbz	r3, 8008730 <__swbuf_r+0x84>
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1ac0      	subs	r0, r0, r3
 80086da:	6963      	ldr	r3, [r4, #20]
 80086dc:	b2f6      	uxtb	r6, r6
 80086de:	4283      	cmp	r3, r0
 80086e0:	4637      	mov	r7, r6
 80086e2:	dc04      	bgt.n	80086ee <__swbuf_r+0x42>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 ffa0 	bl	800962c <_fflush_r>
 80086ec:	bb30      	cbnz	r0, 800873c <__swbuf_r+0x90>
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	60a3      	str	r3, [r4, #8]
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	701e      	strb	r6, [r3, #0]
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	3001      	adds	r0, #1
 8008700:	4283      	cmp	r3, r0
 8008702:	d004      	beq.n	800870e <__swbuf_r+0x62>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	07db      	lsls	r3, r3, #31
 8008708:	d506      	bpl.n	8008718 <__swbuf_r+0x6c>
 800870a:	2e0a      	cmp	r6, #10
 800870c:	d104      	bne.n	8008718 <__swbuf_r+0x6c>
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	f000 ff8b 	bl	800962c <_fflush_r>
 8008716:	b988      	cbnz	r0, 800873c <__swbuf_r+0x90>
 8008718:	4638      	mov	r0, r7
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <__swbuf_r+0x9c>)
 800871e:	429c      	cmp	r4, r3
 8008720:	d101      	bne.n	8008726 <__swbuf_r+0x7a>
 8008722:	68ac      	ldr	r4, [r5, #8]
 8008724:	e7cf      	b.n	80086c6 <__swbuf_r+0x1a>
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <__swbuf_r+0xa0>)
 8008728:	429c      	cmp	r4, r3
 800872a:	bf08      	it	eq
 800872c:	68ec      	ldreq	r4, [r5, #12]
 800872e:	e7ca      	b.n	80086c6 <__swbuf_r+0x1a>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f80c 	bl	8008750 <__swsetup_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	d0cb      	beq.n	80086d4 <__swbuf_r+0x28>
 800873c:	f04f 37ff 	mov.w	r7, #4294967295
 8008740:	e7ea      	b.n	8008718 <__swbuf_r+0x6c>
 8008742:	bf00      	nop
 8008744:	0800d154 	.word	0x0800d154
 8008748:	0800d174 	.word	0x0800d174
 800874c:	0800d134 	.word	0x0800d134

08008750 <__swsetup_r>:
 8008750:	4b32      	ldr	r3, [pc, #200]	; (800881c <__swsetup_r+0xcc>)
 8008752:	b570      	push	{r4, r5, r6, lr}
 8008754:	681d      	ldr	r5, [r3, #0]
 8008756:	4606      	mov	r6, r0
 8008758:	460c      	mov	r4, r1
 800875a:	b125      	cbz	r5, 8008766 <__swsetup_r+0x16>
 800875c:	69ab      	ldr	r3, [r5, #24]
 800875e:	b913      	cbnz	r3, 8008766 <__swsetup_r+0x16>
 8008760:	4628      	mov	r0, r5
 8008762:	f000 fff7 	bl	8009754 <__sinit>
 8008766:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <__swsetup_r+0xd0>)
 8008768:	429c      	cmp	r4, r3
 800876a:	d10f      	bne.n	800878c <__swsetup_r+0x3c>
 800876c:	686c      	ldr	r4, [r5, #4]
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008774:	0719      	lsls	r1, r3, #28
 8008776:	d42c      	bmi.n	80087d2 <__swsetup_r+0x82>
 8008778:	06dd      	lsls	r5, r3, #27
 800877a:	d411      	bmi.n	80087a0 <__swsetup_r+0x50>
 800877c:	2309      	movs	r3, #9
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008784:	81a3      	strh	r3, [r4, #12]
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	e03e      	b.n	800880a <__swsetup_r+0xba>
 800878c:	4b25      	ldr	r3, [pc, #148]	; (8008824 <__swsetup_r+0xd4>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d101      	bne.n	8008796 <__swsetup_r+0x46>
 8008792:	68ac      	ldr	r4, [r5, #8]
 8008794:	e7eb      	b.n	800876e <__swsetup_r+0x1e>
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <__swsetup_r+0xd8>)
 8008798:	429c      	cmp	r4, r3
 800879a:	bf08      	it	eq
 800879c:	68ec      	ldreq	r4, [r5, #12]
 800879e:	e7e6      	b.n	800876e <__swsetup_r+0x1e>
 80087a0:	0758      	lsls	r0, r3, #29
 80087a2:	d512      	bpl.n	80087ca <__swsetup_r+0x7a>
 80087a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a6:	b141      	cbz	r1, 80087ba <__swsetup_r+0x6a>
 80087a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ac:	4299      	cmp	r1, r3
 80087ae:	d002      	beq.n	80087b6 <__swsetup_r+0x66>
 80087b0:	4630      	mov	r0, r6
 80087b2:	f001 fc7d 	bl	800a0b0 <_free_r>
 80087b6:	2300      	movs	r3, #0
 80087b8:	6363      	str	r3, [r4, #52]	; 0x34
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	2300      	movs	r3, #0
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f043 0308 	orr.w	r3, r3, #8
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	b94b      	cbnz	r3, 80087ea <__swsetup_r+0x9a>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e0:	d003      	beq.n	80087ea <__swsetup_r+0x9a>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4630      	mov	r0, r6
 80087e6:	f001 f87f 	bl	80098e8 <__smakebuf_r>
 80087ea:	89a0      	ldrh	r0, [r4, #12]
 80087ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f0:	f010 0301 	ands.w	r3, r0, #1
 80087f4:	d00a      	beq.n	800880c <__swsetup_r+0xbc>
 80087f6:	2300      	movs	r3, #0
 80087f8:	60a3      	str	r3, [r4, #8]
 80087fa:	6963      	ldr	r3, [r4, #20]
 80087fc:	425b      	negs	r3, r3
 80087fe:	61a3      	str	r3, [r4, #24]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	b943      	cbnz	r3, 8008816 <__swsetup_r+0xc6>
 8008804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008808:	d1ba      	bne.n	8008780 <__swsetup_r+0x30>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	0781      	lsls	r1, r0, #30
 800880e:	bf58      	it	pl
 8008810:	6963      	ldrpl	r3, [r4, #20]
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	e7f4      	b.n	8008800 <__swsetup_r+0xb0>
 8008816:	2000      	movs	r0, #0
 8008818:	e7f7      	b.n	800880a <__swsetup_r+0xba>
 800881a:	bf00      	nop
 800881c:	200002b4 	.word	0x200002b4
 8008820:	0800d154 	.word	0x0800d154
 8008824:	0800d174 	.word	0x0800d174
 8008828:	0800d134 	.word	0x0800d134

0800882c <quorem>:
 800882c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	6903      	ldr	r3, [r0, #16]
 8008832:	690c      	ldr	r4, [r1, #16]
 8008834:	42a3      	cmp	r3, r4
 8008836:	4607      	mov	r7, r0
 8008838:	f2c0 8081 	blt.w	800893e <quorem+0x112>
 800883c:	3c01      	subs	r4, #1
 800883e:	f101 0814 	add.w	r8, r1, #20
 8008842:	f100 0514 	add.w	r5, r0, #20
 8008846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008854:	3301      	adds	r3, #1
 8008856:	429a      	cmp	r2, r3
 8008858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800885c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008860:	fbb2 f6f3 	udiv	r6, r2, r3
 8008864:	d331      	bcc.n	80088ca <quorem+0x9e>
 8008866:	f04f 0e00 	mov.w	lr, #0
 800886a:	4640      	mov	r0, r8
 800886c:	46ac      	mov	ip, r5
 800886e:	46f2      	mov	sl, lr
 8008870:	f850 2b04 	ldr.w	r2, [r0], #4
 8008874:	b293      	uxth	r3, r2
 8008876:	fb06 e303 	mla	r3, r6, r3, lr
 800887a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ebaa 0303 	sub.w	r3, sl, r3
 8008884:	0c12      	lsrs	r2, r2, #16
 8008886:	f8dc a000 	ldr.w	sl, [ip]
 800888a:	fb06 e202 	mla	r2, r6, r2, lr
 800888e:	fa13 f38a 	uxtah	r3, r3, sl
 8008892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008896:	fa1f fa82 	uxth.w	sl, r2
 800889a:	f8dc 2000 	ldr.w	r2, [ip]
 800889e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	4581      	cmp	r9, r0
 80088ae:	f84c 3b04 	str.w	r3, [ip], #4
 80088b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088b6:	d2db      	bcs.n	8008870 <quorem+0x44>
 80088b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088bc:	b92b      	cbnz	r3, 80088ca <quorem+0x9e>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	3b04      	subs	r3, #4
 80088c2:	429d      	cmp	r5, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	d32e      	bcc.n	8008926 <quorem+0xfa>
 80088c8:	613c      	str	r4, [r7, #16]
 80088ca:	4638      	mov	r0, r7
 80088cc:	f001 fae0 	bl	8009e90 <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	db24      	blt.n	800891e <quorem+0xf2>
 80088d4:	3601      	adds	r6, #1
 80088d6:	4628      	mov	r0, r5
 80088d8:	f04f 0c00 	mov.w	ip, #0
 80088dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80088e0:	f8d0 e000 	ldr.w	lr, [r0]
 80088e4:	b293      	uxth	r3, r2
 80088e6:	ebac 0303 	sub.w	r3, ip, r3
 80088ea:	0c12      	lsrs	r2, r2, #16
 80088ec:	fa13 f38e 	uxtah	r3, r3, lr
 80088f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088fe:	45c1      	cmp	r9, r8
 8008900:	f840 3b04 	str.w	r3, [r0], #4
 8008904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008908:	d2e8      	bcs.n	80088dc <quorem+0xb0>
 800890a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800890e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008912:	b922      	cbnz	r2, 800891e <quorem+0xf2>
 8008914:	3b04      	subs	r3, #4
 8008916:	429d      	cmp	r5, r3
 8008918:	461a      	mov	r2, r3
 800891a:	d30a      	bcc.n	8008932 <quorem+0x106>
 800891c:	613c      	str	r4, [r7, #16]
 800891e:	4630      	mov	r0, r6
 8008920:	b003      	add	sp, #12
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	3b04      	subs	r3, #4
 800892a:	2a00      	cmp	r2, #0
 800892c:	d1cc      	bne.n	80088c8 <quorem+0x9c>
 800892e:	3c01      	subs	r4, #1
 8008930:	e7c7      	b.n	80088c2 <quorem+0x96>
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	3b04      	subs	r3, #4
 8008936:	2a00      	cmp	r2, #0
 8008938:	d1f0      	bne.n	800891c <quorem+0xf0>
 800893a:	3c01      	subs	r4, #1
 800893c:	e7eb      	b.n	8008916 <quorem+0xea>
 800893e:	2000      	movs	r0, #0
 8008940:	e7ee      	b.n	8008920 <quorem+0xf4>
 8008942:	0000      	movs	r0, r0
 8008944:	0000      	movs	r0, r0
	...

08008948 <_dtoa_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ed2d 8b02 	vpush	{d8}
 8008950:	ec57 6b10 	vmov	r6, r7, d0
 8008954:	b095      	sub	sp, #84	; 0x54
 8008956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008962:	4604      	mov	r4, r0
 8008964:	9209      	str	r2, [sp, #36]	; 0x24
 8008966:	930f      	str	r3, [sp, #60]	; 0x3c
 8008968:	b975      	cbnz	r5, 8008988 <_dtoa_r+0x40>
 800896a:	2010      	movs	r0, #16
 800896c:	f000 fffc 	bl	8009968 <malloc>
 8008970:	4602      	mov	r2, r0
 8008972:	6260      	str	r0, [r4, #36]	; 0x24
 8008974:	b920      	cbnz	r0, 8008980 <_dtoa_r+0x38>
 8008976:	4bb2      	ldr	r3, [pc, #712]	; (8008c40 <_dtoa_r+0x2f8>)
 8008978:	21ea      	movs	r1, #234	; 0xea
 800897a:	48b2      	ldr	r0, [pc, #712]	; (8008c44 <_dtoa_r+0x2fc>)
 800897c:	f001 fca8 	bl	800a2d0 <__assert_func>
 8008980:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008984:	6005      	str	r5, [r0, #0]
 8008986:	60c5      	str	r5, [r0, #12]
 8008988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898a:	6819      	ldr	r1, [r3, #0]
 800898c:	b151      	cbz	r1, 80089a4 <_dtoa_r+0x5c>
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	604a      	str	r2, [r1, #4]
 8008992:	2301      	movs	r3, #1
 8008994:	4093      	lsls	r3, r2
 8008996:	608b      	str	r3, [r1, #8]
 8008998:	4620      	mov	r0, r4
 800899a:	f001 f83b 	bl	8009a14 <_Bfree>
 800899e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	1e3b      	subs	r3, r7, #0
 80089a6:	bfb9      	ittee	lt
 80089a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	9303      	strlt	r3, [sp, #12]
 80089ae:	2300      	movge	r3, #0
 80089b0:	f8c8 3000 	strge.w	r3, [r8]
 80089b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80089b8:	4ba3      	ldr	r3, [pc, #652]	; (8008c48 <_dtoa_r+0x300>)
 80089ba:	bfbc      	itt	lt
 80089bc:	2201      	movlt	r2, #1
 80089be:	f8c8 2000 	strlt.w	r2, [r8]
 80089c2:	ea33 0309 	bics.w	r3, r3, r9
 80089c6:	d11b      	bne.n	8008a00 <_dtoa_r+0xb8>
 80089c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089d4:	4333      	orrs	r3, r6
 80089d6:	f000 857a 	beq.w	80094ce <_dtoa_r+0xb86>
 80089da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089dc:	b963      	cbnz	r3, 80089f8 <_dtoa_r+0xb0>
 80089de:	4b9b      	ldr	r3, [pc, #620]	; (8008c4c <_dtoa_r+0x304>)
 80089e0:	e024      	b.n	8008a2c <_dtoa_r+0xe4>
 80089e2:	4b9b      	ldr	r3, [pc, #620]	; (8008c50 <_dtoa_r+0x308>)
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	9800      	ldr	r0, [sp, #0]
 80089ee:	b015      	add	sp, #84	; 0x54
 80089f0:	ecbd 8b02 	vpop	{d8}
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	4b94      	ldr	r3, [pc, #592]	; (8008c4c <_dtoa_r+0x304>)
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	3303      	adds	r3, #3
 80089fe:	e7f3      	b.n	80089e8 <_dtoa_r+0xa0>
 8008a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	ec51 0b17 	vmov	r0, r1, d7
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a10:	f7f8 f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8008a14:	4680      	mov	r8, r0
 8008a16:	b158      	cbz	r0, 8008a30 <_dtoa_r+0xe8>
 8008a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8551 	beq.w	80094c8 <_dtoa_r+0xb80>
 8008a26:	488b      	ldr	r0, [pc, #556]	; (8008c54 <_dtoa_r+0x30c>)
 8008a28:	6018      	str	r0, [r3, #0]
 8008a2a:	1e43      	subs	r3, r0, #1
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	e7dd      	b.n	80089ec <_dtoa_r+0xa4>
 8008a30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a34:	aa12      	add	r2, sp, #72	; 0x48
 8008a36:	a913      	add	r1, sp, #76	; 0x4c
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f001 facd 	bl	8009fd8 <__d2b>
 8008a3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a42:	4683      	mov	fp, r0
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d07c      	beq.n	8008b42 <_dtoa_r+0x1fa>
 8008a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a62:	4b7d      	ldr	r3, [pc, #500]	; (8008c58 <_dtoa_r+0x310>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f7 fc2d 	bl	80002c8 <__aeabi_dsub>
 8008a6e:	a36e      	add	r3, pc, #440	; (adr r3, 8008c28 <_dtoa_r+0x2e0>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fde0 	bl	8000638 <__aeabi_dmul>
 8008a78:	a36d      	add	r3, pc, #436	; (adr r3, 8008c30 <_dtoa_r+0x2e8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc25 	bl	80002cc <__adddf3>
 8008a82:	4606      	mov	r6, r0
 8008a84:	4628      	mov	r0, r5
 8008a86:	460f      	mov	r7, r1
 8008a88:	f7f7 fd6c 	bl	8000564 <__aeabi_i2d>
 8008a8c:	a36a      	add	r3, pc, #424	; (adr r3, 8008c38 <_dtoa_r+0x2f0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fdd1 	bl	8000638 <__aeabi_dmul>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f7 fc15 	bl	80002cc <__adddf3>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	f7f8 f877 	bl	8000b98 <__aeabi_d2iz>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4682      	mov	sl, r0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f8 f832 	bl	8000b1c <__aeabi_dcmplt>
 8008ab8:	b148      	cbz	r0, 8008ace <_dtoa_r+0x186>
 8008aba:	4650      	mov	r0, sl
 8008abc:	f7f7 fd52 	bl	8000564 <__aeabi_i2d>
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	463b      	mov	r3, r7
 8008ac4:	f7f8 f820 	bl	8000b08 <__aeabi_dcmpeq>
 8008ac8:	b908      	cbnz	r0, 8008ace <_dtoa_r+0x186>
 8008aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ace:	f1ba 0f16 	cmp.w	sl, #22
 8008ad2:	d854      	bhi.n	8008b7e <_dtoa_r+0x236>
 8008ad4:	4b61      	ldr	r3, [pc, #388]	; (8008c5c <_dtoa_r+0x314>)
 8008ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ae2:	f7f8 f81b 	bl	8000b1c <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d04b      	beq.n	8008b82 <_dtoa_r+0x23a>
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aee:	2300      	movs	r3, #0
 8008af0:	930e      	str	r3, [sp, #56]	; 0x38
 8008af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008af4:	1b5d      	subs	r5, r3, r5
 8008af6:	1e6b      	subs	r3, r5, #1
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	bf43      	ittte	mi
 8008afc:	2300      	movmi	r3, #0
 8008afe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008b02:	9304      	strmi	r3, [sp, #16]
 8008b04:	f04f 0800 	movpl.w	r8, #0
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	db3b      	blt.n	8008b86 <_dtoa_r+0x23e>
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008b14:	4453      	add	r3, sl
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9306      	str	r3, [sp, #24]
 8008b1c:	9b05      	ldr	r3, [sp, #20]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d869      	bhi.n	8008bf6 <_dtoa_r+0x2ae>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	bfc4      	itt	gt
 8008b26:	3b04      	subgt	r3, #4
 8008b28:	9305      	strgt	r3, [sp, #20]
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b30:	bfcc      	ite	gt
 8008b32:	2500      	movgt	r5, #0
 8008b34:	2501      	movle	r5, #1
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d869      	bhi.n	8008c0e <_dtoa_r+0x2c6>
 8008b3a:	e8df f003 	tbb	[pc, r3]
 8008b3e:	4e2c      	.short	0x4e2c
 8008b40:	5a4c      	.short	0x5a4c
 8008b42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b46:	441d      	add	r5, r3
 8008b48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	bfc1      	itttt	gt
 8008b50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b58:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b60:	bfda      	itte	le
 8008b62:	f1c3 0320 	rsble	r3, r3, #32
 8008b66:	fa06 f003 	lslle.w	r0, r6, r3
 8008b6a:	4318      	orrgt	r0, r3
 8008b6c:	f7f7 fcea 	bl	8000544 <__aeabi_ui2d>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4606      	mov	r6, r0
 8008b74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b78:	3d01      	subs	r5, #1
 8008b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b7c:	e771      	b.n	8008a62 <_dtoa_r+0x11a>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7b6      	b.n	8008af0 <_dtoa_r+0x1a8>
 8008b82:	900e      	str	r0, [sp, #56]	; 0x38
 8008b84:	e7b5      	b.n	8008af2 <_dtoa_r+0x1aa>
 8008b86:	f1ca 0300 	rsb	r3, sl, #0
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	eba8 080a 	sub.w	r8, r8, sl
 8008b92:	930d      	str	r3, [sp, #52]	; 0x34
 8008b94:	e7c2      	b.n	8008b1c <_dtoa_r+0x1d4>
 8008b96:	2300      	movs	r3, #0
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc39      	bgt.n	8008c14 <_dtoa_r+0x2cc>
 8008ba0:	f04f 0901 	mov.w	r9, #1
 8008ba4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ba8:	464b      	mov	r3, r9
 8008baa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6042      	str	r2, [r0, #4]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	f102 0614 	add.w	r6, r2, #20
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	6841      	ldr	r1, [r0, #4]
 8008bbe:	d92f      	bls.n	8008c20 <_dtoa_r+0x2d8>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fee7 	bl	8009994 <_Balloc>
 8008bc6:	9000      	str	r0, [sp, #0]
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d14b      	bne.n	8008c64 <_dtoa_r+0x31c>
 8008bcc:	4b24      	ldr	r3, [pc, #144]	; (8008c60 <_dtoa_r+0x318>)
 8008bce:	4602      	mov	r2, r0
 8008bd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bd4:	e6d1      	b.n	800897a <_dtoa_r+0x32>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7de      	b.n	8008b98 <_dtoa_r+0x250>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	eb0a 0903 	add.w	r9, sl, r3
 8008be4:	f109 0301 	add.w	r3, r9, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	bfb8      	it	lt
 8008bee:	2301      	movlt	r3, #1
 8008bf0:	e7dd      	b.n	8008bae <_dtoa_r+0x266>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7f2      	b.n	8008bdc <_dtoa_r+0x294>
 8008bf6:	2501      	movs	r5, #1
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	9508      	str	r5, [sp, #32]
 8008bfe:	f04f 39ff 	mov.w	r9, #4294967295
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c08:	2312      	movs	r3, #18
 8008c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0c:	e7cf      	b.n	8008bae <_dtoa_r+0x266>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9308      	str	r3, [sp, #32]
 8008c12:	e7f4      	b.n	8008bfe <_dtoa_r+0x2b6>
 8008c14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	e7c6      	b.n	8008bae <_dtoa_r+0x266>
 8008c20:	3101      	adds	r1, #1
 8008c22:	6041      	str	r1, [r0, #4]
 8008c24:	0052      	lsls	r2, r2, #1
 8008c26:	e7c6      	b.n	8008bb6 <_dtoa_r+0x26e>
 8008c28:	636f4361 	.word	0x636f4361
 8008c2c:	3fd287a7 	.word	0x3fd287a7
 8008c30:	8b60c8b3 	.word	0x8b60c8b3
 8008c34:	3fc68a28 	.word	0x3fc68a28
 8008c38:	509f79fb 	.word	0x509f79fb
 8008c3c:	3fd34413 	.word	0x3fd34413
 8008c40:	0800d0aa 	.word	0x0800d0aa
 8008c44:	0800d0c1 	.word	0x0800d0c1
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	0800d0a6 	.word	0x0800d0a6
 8008c50:	0800d09d 	.word	0x0800d09d
 8008c54:	0800cf79 	.word	0x0800cf79
 8008c58:	3ff80000 	.word	0x3ff80000
 8008c5c:	0800d220 	.word	0x0800d220
 8008c60:	0800d120 	.word	0x0800d120
 8008c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c66:	9a00      	ldr	r2, [sp, #0]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	2b0e      	cmp	r3, #14
 8008c6e:	f200 80ad 	bhi.w	8008dcc <_dtoa_r+0x484>
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	f000 80aa 	beq.w	8008dcc <_dtoa_r+0x484>
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	dd36      	ble.n	8008cec <_dtoa_r+0x3a4>
 8008c7e:	4ac3      	ldr	r2, [pc, #780]	; (8008f8c <_dtoa_r+0x644>)
 8008c80:	f00a 030f 	and.w	r3, sl, #15
 8008c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c88:	ed93 7b00 	vldr	d7, [r3]
 8008c8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c94:	eeb0 8a47 	vmov.f32	s16, s14
 8008c98:	eef0 8a67 	vmov.f32	s17, s15
 8008c9c:	d016      	beq.n	8008ccc <_dtoa_r+0x384>
 8008c9e:	4bbc      	ldr	r3, [pc, #752]	; (8008f90 <_dtoa_r+0x648>)
 8008ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca8:	f7f7 fdf0 	bl	800088c <__aeabi_ddiv>
 8008cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb0:	f007 070f 	and.w	r7, r7, #15
 8008cb4:	2503      	movs	r5, #3
 8008cb6:	4eb6      	ldr	r6, [pc, #728]	; (8008f90 <_dtoa_r+0x648>)
 8008cb8:	b957      	cbnz	r7, 8008cd0 <_dtoa_r+0x388>
 8008cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cbe:	ec53 2b18 	vmov	r2, r3, d8
 8008cc2:	f7f7 fde3 	bl	800088c <__aeabi_ddiv>
 8008cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cca:	e029      	b.n	8008d20 <_dtoa_r+0x3d8>
 8008ccc:	2502      	movs	r5, #2
 8008cce:	e7f2      	b.n	8008cb6 <_dtoa_r+0x36e>
 8008cd0:	07f9      	lsls	r1, r7, #31
 8008cd2:	d508      	bpl.n	8008ce6 <_dtoa_r+0x39e>
 8008cd4:	ec51 0b18 	vmov	r0, r1, d8
 8008cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cdc:	f7f7 fcac 	bl	8000638 <__aeabi_dmul>
 8008ce0:	ec41 0b18 	vmov	d8, r0, r1
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	107f      	asrs	r7, r7, #1
 8008ce8:	3608      	adds	r6, #8
 8008cea:	e7e5      	b.n	8008cb8 <_dtoa_r+0x370>
 8008cec:	f000 80a6 	beq.w	8008e3c <_dtoa_r+0x4f4>
 8008cf0:	f1ca 0600 	rsb	r6, sl, #0
 8008cf4:	4ba5      	ldr	r3, [pc, #660]	; (8008f8c <_dtoa_r+0x644>)
 8008cf6:	4fa6      	ldr	r7, [pc, #664]	; (8008f90 <_dtoa_r+0x648>)
 8008cf8:	f006 020f 	and.w	r2, r6, #15
 8008cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d08:	f7f7 fc96 	bl	8000638 <__aeabi_dmul>
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	1136      	asrs	r6, r6, #4
 8008d12:	2300      	movs	r3, #0
 8008d14:	2502      	movs	r5, #2
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	f040 8085 	bne.w	8008e26 <_dtoa_r+0x4de>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1d2      	bne.n	8008cc6 <_dtoa_r+0x37e>
 8008d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 808c 	beq.w	8008e40 <_dtoa_r+0x4f8>
 8008d28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d2c:	4b99      	ldr	r3, [pc, #612]	; (8008f94 <_dtoa_r+0x64c>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 fef2 	bl	8000b1c <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f000 8081 	beq.w	8008e40 <_dtoa_r+0x4f8>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d07d      	beq.n	8008e40 <_dtoa_r+0x4f8>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	dd3c      	ble.n	8008dc4 <_dtoa_r+0x47c>
 8008d4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	2200      	movs	r2, #0
 8008d52:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <_dtoa_r+0x650>)
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d60:	3501      	adds	r5, #1
 8008d62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7f7 fbfa 	bl	8000564 <__aeabi_i2d>
 8008d70:	4632      	mov	r2, r6
 8008d72:	463b      	mov	r3, r7
 8008d74:	f7f7 fc60 	bl	8000638 <__aeabi_dmul>
 8008d78:	4b88      	ldr	r3, [pc, #544]	; (8008f9c <_dtoa_r+0x654>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f7f7 faa6 	bl	80002cc <__adddf3>
 8008d80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d15c      	bne.n	8008e4a <_dtoa_r+0x502>
 8008d90:	4b83      	ldr	r3, [pc, #524]	; (8008fa0 <_dtoa_r+0x658>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fa96 	bl	80002c8 <__aeabi_dsub>
 8008d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da0:	4606      	mov	r6, r0
 8008da2:	460f      	mov	r7, r1
 8008da4:	f7f7 fed8 	bl	8000b58 <__aeabi_dcmpgt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f040 8296 	bne.w	80092da <_dtoa_r+0x992>
 8008dae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008db2:	4630      	mov	r0, r6
 8008db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 feaf 	bl	8000b1c <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8288 	bne.w	80092d4 <_dtoa_r+0x98c>
 8008dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f2c0 8158 	blt.w	8009084 <_dtoa_r+0x73c>
 8008dd4:	f1ba 0f0e 	cmp.w	sl, #14
 8008dd8:	f300 8154 	bgt.w	8009084 <_dtoa_r+0x73c>
 8008ddc:	4b6b      	ldr	r3, [pc, #428]	; (8008f8c <_dtoa_r+0x644>)
 8008dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008de2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f280 80e3 	bge.w	8008fb4 <_dtoa_r+0x66c>
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f300 80df 	bgt.w	8008fb4 <_dtoa_r+0x66c>
 8008df6:	f040 826d 	bne.w	80092d4 <_dtoa_r+0x98c>
 8008dfa:	4b69      	ldr	r3, [pc, #420]	; (8008fa0 <_dtoa_r+0x658>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fc19 	bl	8000638 <__aeabi_dmul>
 8008e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e0a:	f7f7 fe9b 	bl	8000b44 <__aeabi_dcmpge>
 8008e0e:	9e01      	ldr	r6, [sp, #4]
 8008e10:	4637      	mov	r7, r6
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f040 8243 	bne.w	800929e <_dtoa_r+0x956>
 8008e18:	9d00      	ldr	r5, [sp, #0]
 8008e1a:	2331      	movs	r3, #49	; 0x31
 8008e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	e23f      	b.n	80092a6 <_dtoa_r+0x95e>
 8008e26:	07f2      	lsls	r2, r6, #31
 8008e28:	d505      	bpl.n	8008e36 <_dtoa_r+0x4ee>
 8008e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2e:	f7f7 fc03 	bl	8000638 <__aeabi_dmul>
 8008e32:	3501      	adds	r5, #1
 8008e34:	2301      	movs	r3, #1
 8008e36:	1076      	asrs	r6, r6, #1
 8008e38:	3708      	adds	r7, #8
 8008e3a:	e76c      	b.n	8008d16 <_dtoa_r+0x3ce>
 8008e3c:	2502      	movs	r5, #2
 8008e3e:	e76f      	b.n	8008d20 <_dtoa_r+0x3d8>
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e46:	930c      	str	r3, [sp, #48]	; 0x30
 8008e48:	e78d      	b.n	8008d66 <_dtoa_r+0x41e>
 8008e4a:	9900      	ldr	r1, [sp, #0]
 8008e4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e50:	4b4e      	ldr	r3, [pc, #312]	; (8008f8c <_dtoa_r+0x644>)
 8008e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e56:	4401      	add	r1, r0
 8008e58:	9102      	str	r1, [sp, #8]
 8008e5a:	9908      	ldr	r1, [sp, #32]
 8008e5c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e60:	eef0 8a67 	vmov.f32	s17, s15
 8008e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d045      	beq.n	8008efc <_dtoa_r+0x5b4>
 8008e70:	494c      	ldr	r1, [pc, #304]	; (8008fa4 <_dtoa_r+0x65c>)
 8008e72:	2000      	movs	r0, #0
 8008e74:	f7f7 fd0a 	bl	800088c <__aeabi_ddiv>
 8008e78:	ec53 2b18 	vmov	r2, r3, d8
 8008e7c:	f7f7 fa24 	bl	80002c8 <__aeabi_dsub>
 8008e80:	9d00      	ldr	r5, [sp, #0]
 8008e82:	ec41 0b18 	vmov	d8, r0, r1
 8008e86:	4639      	mov	r1, r7
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7f7 fe85 	bl	8000b98 <__aeabi_d2iz>
 8008e8e:	900c      	str	r0, [sp, #48]	; 0x30
 8008e90:	f7f7 fb68 	bl	8000564 <__aeabi_i2d>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 fa14 	bl	80002c8 <__aeabi_dsub>
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea2:	3330      	adds	r3, #48	; 0x30
 8008ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ea8:	ec53 2b18 	vmov	r2, r3, d8
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	f7f7 fe34 	bl	8000b1c <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d165      	bne.n	8008f84 <_dtoa_r+0x63c>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4935      	ldr	r1, [pc, #212]	; (8008f94 <_dtoa_r+0x64c>)
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f7 fa02 	bl	80002c8 <__aeabi_dsub>
 8008ec4:	ec53 2b18 	vmov	r2, r3, d8
 8008ec8:	f7f7 fe28 	bl	8000b1c <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f040 80b9 	bne.w	8009044 <_dtoa_r+0x6fc>
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	429d      	cmp	r5, r3
 8008ed6:	f43f af75 	beq.w	8008dc4 <_dtoa_r+0x47c>
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <_dtoa_r+0x650>)
 8008edc:	ec51 0b18 	vmov	r0, r1, d8
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7f7 fba9 	bl	8000638 <__aeabi_dmul>
 8008ee6:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <_dtoa_r+0x650>)
 8008ee8:	ec41 0b18 	vmov	d8, r0, r1
 8008eec:	2200      	movs	r2, #0
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	f7f7 fba1 	bl	8000638 <__aeabi_dmul>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	e7c4      	b.n	8008e86 <_dtoa_r+0x53e>
 8008efc:	ec51 0b17 	vmov	r0, r1, d7
 8008f00:	f7f7 fb9a 	bl	8000638 <__aeabi_dmul>
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	9d00      	ldr	r5, [sp, #0]
 8008f08:	930c      	str	r3, [sp, #48]	; 0x30
 8008f0a:	ec41 0b18 	vmov	d8, r0, r1
 8008f0e:	4639      	mov	r1, r7
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7f7 fe41 	bl	8000b98 <__aeabi_d2iz>
 8008f16:	9011      	str	r0, [sp, #68]	; 0x44
 8008f18:	f7f7 fb24 	bl	8000564 <__aeabi_i2d>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f9d0 	bl	80002c8 <__aeabi_dsub>
 8008f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f2a:	3330      	adds	r3, #48	; 0x30
 8008f2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	429d      	cmp	r5, r3
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	d134      	bne.n	8008fa8 <_dtoa_r+0x660>
 8008f3e:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <_dtoa_r+0x65c>)
 8008f40:	ec51 0b18 	vmov	r0, r1, d8
 8008f44:	f7f7 f9c2 	bl	80002cc <__adddf3>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fe02 	bl	8000b58 <__aeabi_dcmpgt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d175      	bne.n	8009044 <_dtoa_r+0x6fc>
 8008f58:	ec53 2b18 	vmov	r2, r3, d8
 8008f5c:	4911      	ldr	r1, [pc, #68]	; (8008fa4 <_dtoa_r+0x65c>)
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f7f7 f9b2 	bl	80002c8 <__aeabi_dsub>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fdd6 	bl	8000b1c <__aeabi_dcmplt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f43f af27 	beq.w	8008dc4 <_dtoa_r+0x47c>
 8008f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f78:	1e6b      	subs	r3, r5, #1
 8008f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f80:	2b30      	cmp	r3, #48	; 0x30
 8008f82:	d0f8      	beq.n	8008f76 <_dtoa_r+0x62e>
 8008f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f88:	e04a      	b.n	8009020 <_dtoa_r+0x6d8>
 8008f8a:	bf00      	nop
 8008f8c:	0800d220 	.word	0x0800d220
 8008f90:	0800d1f8 	.word	0x0800d1f8
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	40240000 	.word	0x40240000
 8008f9c:	401c0000 	.word	0x401c0000
 8008fa0:	40140000 	.word	0x40140000
 8008fa4:	3fe00000 	.word	0x3fe00000
 8008fa8:	4baf      	ldr	r3, [pc, #700]	; (8009268 <_dtoa_r+0x920>)
 8008faa:	f7f7 fb45 	bl	8000638 <__aeabi_dmul>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	e7ac      	b.n	8008f0e <_dtoa_r+0x5c6>
 8008fb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fb8:	9d00      	ldr	r5, [sp, #0]
 8008fba:	4642      	mov	r2, r8
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fc63 	bl	800088c <__aeabi_ddiv>
 8008fc6:	f7f7 fde7 	bl	8000b98 <__aeabi_d2iz>
 8008fca:	9002      	str	r0, [sp, #8]
 8008fcc:	f7f7 faca 	bl	8000564 <__aeabi_i2d>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f7f7 fb30 	bl	8000638 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 f972 	bl	80002c8 <__aeabi_dsub>
 8008fe4:	9e02      	ldr	r6, [sp, #8]
 8008fe6:	9f01      	ldr	r7, [sp, #4]
 8008fe8:	3630      	adds	r6, #48	; 0x30
 8008fea:	f805 6b01 	strb.w	r6, [r5], #1
 8008fee:	9e00      	ldr	r6, [sp, #0]
 8008ff0:	1bae      	subs	r6, r5, r6
 8008ff2:	42b7      	cmp	r7, r6
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	d137      	bne.n	800906a <_dtoa_r+0x722>
 8008ffa:	f7f7 f967 	bl	80002cc <__adddf3>
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	f7f7 fda7 	bl	8000b58 <__aeabi_dcmpgt>
 800900a:	b9c8      	cbnz	r0, 8009040 <_dtoa_r+0x6f8>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8009018:	b110      	cbz	r0, 8009020 <_dtoa_r+0x6d8>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	07d9      	lsls	r1, r3, #31
 800901e:	d40f      	bmi.n	8009040 <_dtoa_r+0x6f8>
 8009020:	4620      	mov	r0, r4
 8009022:	4659      	mov	r1, fp
 8009024:	f000 fcf6 	bl	8009a14 <_Bfree>
 8009028:	2300      	movs	r3, #0
 800902a:	702b      	strb	r3, [r5, #0]
 800902c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800902e:	f10a 0001 	add.w	r0, sl, #1
 8009032:	6018      	str	r0, [r3, #0]
 8009034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009036:	2b00      	cmp	r3, #0
 8009038:	f43f acd8 	beq.w	80089ec <_dtoa_r+0xa4>
 800903c:	601d      	str	r5, [r3, #0]
 800903e:	e4d5      	b.n	80089ec <_dtoa_r+0xa4>
 8009040:	f8cd a01c 	str.w	sl, [sp, #28]
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a39      	cmp	r2, #57	; 0x39
 800904e:	d108      	bne.n	8009062 <_dtoa_r+0x71a>
 8009050:	9a00      	ldr	r2, [sp, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d1f7      	bne.n	8009046 <_dtoa_r+0x6fe>
 8009056:	9a07      	ldr	r2, [sp, #28]
 8009058:	9900      	ldr	r1, [sp, #0]
 800905a:	3201      	adds	r2, #1
 800905c:	9207      	str	r2, [sp, #28]
 800905e:	2230      	movs	r2, #48	; 0x30
 8009060:	700a      	strb	r2, [r1, #0]
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	3201      	adds	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	e78c      	b.n	8008f84 <_dtoa_r+0x63c>
 800906a:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <_dtoa_r+0x920>)
 800906c:	2200      	movs	r2, #0
 800906e:	f7f7 fae3 	bl	8000638 <__aeabi_dmul>
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	f7f7 fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800907e:	2800      	cmp	r0, #0
 8009080:	d09b      	beq.n	8008fba <_dtoa_r+0x672>
 8009082:	e7cd      	b.n	8009020 <_dtoa_r+0x6d8>
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	2a00      	cmp	r2, #0
 8009088:	f000 80c4 	beq.w	8009214 <_dtoa_r+0x8cc>
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	2a01      	cmp	r2, #1
 8009090:	f300 80a8 	bgt.w	80091e4 <_dtoa_r+0x89c>
 8009094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009096:	2a00      	cmp	r2, #0
 8009098:	f000 80a0 	beq.w	80091dc <_dtoa_r+0x894>
 800909c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090a0:	9e06      	ldr	r6, [sp, #24]
 80090a2:	4645      	mov	r5, r8
 80090a4:	9a04      	ldr	r2, [sp, #16]
 80090a6:	2101      	movs	r1, #1
 80090a8:	441a      	add	r2, r3
 80090aa:	4620      	mov	r0, r4
 80090ac:	4498      	add	r8, r3
 80090ae:	9204      	str	r2, [sp, #16]
 80090b0:	f000 fd6c 	bl	8009b8c <__i2b>
 80090b4:	4607      	mov	r7, r0
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	dd0b      	ble.n	80090d2 <_dtoa_r+0x78a>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd08      	ble.n	80090d2 <_dtoa_r+0x78a>
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	bfa8      	it	ge
 80090c6:	462b      	movge	r3, r5
 80090c8:	eba8 0803 	sub.w	r8, r8, r3
 80090cc:	1aed      	subs	r5, r5, r3
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	b1fb      	cbz	r3, 8009116 <_dtoa_r+0x7ce>
 80090d6:	9b08      	ldr	r3, [sp, #32]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 809f 	beq.w	800921c <_dtoa_r+0x8d4>
 80090de:	2e00      	cmp	r6, #0
 80090e0:	dd11      	ble.n	8009106 <_dtoa_r+0x7be>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4632      	mov	r2, r6
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fe0c 	bl	8009d04 <__pow5mult>
 80090ec:	465a      	mov	r2, fp
 80090ee:	4601      	mov	r1, r0
 80090f0:	4607      	mov	r7, r0
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fd60 	bl	8009bb8 <__multiply>
 80090f8:	4659      	mov	r1, fp
 80090fa:	9007      	str	r0, [sp, #28]
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fc89 	bl	8009a14 <_Bfree>
 8009102:	9b07      	ldr	r3, [sp, #28]
 8009104:	469b      	mov	fp, r3
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	1b9a      	subs	r2, r3, r6
 800910a:	d004      	beq.n	8009116 <_dtoa_r+0x7ce>
 800910c:	4659      	mov	r1, fp
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fdf8 	bl	8009d04 <__pow5mult>
 8009114:	4683      	mov	fp, r0
 8009116:	2101      	movs	r1, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fd37 	bl	8009b8c <__i2b>
 800911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	4606      	mov	r6, r0
 8009124:	dd7c      	ble.n	8009220 <_dtoa_r+0x8d8>
 8009126:	461a      	mov	r2, r3
 8009128:	4601      	mov	r1, r0
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fdea 	bl	8009d04 <__pow5mult>
 8009130:	9b05      	ldr	r3, [sp, #20]
 8009132:	2b01      	cmp	r3, #1
 8009134:	4606      	mov	r6, r0
 8009136:	dd76      	ble.n	8009226 <_dtoa_r+0x8de>
 8009138:	2300      	movs	r3, #0
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	6933      	ldr	r3, [r6, #16]
 800913e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009142:	6918      	ldr	r0, [r3, #16]
 8009144:	f000 fcd2 	bl	8009aec <__hi0bits>
 8009148:	f1c0 0020 	rsb	r0, r0, #32
 800914c:	9b04      	ldr	r3, [sp, #16]
 800914e:	4418      	add	r0, r3
 8009150:	f010 001f 	ands.w	r0, r0, #31
 8009154:	f000 8086 	beq.w	8009264 <_dtoa_r+0x91c>
 8009158:	f1c0 0320 	rsb	r3, r0, #32
 800915c:	2b04      	cmp	r3, #4
 800915e:	dd7f      	ble.n	8009260 <_dtoa_r+0x918>
 8009160:	f1c0 001c 	rsb	r0, r0, #28
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	4403      	add	r3, r0
 8009168:	4480      	add	r8, r0
 800916a:	4405      	add	r5, r0
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	f1b8 0f00 	cmp.w	r8, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x838>
 8009174:	4659      	mov	r1, fp
 8009176:	4642      	mov	r2, r8
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fe1d 	bl	8009db8 <__lshift>
 800917e:	4683      	mov	fp, r0
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dd05      	ble.n	8009192 <_dtoa_r+0x84a>
 8009186:	4631      	mov	r1, r6
 8009188:	461a      	mov	r2, r3
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fe14 	bl	8009db8 <__lshift>
 8009190:	4606      	mov	r6, r0
 8009192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d069      	beq.n	800926c <_dtoa_r+0x924>
 8009198:	4631      	mov	r1, r6
 800919a:	4658      	mov	r0, fp
 800919c:	f000 fe78 	bl	8009e90 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	da63      	bge.n	800926c <_dtoa_r+0x924>
 80091a4:	2300      	movs	r3, #0
 80091a6:	4659      	mov	r1, fp
 80091a8:	220a      	movs	r2, #10
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fc54 	bl	8009a58 <__multadd>
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091b6:	4683      	mov	fp, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 818f 	beq.w	80094dc <_dtoa_r+0xb94>
 80091be:	4639      	mov	r1, r7
 80091c0:	2300      	movs	r3, #0
 80091c2:	220a      	movs	r2, #10
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fc47 	bl	8009a58 <__multadd>
 80091ca:	f1b9 0f00 	cmp.w	r9, #0
 80091ce:	4607      	mov	r7, r0
 80091d0:	f300 808e 	bgt.w	80092f0 <_dtoa_r+0x9a8>
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	dc50      	bgt.n	800927c <_dtoa_r+0x934>
 80091da:	e089      	b.n	80092f0 <_dtoa_r+0x9a8>
 80091dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091e2:	e75d      	b.n	80090a0 <_dtoa_r+0x758>
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	1e5e      	subs	r6, r3, #1
 80091e8:	9b06      	ldr	r3, [sp, #24]
 80091ea:	42b3      	cmp	r3, r6
 80091ec:	bfbf      	itttt	lt
 80091ee:	9b06      	ldrlt	r3, [sp, #24]
 80091f0:	9606      	strlt	r6, [sp, #24]
 80091f2:	1af2      	sublt	r2, r6, r3
 80091f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80091f6:	bfb6      	itet	lt
 80091f8:	189b      	addlt	r3, r3, r2
 80091fa:	1b9e      	subge	r6, r3, r6
 80091fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	bfb8      	it	lt
 8009202:	2600      	movlt	r6, #0
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb5      	itete	lt
 8009208:	eba8 0503 	sublt.w	r5, r8, r3
 800920c:	9b01      	ldrge	r3, [sp, #4]
 800920e:	2300      	movlt	r3, #0
 8009210:	4645      	movge	r5, r8
 8009212:	e747      	b.n	80090a4 <_dtoa_r+0x75c>
 8009214:	9e06      	ldr	r6, [sp, #24]
 8009216:	9f08      	ldr	r7, [sp, #32]
 8009218:	4645      	mov	r5, r8
 800921a:	e74c      	b.n	80090b6 <_dtoa_r+0x76e>
 800921c:	9a06      	ldr	r2, [sp, #24]
 800921e:	e775      	b.n	800910c <_dtoa_r+0x7c4>
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	2b01      	cmp	r3, #1
 8009224:	dc18      	bgt.n	8009258 <_dtoa_r+0x910>
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	b9b3      	cbnz	r3, 8009258 <_dtoa_r+0x910>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009230:	b9a3      	cbnz	r3, 800925c <_dtoa_r+0x914>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009238:	0d1b      	lsrs	r3, r3, #20
 800923a:	051b      	lsls	r3, r3, #20
 800923c:	b12b      	cbz	r3, 800924a <_dtoa_r+0x902>
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f108 0801 	add.w	r8, r8, #1
 8009248:	2301      	movs	r3, #1
 800924a:	9306      	str	r3, [sp, #24]
 800924c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f af74 	bne.w	800913c <_dtoa_r+0x7f4>
 8009254:	2001      	movs	r0, #1
 8009256:	e779      	b.n	800914c <_dtoa_r+0x804>
 8009258:	2300      	movs	r3, #0
 800925a:	e7f6      	b.n	800924a <_dtoa_r+0x902>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	e7f4      	b.n	800924a <_dtoa_r+0x902>
 8009260:	d085      	beq.n	800916e <_dtoa_r+0x826>
 8009262:	4618      	mov	r0, r3
 8009264:	301c      	adds	r0, #28
 8009266:	e77d      	b.n	8009164 <_dtoa_r+0x81c>
 8009268:	40240000 	.word	0x40240000
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	dc38      	bgt.n	80092e4 <_dtoa_r+0x99c>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	2b02      	cmp	r3, #2
 8009276:	dd35      	ble.n	80092e4 <_dtoa_r+0x99c>
 8009278:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	d10d      	bne.n	800929e <_dtoa_r+0x956>
 8009282:	4631      	mov	r1, r6
 8009284:	464b      	mov	r3, r9
 8009286:	2205      	movs	r2, #5
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fbe5 	bl	8009a58 <__multadd>
 800928e:	4601      	mov	r1, r0
 8009290:	4606      	mov	r6, r0
 8009292:	4658      	mov	r0, fp
 8009294:	f000 fdfc 	bl	8009e90 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	f73f adbd 	bgt.w	8008e18 <_dtoa_r+0x4d0>
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	9d00      	ldr	r5, [sp, #0]
 80092a2:	ea6f 0a03 	mvn.w	sl, r3
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	4631      	mov	r1, r6
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fbb1 	bl	8009a14 <_Bfree>
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	f43f aeb4 	beq.w	8009020 <_dtoa_r+0x6d8>
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	d005      	beq.n	80092ca <_dtoa_r+0x982>
 80092be:	45b8      	cmp	r8, r7
 80092c0:	d003      	beq.n	80092ca <_dtoa_r+0x982>
 80092c2:	4641      	mov	r1, r8
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 fba5 	bl	8009a14 <_Bfree>
 80092ca:	4639      	mov	r1, r7
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fba1 	bl	8009a14 <_Bfree>
 80092d2:	e6a5      	b.n	8009020 <_dtoa_r+0x6d8>
 80092d4:	2600      	movs	r6, #0
 80092d6:	4637      	mov	r7, r6
 80092d8:	e7e1      	b.n	800929e <_dtoa_r+0x956>
 80092da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80092dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80092e0:	4637      	mov	r7, r6
 80092e2:	e599      	b.n	8008e18 <_dtoa_r+0x4d0>
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80fd 	beq.w	80094ea <_dtoa_r+0xba2>
 80092f0:	2d00      	cmp	r5, #0
 80092f2:	dd05      	ble.n	8009300 <_dtoa_r+0x9b8>
 80092f4:	4639      	mov	r1, r7
 80092f6:	462a      	mov	r2, r5
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 fd5d 	bl	8009db8 <__lshift>
 80092fe:	4607      	mov	r7, r0
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05c      	beq.n	80093c0 <_dtoa_r+0xa78>
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fb43 	bl	8009994 <_Balloc>
 800930e:	4605      	mov	r5, r0
 8009310:	b928      	cbnz	r0, 800931e <_dtoa_r+0x9d6>
 8009312:	4b80      	ldr	r3, [pc, #512]	; (8009514 <_dtoa_r+0xbcc>)
 8009314:	4602      	mov	r2, r0
 8009316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800931a:	f7ff bb2e 	b.w	800897a <_dtoa_r+0x32>
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	3202      	adds	r2, #2
 8009322:	0092      	lsls	r2, r2, #2
 8009324:	f107 010c 	add.w	r1, r7, #12
 8009328:	300c      	adds	r0, #12
 800932a:	f000 fb25 	bl	8009978 <memcpy>
 800932e:	2201      	movs	r2, #1
 8009330:	4629      	mov	r1, r5
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fd40 	bl	8009db8 <__lshift>
 8009338:	9b00      	ldr	r3, [sp, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	444b      	add	r3, r9
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	9b02      	ldr	r3, [sp, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	46b8      	mov	r8, r7
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	4607      	mov	r7, r0
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	4631      	mov	r1, r6
 8009354:	3b01      	subs	r3, #1
 8009356:	4658      	mov	r0, fp
 8009358:	9302      	str	r3, [sp, #8]
 800935a:	f7ff fa67 	bl	800882c <quorem>
 800935e:	4603      	mov	r3, r0
 8009360:	3330      	adds	r3, #48	; 0x30
 8009362:	9004      	str	r0, [sp, #16]
 8009364:	4641      	mov	r1, r8
 8009366:	4658      	mov	r0, fp
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	f000 fd91 	bl	8009e90 <__mcmp>
 800936e:	463a      	mov	r2, r7
 8009370:	4681      	mov	r9, r0
 8009372:	4631      	mov	r1, r6
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fda7 	bl	8009ec8 <__mdiff>
 800937a:	68c2      	ldr	r2, [r0, #12]
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	4605      	mov	r5, r0
 8009380:	bb02      	cbnz	r2, 80093c4 <_dtoa_r+0xa7c>
 8009382:	4601      	mov	r1, r0
 8009384:	4658      	mov	r0, fp
 8009386:	f000 fd83 	bl	8009e90 <__mcmp>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	4602      	mov	r2, r0
 800938e:	4629      	mov	r1, r5
 8009390:	4620      	mov	r0, r4
 8009392:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009396:	f000 fb3d 	bl	8009a14 <_Bfree>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800939e:	9d01      	ldr	r5, [sp, #4]
 80093a0:	ea43 0102 	orr.w	r1, r3, r2
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	430b      	orrs	r3, r1
 80093a8:	9b08      	ldr	r3, [sp, #32]
 80093aa:	d10d      	bne.n	80093c8 <_dtoa_r+0xa80>
 80093ac:	2b39      	cmp	r3, #57	; 0x39
 80093ae:	d029      	beq.n	8009404 <_dtoa_r+0xabc>
 80093b0:	f1b9 0f00 	cmp.w	r9, #0
 80093b4:	dd01      	ble.n	80093ba <_dtoa_r+0xa72>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3331      	adds	r3, #49	; 0x31
 80093ba:	9a02      	ldr	r2, [sp, #8]
 80093bc:	7013      	strb	r3, [r2, #0]
 80093be:	e774      	b.n	80092aa <_dtoa_r+0x962>
 80093c0:	4638      	mov	r0, r7
 80093c2:	e7b9      	b.n	8009338 <_dtoa_r+0x9f0>
 80093c4:	2201      	movs	r2, #1
 80093c6:	e7e2      	b.n	800938e <_dtoa_r+0xa46>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	db06      	blt.n	80093dc <_dtoa_r+0xa94>
 80093ce:	9905      	ldr	r1, [sp, #20]
 80093d0:	ea41 0909 	orr.w	r9, r1, r9
 80093d4:	9906      	ldr	r1, [sp, #24]
 80093d6:	ea59 0101 	orrs.w	r1, r9, r1
 80093da:	d120      	bne.n	800941e <_dtoa_r+0xad6>
 80093dc:	2a00      	cmp	r2, #0
 80093de:	ddec      	ble.n	80093ba <_dtoa_r+0xa72>
 80093e0:	4659      	mov	r1, fp
 80093e2:	2201      	movs	r2, #1
 80093e4:	4620      	mov	r0, r4
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	f000 fce6 	bl	8009db8 <__lshift>
 80093ec:	4631      	mov	r1, r6
 80093ee:	4683      	mov	fp, r0
 80093f0:	f000 fd4e 	bl	8009e90 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	dc02      	bgt.n	8009400 <_dtoa_r+0xab8>
 80093fa:	d1de      	bne.n	80093ba <_dtoa_r+0xa72>
 80093fc:	07da      	lsls	r2, r3, #31
 80093fe:	d5dc      	bpl.n	80093ba <_dtoa_r+0xa72>
 8009400:	2b39      	cmp	r3, #57	; 0x39
 8009402:	d1d8      	bne.n	80093b6 <_dtoa_r+0xa6e>
 8009404:	9a02      	ldr	r2, [sp, #8]
 8009406:	2339      	movs	r3, #57	; 0x39
 8009408:	7013      	strb	r3, [r2, #0]
 800940a:	462b      	mov	r3, r5
 800940c:	461d      	mov	r5, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009414:	2a39      	cmp	r2, #57	; 0x39
 8009416:	d050      	beq.n	80094ba <_dtoa_r+0xb72>
 8009418:	3201      	adds	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e745      	b.n	80092aa <_dtoa_r+0x962>
 800941e:	2a00      	cmp	r2, #0
 8009420:	dd03      	ble.n	800942a <_dtoa_r+0xae2>
 8009422:	2b39      	cmp	r3, #57	; 0x39
 8009424:	d0ee      	beq.n	8009404 <_dtoa_r+0xabc>
 8009426:	3301      	adds	r3, #1
 8009428:	e7c7      	b.n	80093ba <_dtoa_r+0xa72>
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	9907      	ldr	r1, [sp, #28]
 800942e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009432:	428a      	cmp	r2, r1
 8009434:	d02a      	beq.n	800948c <_dtoa_r+0xb44>
 8009436:	4659      	mov	r1, fp
 8009438:	2300      	movs	r3, #0
 800943a:	220a      	movs	r2, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fb0b 	bl	8009a58 <__multadd>
 8009442:	45b8      	cmp	r8, r7
 8009444:	4683      	mov	fp, r0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	f04f 020a 	mov.w	r2, #10
 800944e:	4641      	mov	r1, r8
 8009450:	4620      	mov	r0, r4
 8009452:	d107      	bne.n	8009464 <_dtoa_r+0xb1c>
 8009454:	f000 fb00 	bl	8009a58 <__multadd>
 8009458:	4680      	mov	r8, r0
 800945a:	4607      	mov	r7, r0
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	3301      	adds	r3, #1
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	e775      	b.n	8009350 <_dtoa_r+0xa08>
 8009464:	f000 faf8 	bl	8009a58 <__multadd>
 8009468:	4639      	mov	r1, r7
 800946a:	4680      	mov	r8, r0
 800946c:	2300      	movs	r3, #0
 800946e:	220a      	movs	r2, #10
 8009470:	4620      	mov	r0, r4
 8009472:	f000 faf1 	bl	8009a58 <__multadd>
 8009476:	4607      	mov	r7, r0
 8009478:	e7f0      	b.n	800945c <_dtoa_r+0xb14>
 800947a:	f1b9 0f00 	cmp.w	r9, #0
 800947e:	9a00      	ldr	r2, [sp, #0]
 8009480:	bfcc      	ite	gt
 8009482:	464d      	movgt	r5, r9
 8009484:	2501      	movle	r5, #1
 8009486:	4415      	add	r5, r2
 8009488:	f04f 0800 	mov.w	r8, #0
 800948c:	4659      	mov	r1, fp
 800948e:	2201      	movs	r2, #1
 8009490:	4620      	mov	r0, r4
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f000 fc90 	bl	8009db8 <__lshift>
 8009498:	4631      	mov	r1, r6
 800949a:	4683      	mov	fp, r0
 800949c:	f000 fcf8 	bl	8009e90 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dcb2      	bgt.n	800940a <_dtoa_r+0xac2>
 80094a4:	d102      	bne.n	80094ac <_dtoa_r+0xb64>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	07db      	lsls	r3, r3, #31
 80094aa:	d4ae      	bmi.n	800940a <_dtoa_r+0xac2>
 80094ac:	462b      	mov	r3, r5
 80094ae:	461d      	mov	r5, r3
 80094b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094b4:	2a30      	cmp	r2, #48	; 0x30
 80094b6:	d0fa      	beq.n	80094ae <_dtoa_r+0xb66>
 80094b8:	e6f7      	b.n	80092aa <_dtoa_r+0x962>
 80094ba:	9a00      	ldr	r2, [sp, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d1a5      	bne.n	800940c <_dtoa_r+0xac4>
 80094c0:	f10a 0a01 	add.w	sl, sl, #1
 80094c4:	2331      	movs	r3, #49	; 0x31
 80094c6:	e779      	b.n	80093bc <_dtoa_r+0xa74>
 80094c8:	4b13      	ldr	r3, [pc, #76]	; (8009518 <_dtoa_r+0xbd0>)
 80094ca:	f7ff baaf 	b.w	8008a2c <_dtoa_r+0xe4>
 80094ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f47f aa86 	bne.w	80089e2 <_dtoa_r+0x9a>
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <_dtoa_r+0xbd4>)
 80094d8:	f7ff baa8 	b.w	8008a2c <_dtoa_r+0xe4>
 80094dc:	f1b9 0f00 	cmp.w	r9, #0
 80094e0:	dc03      	bgt.n	80094ea <_dtoa_r+0xba2>
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	f73f aec9 	bgt.w	800927c <_dtoa_r+0x934>
 80094ea:	9d00      	ldr	r5, [sp, #0]
 80094ec:	4631      	mov	r1, r6
 80094ee:	4658      	mov	r0, fp
 80094f0:	f7ff f99c 	bl	800882c <quorem>
 80094f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094f8:	f805 3b01 	strb.w	r3, [r5], #1
 80094fc:	9a00      	ldr	r2, [sp, #0]
 80094fe:	1aaa      	subs	r2, r5, r2
 8009500:	4591      	cmp	r9, r2
 8009502:	ddba      	ble.n	800947a <_dtoa_r+0xb32>
 8009504:	4659      	mov	r1, fp
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f000 faa4 	bl	8009a58 <__multadd>
 8009510:	4683      	mov	fp, r0
 8009512:	e7eb      	b.n	80094ec <_dtoa_r+0xba4>
 8009514:	0800d120 	.word	0x0800d120
 8009518:	0800cf78 	.word	0x0800cf78
 800951c:	0800d09d 	.word	0x0800d09d

08009520 <__sflush_r>:
 8009520:	898a      	ldrh	r2, [r1, #12]
 8009522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	4605      	mov	r5, r0
 8009528:	0710      	lsls	r0, r2, #28
 800952a:	460c      	mov	r4, r1
 800952c:	d458      	bmi.n	80095e0 <__sflush_r+0xc0>
 800952e:	684b      	ldr	r3, [r1, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dc05      	bgt.n	8009540 <__sflush_r+0x20>
 8009534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	dc02      	bgt.n	8009540 <__sflush_r+0x20>
 800953a:	2000      	movs	r0, #0
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009542:	2e00      	cmp	r6, #0
 8009544:	d0f9      	beq.n	800953a <__sflush_r+0x1a>
 8009546:	2300      	movs	r3, #0
 8009548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800954c:	682f      	ldr	r7, [r5, #0]
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	d032      	beq.n	80095b8 <__sflush_r+0x98>
 8009552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	075a      	lsls	r2, r3, #29
 8009558:	d505      	bpl.n	8009566 <__sflush_r+0x46>
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	1ac0      	subs	r0, r0, r3
 800955e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009560:	b10b      	cbz	r3, 8009566 <__sflush_r+0x46>
 8009562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009564:	1ac0      	subs	r0, r0, r3
 8009566:	2300      	movs	r3, #0
 8009568:	4602      	mov	r2, r0
 800956a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956c:	6a21      	ldr	r1, [r4, #32]
 800956e:	4628      	mov	r0, r5
 8009570:	47b0      	blx	r6
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	d106      	bne.n	8009586 <__sflush_r+0x66>
 8009578:	6829      	ldr	r1, [r5, #0]
 800957a:	291d      	cmp	r1, #29
 800957c:	d82c      	bhi.n	80095d8 <__sflush_r+0xb8>
 800957e:	4a2a      	ldr	r2, [pc, #168]	; (8009628 <__sflush_r+0x108>)
 8009580:	40ca      	lsrs	r2, r1
 8009582:	07d6      	lsls	r6, r2, #31
 8009584:	d528      	bpl.n	80095d8 <__sflush_r+0xb8>
 8009586:	2200      	movs	r2, #0
 8009588:	6062      	str	r2, [r4, #4]
 800958a:	04d9      	lsls	r1, r3, #19
 800958c:	6922      	ldr	r2, [r4, #16]
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	d504      	bpl.n	800959c <__sflush_r+0x7c>
 8009592:	1c42      	adds	r2, r0, #1
 8009594:	d101      	bne.n	800959a <__sflush_r+0x7a>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	b903      	cbnz	r3, 800959c <__sflush_r+0x7c>
 800959a:	6560      	str	r0, [r4, #84]	; 0x54
 800959c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959e:	602f      	str	r7, [r5, #0]
 80095a0:	2900      	cmp	r1, #0
 80095a2:	d0ca      	beq.n	800953a <__sflush_r+0x1a>
 80095a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d002      	beq.n	80095b2 <__sflush_r+0x92>
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 fd7f 	bl	800a0b0 <_free_r>
 80095b2:	2000      	movs	r0, #0
 80095b4:	6360      	str	r0, [r4, #52]	; 0x34
 80095b6:	e7c1      	b.n	800953c <__sflush_r+0x1c>
 80095b8:	6a21      	ldr	r1, [r4, #32]
 80095ba:	2301      	movs	r3, #1
 80095bc:	4628      	mov	r0, r5
 80095be:	47b0      	blx	r6
 80095c0:	1c41      	adds	r1, r0, #1
 80095c2:	d1c7      	bne.n	8009554 <__sflush_r+0x34>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c4      	beq.n	8009554 <__sflush_r+0x34>
 80095ca:	2b1d      	cmp	r3, #29
 80095cc:	d001      	beq.n	80095d2 <__sflush_r+0xb2>
 80095ce:	2b16      	cmp	r3, #22
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0xb6>
 80095d2:	602f      	str	r7, [r5, #0]
 80095d4:	e7b1      	b.n	800953a <__sflush_r+0x1a>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7ad      	b.n	800953c <__sflush_r+0x1c>
 80095e0:	690f      	ldr	r7, [r1, #16]
 80095e2:	2f00      	cmp	r7, #0
 80095e4:	d0a9      	beq.n	800953a <__sflush_r+0x1a>
 80095e6:	0793      	lsls	r3, r2, #30
 80095e8:	680e      	ldr	r6, [r1, #0]
 80095ea:	bf08      	it	eq
 80095ec:	694b      	ldreq	r3, [r1, #20]
 80095ee:	600f      	str	r7, [r1, #0]
 80095f0:	bf18      	it	ne
 80095f2:	2300      	movne	r3, #0
 80095f4:	eba6 0807 	sub.w	r8, r6, r7
 80095f8:	608b      	str	r3, [r1, #8]
 80095fa:	f1b8 0f00 	cmp.w	r8, #0
 80095fe:	dd9c      	ble.n	800953a <__sflush_r+0x1a>
 8009600:	6a21      	ldr	r1, [r4, #32]
 8009602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009604:	4643      	mov	r3, r8
 8009606:	463a      	mov	r2, r7
 8009608:	4628      	mov	r0, r5
 800960a:	47b0      	blx	r6
 800960c:	2800      	cmp	r0, #0
 800960e:	dc06      	bgt.n	800961e <__sflush_r+0xfe>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	e78e      	b.n	800953c <__sflush_r+0x1c>
 800961e:	4407      	add	r7, r0
 8009620:	eba8 0800 	sub.w	r8, r8, r0
 8009624:	e7e9      	b.n	80095fa <__sflush_r+0xda>
 8009626:	bf00      	nop
 8009628:	20400001 	.word	0x20400001

0800962c <_fflush_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	690b      	ldr	r3, [r1, #16]
 8009630:	4605      	mov	r5, r0
 8009632:	460c      	mov	r4, r1
 8009634:	b913      	cbnz	r3, 800963c <_fflush_r+0x10>
 8009636:	2500      	movs	r5, #0
 8009638:	4628      	mov	r0, r5
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	b118      	cbz	r0, 8009646 <_fflush_r+0x1a>
 800963e:	6983      	ldr	r3, [r0, #24]
 8009640:	b90b      	cbnz	r3, 8009646 <_fflush_r+0x1a>
 8009642:	f000 f887 	bl	8009754 <__sinit>
 8009646:	4b14      	ldr	r3, [pc, #80]	; (8009698 <_fflush_r+0x6c>)
 8009648:	429c      	cmp	r4, r3
 800964a:	d11b      	bne.n	8009684 <_fflush_r+0x58>
 800964c:	686c      	ldr	r4, [r5, #4]
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0ef      	beq.n	8009636 <_fflush_r+0xa>
 8009656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009658:	07d0      	lsls	r0, r2, #31
 800965a:	d404      	bmi.n	8009666 <_fflush_r+0x3a>
 800965c:	0599      	lsls	r1, r3, #22
 800965e:	d402      	bmi.n	8009666 <_fflush_r+0x3a>
 8009660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009662:	f000 f91a 	bl	800989a <__retarget_lock_acquire_recursive>
 8009666:	4628      	mov	r0, r5
 8009668:	4621      	mov	r1, r4
 800966a:	f7ff ff59 	bl	8009520 <__sflush_r>
 800966e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009670:	07da      	lsls	r2, r3, #31
 8009672:	4605      	mov	r5, r0
 8009674:	d4e0      	bmi.n	8009638 <_fflush_r+0xc>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	059b      	lsls	r3, r3, #22
 800967a:	d4dd      	bmi.n	8009638 <_fflush_r+0xc>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f000 f90d 	bl	800989c <__retarget_lock_release_recursive>
 8009682:	e7d9      	b.n	8009638 <_fflush_r+0xc>
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <_fflush_r+0x70>)
 8009686:	429c      	cmp	r4, r3
 8009688:	d101      	bne.n	800968e <_fflush_r+0x62>
 800968a:	68ac      	ldr	r4, [r5, #8]
 800968c:	e7df      	b.n	800964e <_fflush_r+0x22>
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <_fflush_r+0x74>)
 8009690:	429c      	cmp	r4, r3
 8009692:	bf08      	it	eq
 8009694:	68ec      	ldreq	r4, [r5, #12]
 8009696:	e7da      	b.n	800964e <_fflush_r+0x22>
 8009698:	0800d154 	.word	0x0800d154
 800969c:	0800d174 	.word	0x0800d174
 80096a0:	0800d134 	.word	0x0800d134

080096a4 <std>:
 80096a4:	2300      	movs	r3, #0
 80096a6:	b510      	push	{r4, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	e9c0 3300 	strd	r3, r3, [r0]
 80096ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096b2:	6083      	str	r3, [r0, #8]
 80096b4:	8181      	strh	r1, [r0, #12]
 80096b6:	6643      	str	r3, [r0, #100]	; 0x64
 80096b8:	81c2      	strh	r2, [r0, #14]
 80096ba:	6183      	str	r3, [r0, #24]
 80096bc:	4619      	mov	r1, r3
 80096be:	2208      	movs	r2, #8
 80096c0:	305c      	adds	r0, #92	; 0x5c
 80096c2:	f7fe fa35 	bl	8007b30 <memset>
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <std+0x38>)
 80096c8:	6263      	str	r3, [r4, #36]	; 0x24
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <std+0x3c>)
 80096cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x40>)
 80096d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x44>)
 80096d4:	6224      	str	r4, [r4, #32]
 80096d6:	6323      	str	r3, [r4, #48]	; 0x30
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	bf00      	nop
 80096dc:	0800a225 	.word	0x0800a225
 80096e0:	0800a247 	.word	0x0800a247
 80096e4:	0800a27f 	.word	0x0800a27f
 80096e8:	0800a2a3 	.word	0x0800a2a3

080096ec <_cleanup_r>:
 80096ec:	4901      	ldr	r1, [pc, #4]	; (80096f4 <_cleanup_r+0x8>)
 80096ee:	f000 b8af 	b.w	8009850 <_fwalk_reent>
 80096f2:	bf00      	nop
 80096f4:	0800962d 	.word	0x0800962d

080096f8 <__sfmoreglue>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	1e4a      	subs	r2, r1, #1
 80096fc:	2568      	movs	r5, #104	; 0x68
 80096fe:	4355      	muls	r5, r2
 8009700:	460e      	mov	r6, r1
 8009702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009706:	f000 fd23 	bl	800a150 <_malloc_r>
 800970a:	4604      	mov	r4, r0
 800970c:	b140      	cbz	r0, 8009720 <__sfmoreglue+0x28>
 800970e:	2100      	movs	r1, #0
 8009710:	e9c0 1600 	strd	r1, r6, [r0]
 8009714:	300c      	adds	r0, #12
 8009716:	60a0      	str	r0, [r4, #8]
 8009718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800971c:	f7fe fa08 	bl	8007b30 <memset>
 8009720:	4620      	mov	r0, r4
 8009722:	bd70      	pop	{r4, r5, r6, pc}

08009724 <__sfp_lock_acquire>:
 8009724:	4801      	ldr	r0, [pc, #4]	; (800972c <__sfp_lock_acquire+0x8>)
 8009726:	f000 b8b8 	b.w	800989a <__retarget_lock_acquire_recursive>
 800972a:	bf00      	nop
 800972c:	20000a40 	.word	0x20000a40

08009730 <__sfp_lock_release>:
 8009730:	4801      	ldr	r0, [pc, #4]	; (8009738 <__sfp_lock_release+0x8>)
 8009732:	f000 b8b3 	b.w	800989c <__retarget_lock_release_recursive>
 8009736:	bf00      	nop
 8009738:	20000a40 	.word	0x20000a40

0800973c <__sinit_lock_acquire>:
 800973c:	4801      	ldr	r0, [pc, #4]	; (8009744 <__sinit_lock_acquire+0x8>)
 800973e:	f000 b8ac 	b.w	800989a <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	20000a3b 	.word	0x20000a3b

08009748 <__sinit_lock_release>:
 8009748:	4801      	ldr	r0, [pc, #4]	; (8009750 <__sinit_lock_release+0x8>)
 800974a:	f000 b8a7 	b.w	800989c <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	20000a3b 	.word	0x20000a3b

08009754 <__sinit>:
 8009754:	b510      	push	{r4, lr}
 8009756:	4604      	mov	r4, r0
 8009758:	f7ff fff0 	bl	800973c <__sinit_lock_acquire>
 800975c:	69a3      	ldr	r3, [r4, #24]
 800975e:	b11b      	cbz	r3, 8009768 <__sinit+0x14>
 8009760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009764:	f7ff bff0 	b.w	8009748 <__sinit_lock_release>
 8009768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800976c:	6523      	str	r3, [r4, #80]	; 0x50
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <__sinit+0x68>)
 8009770:	4a13      	ldr	r2, [pc, #76]	; (80097c0 <__sinit+0x6c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	62a2      	str	r2, [r4, #40]	; 0x28
 8009776:	42a3      	cmp	r3, r4
 8009778:	bf04      	itt	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	61a3      	streq	r3, [r4, #24]
 800977e:	4620      	mov	r0, r4
 8009780:	f000 f820 	bl	80097c4 <__sfp>
 8009784:	6060      	str	r0, [r4, #4]
 8009786:	4620      	mov	r0, r4
 8009788:	f000 f81c 	bl	80097c4 <__sfp>
 800978c:	60a0      	str	r0, [r4, #8]
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f818 	bl	80097c4 <__sfp>
 8009794:	2200      	movs	r2, #0
 8009796:	60e0      	str	r0, [r4, #12]
 8009798:	2104      	movs	r1, #4
 800979a:	6860      	ldr	r0, [r4, #4]
 800979c:	f7ff ff82 	bl	80096a4 <std>
 80097a0:	68a0      	ldr	r0, [r4, #8]
 80097a2:	2201      	movs	r2, #1
 80097a4:	2109      	movs	r1, #9
 80097a6:	f7ff ff7d 	bl	80096a4 <std>
 80097aa:	68e0      	ldr	r0, [r4, #12]
 80097ac:	2202      	movs	r2, #2
 80097ae:	2112      	movs	r1, #18
 80097b0:	f7ff ff78 	bl	80096a4 <std>
 80097b4:	2301      	movs	r3, #1
 80097b6:	61a3      	str	r3, [r4, #24]
 80097b8:	e7d2      	b.n	8009760 <__sinit+0xc>
 80097ba:	bf00      	nop
 80097bc:	0800cf64 	.word	0x0800cf64
 80097c0:	080096ed 	.word	0x080096ed

080097c4 <__sfp>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	4607      	mov	r7, r0
 80097c8:	f7ff ffac 	bl	8009724 <__sfp_lock_acquire>
 80097cc:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <__sfp+0x84>)
 80097ce:	681e      	ldr	r6, [r3, #0]
 80097d0:	69b3      	ldr	r3, [r6, #24]
 80097d2:	b913      	cbnz	r3, 80097da <__sfp+0x16>
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff ffbd 	bl	8009754 <__sinit>
 80097da:	3648      	adds	r6, #72	; 0x48
 80097dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	d503      	bpl.n	80097ec <__sfp+0x28>
 80097e4:	6833      	ldr	r3, [r6, #0]
 80097e6:	b30b      	cbz	r3, 800982c <__sfp+0x68>
 80097e8:	6836      	ldr	r6, [r6, #0]
 80097ea:	e7f7      	b.n	80097dc <__sfp+0x18>
 80097ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097f0:	b9d5      	cbnz	r5, 8009828 <__sfp+0x64>
 80097f2:	4b16      	ldr	r3, [pc, #88]	; (800984c <__sfp+0x88>)
 80097f4:	60e3      	str	r3, [r4, #12]
 80097f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097fa:	6665      	str	r5, [r4, #100]	; 0x64
 80097fc:	f000 f84c 	bl	8009898 <__retarget_lock_init_recursive>
 8009800:	f7ff ff96 	bl	8009730 <__sfp_lock_release>
 8009804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800980c:	6025      	str	r5, [r4, #0]
 800980e:	61a5      	str	r5, [r4, #24]
 8009810:	2208      	movs	r2, #8
 8009812:	4629      	mov	r1, r5
 8009814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009818:	f7fe f98a 	bl	8007b30 <memset>
 800981c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009824:	4620      	mov	r0, r4
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009828:	3468      	adds	r4, #104	; 0x68
 800982a:	e7d9      	b.n	80097e0 <__sfp+0x1c>
 800982c:	2104      	movs	r1, #4
 800982e:	4638      	mov	r0, r7
 8009830:	f7ff ff62 	bl	80096f8 <__sfmoreglue>
 8009834:	4604      	mov	r4, r0
 8009836:	6030      	str	r0, [r6, #0]
 8009838:	2800      	cmp	r0, #0
 800983a:	d1d5      	bne.n	80097e8 <__sfp+0x24>
 800983c:	f7ff ff78 	bl	8009730 <__sfp_lock_release>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	e7ee      	b.n	8009824 <__sfp+0x60>
 8009846:	bf00      	nop
 8009848:	0800cf64 	.word	0x0800cf64
 800984c:	ffff0001 	.word	0xffff0001

08009850 <_fwalk_reent>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	4606      	mov	r6, r0
 8009856:	4688      	mov	r8, r1
 8009858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800985c:	2700      	movs	r7, #0
 800985e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009862:	f1b9 0901 	subs.w	r9, r9, #1
 8009866:	d505      	bpl.n	8009874 <_fwalk_reent+0x24>
 8009868:	6824      	ldr	r4, [r4, #0]
 800986a:	2c00      	cmp	r4, #0
 800986c:	d1f7      	bne.n	800985e <_fwalk_reent+0xe>
 800986e:	4638      	mov	r0, r7
 8009870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d907      	bls.n	800988a <_fwalk_reent+0x3a>
 800987a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800987e:	3301      	adds	r3, #1
 8009880:	d003      	beq.n	800988a <_fwalk_reent+0x3a>
 8009882:	4629      	mov	r1, r5
 8009884:	4630      	mov	r0, r6
 8009886:	47c0      	blx	r8
 8009888:	4307      	orrs	r7, r0
 800988a:	3568      	adds	r5, #104	; 0x68
 800988c:	e7e9      	b.n	8009862 <_fwalk_reent+0x12>
	...

08009890 <_localeconv_r>:
 8009890:	4800      	ldr	r0, [pc, #0]	; (8009894 <_localeconv_r+0x4>)
 8009892:	4770      	bx	lr
 8009894:	20000408 	.word	0x20000408

08009898 <__retarget_lock_init_recursive>:
 8009898:	4770      	bx	lr

0800989a <__retarget_lock_acquire_recursive>:
 800989a:	4770      	bx	lr

0800989c <__retarget_lock_release_recursive>:
 800989c:	4770      	bx	lr

0800989e <__swhatbuf_r>:
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	460e      	mov	r6, r1
 80098a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a6:	2900      	cmp	r1, #0
 80098a8:	b096      	sub	sp, #88	; 0x58
 80098aa:	4614      	mov	r4, r2
 80098ac:	461d      	mov	r5, r3
 80098ae:	da07      	bge.n	80098c0 <__swhatbuf_r+0x22>
 80098b0:	2300      	movs	r3, #0
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	89b3      	ldrh	r3, [r6, #12]
 80098b6:	061a      	lsls	r2, r3, #24
 80098b8:	d410      	bmi.n	80098dc <__swhatbuf_r+0x3e>
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	e00e      	b.n	80098de <__swhatbuf_r+0x40>
 80098c0:	466a      	mov	r2, sp
 80098c2:	f000 fd45 	bl	800a350 <_fstat_r>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	dbf2      	blt.n	80098b0 <__swhatbuf_r+0x12>
 80098ca:	9a01      	ldr	r2, [sp, #4]
 80098cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d4:	425a      	negs	r2, r3
 80098d6:	415a      	adcs	r2, r3
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	e7ee      	b.n	80098ba <__swhatbuf_r+0x1c>
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	2000      	movs	r0, #0
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	b016      	add	sp, #88	; 0x58
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080098e8 <__smakebuf_r>:
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098ec:	079d      	lsls	r5, r3, #30
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	d507      	bpl.n	8009904 <__smakebuf_r+0x1c>
 80098f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	2301      	movs	r3, #1
 80098fe:	6163      	str	r3, [r4, #20]
 8009900:	b002      	add	sp, #8
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	ab01      	add	r3, sp, #4
 8009906:	466a      	mov	r2, sp
 8009908:	f7ff ffc9 	bl	800989e <__swhatbuf_r>
 800990c:	9900      	ldr	r1, [sp, #0]
 800990e:	4605      	mov	r5, r0
 8009910:	4630      	mov	r0, r6
 8009912:	f000 fc1d 	bl	800a150 <_malloc_r>
 8009916:	b948      	cbnz	r0, 800992c <__smakebuf_r+0x44>
 8009918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991c:	059a      	lsls	r2, r3, #22
 800991e:	d4ef      	bmi.n	8009900 <__smakebuf_r+0x18>
 8009920:	f023 0303 	bic.w	r3, r3, #3
 8009924:	f043 0302 	orr.w	r3, r3, #2
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	e7e3      	b.n	80098f4 <__smakebuf_r+0xc>
 800992c:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <__smakebuf_r+0x7c>)
 800992e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	6020      	str	r0, [r4, #0]
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	6163      	str	r3, [r4, #20]
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	6120      	str	r0, [r4, #16]
 8009942:	b15b      	cbz	r3, 800995c <__smakebuf_r+0x74>
 8009944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009948:	4630      	mov	r0, r6
 800994a:	f000 fd13 	bl	800a374 <_isatty_r>
 800994e:	b128      	cbz	r0, 800995c <__smakebuf_r+0x74>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	89a0      	ldrh	r0, [r4, #12]
 800995e:	4305      	orrs	r5, r0
 8009960:	81a5      	strh	r5, [r4, #12]
 8009962:	e7cd      	b.n	8009900 <__smakebuf_r+0x18>
 8009964:	080096ed 	.word	0x080096ed

08009968 <malloc>:
 8009968:	4b02      	ldr	r3, [pc, #8]	; (8009974 <malloc+0xc>)
 800996a:	4601      	mov	r1, r0
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f000 bbef 	b.w	800a150 <_malloc_r>
 8009972:	bf00      	nop
 8009974:	200002b4 	.word	0x200002b4

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800998e:	4291      	cmp	r1, r2
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <_Balloc>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	b976      	cbnz	r6, 80099bc <_Balloc+0x28>
 800999e:	2010      	movs	r0, #16
 80099a0:	f7ff ffe2 	bl	8009968 <malloc>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6260      	str	r0, [r4, #36]	; 0x24
 80099a8:	b920      	cbnz	r0, 80099b4 <_Balloc+0x20>
 80099aa:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <_Balloc+0x78>)
 80099ac:	4818      	ldr	r0, [pc, #96]	; (8009a10 <_Balloc+0x7c>)
 80099ae:	2166      	movs	r1, #102	; 0x66
 80099b0:	f000 fc8e 	bl	800a2d0 <__assert_func>
 80099b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099b8:	6006      	str	r6, [r0, #0]
 80099ba:	60c6      	str	r6, [r0, #12]
 80099bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099be:	68f3      	ldr	r3, [r6, #12]
 80099c0:	b183      	cbz	r3, 80099e4 <_Balloc+0x50>
 80099c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ca:	b9b8      	cbnz	r0, 80099fc <_Balloc+0x68>
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f605 	lsl.w	r6, r1, r5
 80099d2:	1d72      	adds	r2, r6, #5
 80099d4:	0092      	lsls	r2, r2, #2
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 fb5a 	bl	800a090 <_calloc_r>
 80099dc:	b160      	cbz	r0, 80099f8 <_Balloc+0x64>
 80099de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e2:	e00e      	b.n	8009a02 <_Balloc+0x6e>
 80099e4:	2221      	movs	r2, #33	; 0x21
 80099e6:	2104      	movs	r1, #4
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fb51 	bl	800a090 <_calloc_r>
 80099ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f0:	60f0      	str	r0, [r6, #12]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e4      	bne.n	80099c2 <_Balloc+0x2e>
 80099f8:	2000      	movs	r0, #0
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	6802      	ldr	r2, [r0, #0]
 80099fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a02:	2300      	movs	r3, #0
 8009a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a08:	e7f7      	b.n	80099fa <_Balloc+0x66>
 8009a0a:	bf00      	nop
 8009a0c:	0800d0aa 	.word	0x0800d0aa
 8009a10:	0800d194 	.word	0x0800d194

08009a14 <_Bfree>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	b976      	cbnz	r6, 8009a3c <_Bfree+0x28>
 8009a1e:	2010      	movs	r0, #16
 8009a20:	f7ff ffa2 	bl	8009968 <malloc>
 8009a24:	4602      	mov	r2, r0
 8009a26:	6268      	str	r0, [r5, #36]	; 0x24
 8009a28:	b920      	cbnz	r0, 8009a34 <_Bfree+0x20>
 8009a2a:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <_Bfree+0x3c>)
 8009a2c:	4809      	ldr	r0, [pc, #36]	; (8009a54 <_Bfree+0x40>)
 8009a2e:	218a      	movs	r1, #138	; 0x8a
 8009a30:	f000 fc4e 	bl	800a2d0 <__assert_func>
 8009a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a38:	6006      	str	r6, [r0, #0]
 8009a3a:	60c6      	str	r6, [r0, #12]
 8009a3c:	b13c      	cbz	r4, 8009a4e <_Bfree+0x3a>
 8009a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a40:	6862      	ldr	r2, [r4, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a48:	6021      	str	r1, [r4, #0]
 8009a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	0800d0aa 	.word	0x0800d0aa
 8009a54:	0800d194 	.word	0x0800d194

08009a58 <__multadd>:
 8009a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	690e      	ldr	r6, [r1, #16]
 8009a5e:	4607      	mov	r7, r0
 8009a60:	4698      	mov	r8, r3
 8009a62:	460c      	mov	r4, r1
 8009a64:	f101 0014 	add.w	r0, r1, #20
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6805      	ldr	r5, [r0, #0]
 8009a6c:	b2a9      	uxth	r1, r5
 8009a6e:	fb02 8101 	mla	r1, r2, r1, r8
 8009a72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a76:	0c2d      	lsrs	r5, r5, #16
 8009a78:	fb02 c505 	mla	r5, r2, r5, ip
 8009a7c:	b289      	uxth	r1, r1
 8009a7e:	3301      	adds	r3, #1
 8009a80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009a84:	429e      	cmp	r6, r3
 8009a86:	f840 1b04 	str.w	r1, [r0], #4
 8009a8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009a8e:	dcec      	bgt.n	8009a6a <__multadd+0x12>
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	d022      	beq.n	8009adc <__multadd+0x84>
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	42b3      	cmp	r3, r6
 8009a9a:	dc19      	bgt.n	8009ad0 <__multadd+0x78>
 8009a9c:	6861      	ldr	r1, [r4, #4]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	3101      	adds	r1, #1
 8009aa2:	f7ff ff77 	bl	8009994 <_Balloc>
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b928      	cbnz	r0, 8009ab6 <__multadd+0x5e>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <__multadd+0x8c>)
 8009aae:	480e      	ldr	r0, [pc, #56]	; (8009ae8 <__multadd+0x90>)
 8009ab0:	21b5      	movs	r1, #181	; 0xb5
 8009ab2:	f000 fc0d 	bl	800a2d0 <__assert_func>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	3202      	adds	r2, #2
 8009aba:	f104 010c 	add.w	r1, r4, #12
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f7ff ff59 	bl	8009978 <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ffa3 	bl	8009a14 <_Bfree>
 8009ace:	462c      	mov	r4, r5
 8009ad0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	f8c3 8014 	str.w	r8, [r3, #20]
 8009ada:	6126      	str	r6, [r4, #16]
 8009adc:	4620      	mov	r0, r4
 8009ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800d120 	.word	0x0800d120
 8009ae8:	0800d194 	.word	0x0800d194

08009aec <__hi0bits>:
 8009aec:	0c03      	lsrs	r3, r0, #16
 8009aee:	041b      	lsls	r3, r3, #16
 8009af0:	b9d3      	cbnz	r3, 8009b28 <__hi0bits+0x3c>
 8009af2:	0400      	lsls	r0, r0, #16
 8009af4:	2310      	movs	r3, #16
 8009af6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009afa:	bf04      	itt	eq
 8009afc:	0200      	lsleq	r0, r0, #8
 8009afe:	3308      	addeq	r3, #8
 8009b00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b04:	bf04      	itt	eq
 8009b06:	0100      	lsleq	r0, r0, #4
 8009b08:	3304      	addeq	r3, #4
 8009b0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b0e:	bf04      	itt	eq
 8009b10:	0080      	lsleq	r0, r0, #2
 8009b12:	3302      	addeq	r3, #2
 8009b14:	2800      	cmp	r0, #0
 8009b16:	db05      	blt.n	8009b24 <__hi0bits+0x38>
 8009b18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b1c:	f103 0301 	add.w	r3, r3, #1
 8009b20:	bf08      	it	eq
 8009b22:	2320      	moveq	r3, #32
 8009b24:	4618      	mov	r0, r3
 8009b26:	4770      	bx	lr
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e7e4      	b.n	8009af6 <__hi0bits+0xa>

08009b2c <__lo0bits>:
 8009b2c:	6803      	ldr	r3, [r0, #0]
 8009b2e:	f013 0207 	ands.w	r2, r3, #7
 8009b32:	4601      	mov	r1, r0
 8009b34:	d00b      	beq.n	8009b4e <__lo0bits+0x22>
 8009b36:	07da      	lsls	r2, r3, #31
 8009b38:	d424      	bmi.n	8009b84 <__lo0bits+0x58>
 8009b3a:	0798      	lsls	r0, r3, #30
 8009b3c:	bf49      	itett	mi
 8009b3e:	085b      	lsrmi	r3, r3, #1
 8009b40:	089b      	lsrpl	r3, r3, #2
 8009b42:	2001      	movmi	r0, #1
 8009b44:	600b      	strmi	r3, [r1, #0]
 8009b46:	bf5c      	itt	pl
 8009b48:	600b      	strpl	r3, [r1, #0]
 8009b4a:	2002      	movpl	r0, #2
 8009b4c:	4770      	bx	lr
 8009b4e:	b298      	uxth	r0, r3
 8009b50:	b9b0      	cbnz	r0, 8009b80 <__lo0bits+0x54>
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	2010      	movs	r0, #16
 8009b56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b5a:	bf04      	itt	eq
 8009b5c:	0a1b      	lsreq	r3, r3, #8
 8009b5e:	3008      	addeq	r0, #8
 8009b60:	071a      	lsls	r2, r3, #28
 8009b62:	bf04      	itt	eq
 8009b64:	091b      	lsreq	r3, r3, #4
 8009b66:	3004      	addeq	r0, #4
 8009b68:	079a      	lsls	r2, r3, #30
 8009b6a:	bf04      	itt	eq
 8009b6c:	089b      	lsreq	r3, r3, #2
 8009b6e:	3002      	addeq	r0, #2
 8009b70:	07da      	lsls	r2, r3, #31
 8009b72:	d403      	bmi.n	8009b7c <__lo0bits+0x50>
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	f100 0001 	add.w	r0, r0, #1
 8009b7a:	d005      	beq.n	8009b88 <__lo0bits+0x5c>
 8009b7c:	600b      	str	r3, [r1, #0]
 8009b7e:	4770      	bx	lr
 8009b80:	4610      	mov	r0, r2
 8009b82:	e7e8      	b.n	8009b56 <__lo0bits+0x2a>
 8009b84:	2000      	movs	r0, #0
 8009b86:	4770      	bx	lr
 8009b88:	2020      	movs	r0, #32
 8009b8a:	4770      	bx	lr

08009b8c <__i2b>:
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	460c      	mov	r4, r1
 8009b90:	2101      	movs	r1, #1
 8009b92:	f7ff feff 	bl	8009994 <_Balloc>
 8009b96:	4602      	mov	r2, r0
 8009b98:	b928      	cbnz	r0, 8009ba6 <__i2b+0x1a>
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <__i2b+0x24>)
 8009b9c:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <__i2b+0x28>)
 8009b9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ba2:	f000 fb95 	bl	800a2d0 <__assert_func>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	6144      	str	r4, [r0, #20]
 8009baa:	6103      	str	r3, [r0, #16]
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	0800d120 	.word	0x0800d120
 8009bb4:	0800d194 	.word	0x0800d194

08009bb8 <__multiply>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	690a      	ldr	r2, [r1, #16]
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	bfb8      	it	lt
 8009bc6:	460b      	movlt	r3, r1
 8009bc8:	460d      	mov	r5, r1
 8009bca:	bfbc      	itt	lt
 8009bcc:	4625      	movlt	r5, r4
 8009bce:	461c      	movlt	r4, r3
 8009bd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009bd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bd8:	68ab      	ldr	r3, [r5, #8]
 8009bda:	6869      	ldr	r1, [r5, #4]
 8009bdc:	eb0a 0709 	add.w	r7, sl, r9
 8009be0:	42bb      	cmp	r3, r7
 8009be2:	b085      	sub	sp, #20
 8009be4:	bfb8      	it	lt
 8009be6:	3101      	addlt	r1, #1
 8009be8:	f7ff fed4 	bl	8009994 <_Balloc>
 8009bec:	b930      	cbnz	r0, 8009bfc <__multiply+0x44>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	4b42      	ldr	r3, [pc, #264]	; (8009cfc <__multiply+0x144>)
 8009bf2:	4843      	ldr	r0, [pc, #268]	; (8009d00 <__multiply+0x148>)
 8009bf4:	f240 115d 	movw	r1, #349	; 0x15d
 8009bf8:	f000 fb6a 	bl	800a2d0 <__assert_func>
 8009bfc:	f100 0614 	add.w	r6, r0, #20
 8009c00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c04:	4633      	mov	r3, r6
 8009c06:	2200      	movs	r2, #0
 8009c08:	4543      	cmp	r3, r8
 8009c0a:	d31e      	bcc.n	8009c4a <__multiply+0x92>
 8009c0c:	f105 0c14 	add.w	ip, r5, #20
 8009c10:	f104 0314 	add.w	r3, r4, #20
 8009c14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c1c:	9202      	str	r2, [sp, #8]
 8009c1e:	ebac 0205 	sub.w	r2, ip, r5
 8009c22:	3a15      	subs	r2, #21
 8009c24:	f022 0203 	bic.w	r2, r2, #3
 8009c28:	3204      	adds	r2, #4
 8009c2a:	f105 0115 	add.w	r1, r5, #21
 8009c2e:	458c      	cmp	ip, r1
 8009c30:	bf38      	it	cc
 8009c32:	2204      	movcc	r2, #4
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	9a02      	ldr	r2, [sp, #8]
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d808      	bhi.n	8009c50 <__multiply+0x98>
 8009c3e:	2f00      	cmp	r7, #0
 8009c40:	dc55      	bgt.n	8009cee <__multiply+0x136>
 8009c42:	6107      	str	r7, [r0, #16]
 8009c44:	b005      	add	sp, #20
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	f843 2b04 	str.w	r2, [r3], #4
 8009c4e:	e7db      	b.n	8009c08 <__multiply+0x50>
 8009c50:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c54:	f1ba 0f00 	cmp.w	sl, #0
 8009c58:	d020      	beq.n	8009c9c <__multiply+0xe4>
 8009c5a:	f105 0e14 	add.w	lr, r5, #20
 8009c5e:	46b1      	mov	r9, r6
 8009c60:	2200      	movs	r2, #0
 8009c62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c66:	f8d9 b000 	ldr.w	fp, [r9]
 8009c6a:	b2a1      	uxth	r1, r4
 8009c6c:	fa1f fb8b 	uxth.w	fp, fp
 8009c70:	fb0a b101 	mla	r1, sl, r1, fp
 8009c74:	4411      	add	r1, r2
 8009c76:	f8d9 2000 	ldr.w	r2, [r9]
 8009c7a:	0c24      	lsrs	r4, r4, #16
 8009c7c:	0c12      	lsrs	r2, r2, #16
 8009c7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c86:	b289      	uxth	r1, r1
 8009c88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c8c:	45f4      	cmp	ip, lr
 8009c8e:	f849 1b04 	str.w	r1, [r9], #4
 8009c92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c96:	d8e4      	bhi.n	8009c62 <__multiply+0xaa>
 8009c98:	9901      	ldr	r1, [sp, #4]
 8009c9a:	5072      	str	r2, [r6, r1]
 8009c9c:	9a03      	ldr	r2, [sp, #12]
 8009c9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	f1b9 0f00 	cmp.w	r9, #0
 8009ca8:	d01f      	beq.n	8009cea <__multiply+0x132>
 8009caa:	6834      	ldr	r4, [r6, #0]
 8009cac:	f105 0114 	add.w	r1, r5, #20
 8009cb0:	46b6      	mov	lr, r6
 8009cb2:	f04f 0a00 	mov.w	sl, #0
 8009cb6:	880a      	ldrh	r2, [r1, #0]
 8009cb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cbc:	fb09 b202 	mla	r2, r9, r2, fp
 8009cc0:	4492      	add	sl, r2
 8009cc2:	b2a4      	uxth	r4, r4
 8009cc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009cc8:	f84e 4b04 	str.w	r4, [lr], #4
 8009ccc:	f851 4b04 	ldr.w	r4, [r1], #4
 8009cd0:	f8be 2000 	ldrh.w	r2, [lr]
 8009cd4:	0c24      	lsrs	r4, r4, #16
 8009cd6:	fb09 2404 	mla	r4, r9, r4, r2
 8009cda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009cde:	458c      	cmp	ip, r1
 8009ce0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ce4:	d8e7      	bhi.n	8009cb6 <__multiply+0xfe>
 8009ce6:	9a01      	ldr	r2, [sp, #4]
 8009ce8:	50b4      	str	r4, [r6, r2]
 8009cea:	3604      	adds	r6, #4
 8009cec:	e7a3      	b.n	8009c36 <__multiply+0x7e>
 8009cee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1a5      	bne.n	8009c42 <__multiply+0x8a>
 8009cf6:	3f01      	subs	r7, #1
 8009cf8:	e7a1      	b.n	8009c3e <__multiply+0x86>
 8009cfa:	bf00      	nop
 8009cfc:	0800d120 	.word	0x0800d120
 8009d00:	0800d194 	.word	0x0800d194

08009d04 <__pow5mult>:
 8009d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	4615      	mov	r5, r2
 8009d0a:	f012 0203 	ands.w	r2, r2, #3
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460f      	mov	r7, r1
 8009d12:	d007      	beq.n	8009d24 <__pow5mult+0x20>
 8009d14:	4c25      	ldr	r4, [pc, #148]	; (8009dac <__pow5mult+0xa8>)
 8009d16:	3a01      	subs	r2, #1
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d1e:	f7ff fe9b 	bl	8009a58 <__multadd>
 8009d22:	4607      	mov	r7, r0
 8009d24:	10ad      	asrs	r5, r5, #2
 8009d26:	d03d      	beq.n	8009da4 <__pow5mult+0xa0>
 8009d28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d2a:	b97c      	cbnz	r4, 8009d4c <__pow5mult+0x48>
 8009d2c:	2010      	movs	r0, #16
 8009d2e:	f7ff fe1b 	bl	8009968 <malloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6270      	str	r0, [r6, #36]	; 0x24
 8009d36:	b928      	cbnz	r0, 8009d44 <__pow5mult+0x40>
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <__pow5mult+0xac>)
 8009d3a:	481e      	ldr	r0, [pc, #120]	; (8009db4 <__pow5mult+0xb0>)
 8009d3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d40:	f000 fac6 	bl	800a2d0 <__assert_func>
 8009d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d48:	6004      	str	r4, [r0, #0]
 8009d4a:	60c4      	str	r4, [r0, #12]
 8009d4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d54:	b94c      	cbnz	r4, 8009d6a <__pow5mult+0x66>
 8009d56:	f240 2171 	movw	r1, #625	; 0x271
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ff16 	bl	8009b8c <__i2b>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d66:	4604      	mov	r4, r0
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	f04f 0900 	mov.w	r9, #0
 8009d6e:	07eb      	lsls	r3, r5, #31
 8009d70:	d50a      	bpl.n	8009d88 <__pow5mult+0x84>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4622      	mov	r2, r4
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff1e 	bl	8009bb8 <__multiply>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fe47 	bl	8009a14 <_Bfree>
 8009d86:	4647      	mov	r7, r8
 8009d88:	106d      	asrs	r5, r5, #1
 8009d8a:	d00b      	beq.n	8009da4 <__pow5mult+0xa0>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	b938      	cbnz	r0, 8009da0 <__pow5mult+0x9c>
 8009d90:	4622      	mov	r2, r4
 8009d92:	4621      	mov	r1, r4
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff ff0f 	bl	8009bb8 <__multiply>
 8009d9a:	6020      	str	r0, [r4, #0]
 8009d9c:	f8c0 9000 	str.w	r9, [r0]
 8009da0:	4604      	mov	r4, r0
 8009da2:	e7e4      	b.n	8009d6e <__pow5mult+0x6a>
 8009da4:	4638      	mov	r0, r7
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	bf00      	nop
 8009dac:	0800d2e8 	.word	0x0800d2e8
 8009db0:	0800d0aa 	.word	0x0800d0aa
 8009db4:	0800d194 	.word	0x0800d194

08009db8 <__lshift>:
 8009db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	6849      	ldr	r1, [r1, #4]
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	4607      	mov	r7, r0
 8009dca:	4691      	mov	r9, r2
 8009dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dd0:	f108 0601 	add.w	r6, r8, #1
 8009dd4:	42b3      	cmp	r3, r6
 8009dd6:	db0b      	blt.n	8009df0 <__lshift+0x38>
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff fddb 	bl	8009994 <_Balloc>
 8009dde:	4605      	mov	r5, r0
 8009de0:	b948      	cbnz	r0, 8009df6 <__lshift+0x3e>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b28      	ldr	r3, [pc, #160]	; (8009e88 <__lshift+0xd0>)
 8009de6:	4829      	ldr	r0, [pc, #164]	; (8009e8c <__lshift+0xd4>)
 8009de8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009dec:	f000 fa70 	bl	800a2d0 <__assert_func>
 8009df0:	3101      	adds	r1, #1
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	e7ee      	b.n	8009dd4 <__lshift+0x1c>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f100 0114 	add.w	r1, r0, #20
 8009dfc:	f100 0210 	add.w	r2, r0, #16
 8009e00:	4618      	mov	r0, r3
 8009e02:	4553      	cmp	r3, sl
 8009e04:	db33      	blt.n	8009e6e <__lshift+0xb6>
 8009e06:	6920      	ldr	r0, [r4, #16]
 8009e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e0c:	f104 0314 	add.w	r3, r4, #20
 8009e10:	f019 091f 	ands.w	r9, r9, #31
 8009e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e1c:	d02b      	beq.n	8009e76 <__lshift+0xbe>
 8009e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e22:	468a      	mov	sl, r1
 8009e24:	2200      	movs	r2, #0
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	fa00 f009 	lsl.w	r0, r0, r9
 8009e2c:	4302      	orrs	r2, r0
 8009e2e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e36:	459c      	cmp	ip, r3
 8009e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e3c:	d8f3      	bhi.n	8009e26 <__lshift+0x6e>
 8009e3e:	ebac 0304 	sub.w	r3, ip, r4
 8009e42:	3b15      	subs	r3, #21
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	3304      	adds	r3, #4
 8009e4a:	f104 0015 	add.w	r0, r4, #21
 8009e4e:	4584      	cmp	ip, r0
 8009e50:	bf38      	it	cc
 8009e52:	2304      	movcc	r3, #4
 8009e54:	50ca      	str	r2, [r1, r3]
 8009e56:	b10a      	cbz	r2, 8009e5c <__lshift+0xa4>
 8009e58:	f108 0602 	add.w	r6, r8, #2
 8009e5c:	3e01      	subs	r6, #1
 8009e5e:	4638      	mov	r0, r7
 8009e60:	612e      	str	r6, [r5, #16]
 8009e62:	4621      	mov	r1, r4
 8009e64:	f7ff fdd6 	bl	8009a14 <_Bfree>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e72:	3301      	adds	r3, #1
 8009e74:	e7c5      	b.n	8009e02 <__lshift+0x4a>
 8009e76:	3904      	subs	r1, #4
 8009e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e80:	459c      	cmp	ip, r3
 8009e82:	d8f9      	bhi.n	8009e78 <__lshift+0xc0>
 8009e84:	e7ea      	b.n	8009e5c <__lshift+0xa4>
 8009e86:	bf00      	nop
 8009e88:	0800d120 	.word	0x0800d120
 8009e8c:	0800d194 	.word	0x0800d194

08009e90 <__mcmp>:
 8009e90:	b530      	push	{r4, r5, lr}
 8009e92:	6902      	ldr	r2, [r0, #16]
 8009e94:	690c      	ldr	r4, [r1, #16]
 8009e96:	1b12      	subs	r2, r2, r4
 8009e98:	d10e      	bne.n	8009eb8 <__mcmp+0x28>
 8009e9a:	f100 0314 	add.w	r3, r0, #20
 8009e9e:	3114      	adds	r1, #20
 8009ea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009eac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009eb0:	42a5      	cmp	r5, r4
 8009eb2:	d003      	beq.n	8009ebc <__mcmp+0x2c>
 8009eb4:	d305      	bcc.n	8009ec2 <__mcmp+0x32>
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	4610      	mov	r0, r2
 8009eba:	bd30      	pop	{r4, r5, pc}
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	d3f3      	bcc.n	8009ea8 <__mcmp+0x18>
 8009ec0:	e7fa      	b.n	8009eb8 <__mcmp+0x28>
 8009ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec6:	e7f7      	b.n	8009eb8 <__mcmp+0x28>

08009ec8 <__mdiff>:
 8009ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	460c      	mov	r4, r1
 8009ece:	4606      	mov	r6, r0
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4617      	mov	r7, r2
 8009ed6:	f7ff ffdb 	bl	8009e90 <__mcmp>
 8009eda:	1e05      	subs	r5, r0, #0
 8009edc:	d110      	bne.n	8009f00 <__mdiff+0x38>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff fd57 	bl	8009994 <_Balloc>
 8009ee6:	b930      	cbnz	r0, 8009ef6 <__mdiff+0x2e>
 8009ee8:	4b39      	ldr	r3, [pc, #228]	; (8009fd0 <__mdiff+0x108>)
 8009eea:	4602      	mov	r2, r0
 8009eec:	f240 2132 	movw	r1, #562	; 0x232
 8009ef0:	4838      	ldr	r0, [pc, #224]	; (8009fd4 <__mdiff+0x10c>)
 8009ef2:	f000 f9ed 	bl	800a2d0 <__assert_func>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	bfa4      	itt	ge
 8009f02:	463b      	movge	r3, r7
 8009f04:	4627      	movge	r7, r4
 8009f06:	4630      	mov	r0, r6
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	bfa6      	itte	ge
 8009f0c:	461c      	movge	r4, r3
 8009f0e:	2500      	movge	r5, #0
 8009f10:	2501      	movlt	r5, #1
 8009f12:	f7ff fd3f 	bl	8009994 <_Balloc>
 8009f16:	b920      	cbnz	r0, 8009f22 <__mdiff+0x5a>
 8009f18:	4b2d      	ldr	r3, [pc, #180]	; (8009fd0 <__mdiff+0x108>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f20:	e7e6      	b.n	8009ef0 <__mdiff+0x28>
 8009f22:	693e      	ldr	r6, [r7, #16]
 8009f24:	60c5      	str	r5, [r0, #12]
 8009f26:	6925      	ldr	r5, [r4, #16]
 8009f28:	f107 0114 	add.w	r1, r7, #20
 8009f2c:	f104 0914 	add.w	r9, r4, #20
 8009f30:	f100 0e14 	add.w	lr, r0, #20
 8009f34:	f107 0210 	add.w	r2, r7, #16
 8009f38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f40:	46f2      	mov	sl, lr
 8009f42:	2700      	movs	r7, #0
 8009f44:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f4c:	fa1f f883 	uxth.w	r8, r3
 8009f50:	fa17 f78b 	uxtah	r7, r7, fp
 8009f54:	0c1b      	lsrs	r3, r3, #16
 8009f56:	eba7 0808 	sub.w	r8, r7, r8
 8009f5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f62:	fa1f f888 	uxth.w	r8, r8
 8009f66:	141f      	asrs	r7, r3, #16
 8009f68:	454d      	cmp	r5, r9
 8009f6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f6e:	f84a 3b04 	str.w	r3, [sl], #4
 8009f72:	d8e7      	bhi.n	8009f44 <__mdiff+0x7c>
 8009f74:	1b2b      	subs	r3, r5, r4
 8009f76:	3b15      	subs	r3, #21
 8009f78:	f023 0303 	bic.w	r3, r3, #3
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	3415      	adds	r4, #21
 8009f80:	42a5      	cmp	r5, r4
 8009f82:	bf38      	it	cc
 8009f84:	2304      	movcc	r3, #4
 8009f86:	4419      	add	r1, r3
 8009f88:	4473      	add	r3, lr
 8009f8a:	469e      	mov	lr, r3
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	4565      	cmp	r5, ip
 8009f90:	d30e      	bcc.n	8009fb0 <__mdiff+0xe8>
 8009f92:	f10c 0203 	add.w	r2, ip, #3
 8009f96:	1a52      	subs	r2, r2, r1
 8009f98:	f022 0203 	bic.w	r2, r2, #3
 8009f9c:	3903      	subs	r1, #3
 8009f9e:	458c      	cmp	ip, r1
 8009fa0:	bf38      	it	cc
 8009fa2:	2200      	movcc	r2, #0
 8009fa4:	441a      	add	r2, r3
 8009fa6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009faa:	b17b      	cbz	r3, 8009fcc <__mdiff+0x104>
 8009fac:	6106      	str	r6, [r0, #16]
 8009fae:	e7a5      	b.n	8009efc <__mdiff+0x34>
 8009fb0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009fb4:	fa17 f488 	uxtah	r4, r7, r8
 8009fb8:	1422      	asrs	r2, r4, #16
 8009fba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009fbe:	b2a4      	uxth	r4, r4
 8009fc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009fc4:	f84e 4b04 	str.w	r4, [lr], #4
 8009fc8:	1417      	asrs	r7, r2, #16
 8009fca:	e7e0      	b.n	8009f8e <__mdiff+0xc6>
 8009fcc:	3e01      	subs	r6, #1
 8009fce:	e7ea      	b.n	8009fa6 <__mdiff+0xde>
 8009fd0:	0800d120 	.word	0x0800d120
 8009fd4:	0800d194 	.word	0x0800d194

08009fd8 <__d2b>:
 8009fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4689      	mov	r9, r1
 8009fde:	2101      	movs	r1, #1
 8009fe0:	ec57 6b10 	vmov	r6, r7, d0
 8009fe4:	4690      	mov	r8, r2
 8009fe6:	f7ff fcd5 	bl	8009994 <_Balloc>
 8009fea:	4604      	mov	r4, r0
 8009fec:	b930      	cbnz	r0, 8009ffc <__d2b+0x24>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b25      	ldr	r3, [pc, #148]	; (800a088 <__d2b+0xb0>)
 8009ff2:	4826      	ldr	r0, [pc, #152]	; (800a08c <__d2b+0xb4>)
 8009ff4:	f240 310a 	movw	r1, #778	; 0x30a
 8009ff8:	f000 f96a 	bl	800a2d0 <__assert_func>
 8009ffc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a004:	bb35      	cbnz	r5, 800a054 <__d2b+0x7c>
 800a006:	2e00      	cmp	r6, #0
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	d028      	beq.n	800a05e <__d2b+0x86>
 800a00c:	4668      	mov	r0, sp
 800a00e:	9600      	str	r6, [sp, #0]
 800a010:	f7ff fd8c 	bl	8009b2c <__lo0bits>
 800a014:	9900      	ldr	r1, [sp, #0]
 800a016:	b300      	cbz	r0, 800a05a <__d2b+0x82>
 800a018:	9a01      	ldr	r2, [sp, #4]
 800a01a:	f1c0 0320 	rsb	r3, r0, #32
 800a01e:	fa02 f303 	lsl.w	r3, r2, r3
 800a022:	430b      	orrs	r3, r1
 800a024:	40c2      	lsrs	r2, r0
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	9201      	str	r2, [sp, #4]
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	61a3      	str	r3, [r4, #24]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bf14      	ite	ne
 800a032:	2202      	movne	r2, #2
 800a034:	2201      	moveq	r2, #1
 800a036:	6122      	str	r2, [r4, #16]
 800a038:	b1d5      	cbz	r5, 800a070 <__d2b+0x98>
 800a03a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a03e:	4405      	add	r5, r0
 800a040:	f8c9 5000 	str.w	r5, [r9]
 800a044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a048:	f8c8 0000 	str.w	r0, [r8]
 800a04c:	4620      	mov	r0, r4
 800a04e:	b003      	add	sp, #12
 800a050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a058:	e7d5      	b.n	800a006 <__d2b+0x2e>
 800a05a:	6161      	str	r1, [r4, #20]
 800a05c:	e7e5      	b.n	800a02a <__d2b+0x52>
 800a05e:	a801      	add	r0, sp, #4
 800a060:	f7ff fd64 	bl	8009b2c <__lo0bits>
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	6163      	str	r3, [r4, #20]
 800a068:	2201      	movs	r2, #1
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	3020      	adds	r0, #32
 800a06e:	e7e3      	b.n	800a038 <__d2b+0x60>
 800a070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a078:	f8c9 0000 	str.w	r0, [r9]
 800a07c:	6918      	ldr	r0, [r3, #16]
 800a07e:	f7ff fd35 	bl	8009aec <__hi0bits>
 800a082:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a086:	e7df      	b.n	800a048 <__d2b+0x70>
 800a088:	0800d120 	.word	0x0800d120
 800a08c:	0800d194 	.word	0x0800d194

0800a090 <_calloc_r>:
 800a090:	b513      	push	{r0, r1, r4, lr}
 800a092:	434a      	muls	r2, r1
 800a094:	4611      	mov	r1, r2
 800a096:	9201      	str	r2, [sp, #4]
 800a098:	f000 f85a 	bl	800a150 <_malloc_r>
 800a09c:	4604      	mov	r4, r0
 800a09e:	b118      	cbz	r0, 800a0a8 <_calloc_r+0x18>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	f7fd fd44 	bl	8007b30 <memset>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	b002      	add	sp, #8
 800a0ac:	bd10      	pop	{r4, pc}
	...

0800a0b0 <_free_r>:
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	d048      	beq.n	800a148 <_free_r+0x98>
 800a0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c2:	bfb8      	it	lt
 800a0c4:	18e4      	addlt	r4, r4, r3
 800a0c6:	f000 f989 	bl	800a3dc <__malloc_lock>
 800a0ca:	4a20      	ldr	r2, [pc, #128]	; (800a14c <_free_r+0x9c>)
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	b933      	cbnz	r3, 800a0e2 <_free_r+0x32>
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	6014      	str	r4, [r2, #0]
 800a0d8:	b003      	add	sp, #12
 800a0da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0de:	f000 b983 	b.w	800a3e8 <__malloc_unlock>
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	d90b      	bls.n	800a0fe <_free_r+0x4e>
 800a0e6:	6821      	ldr	r1, [r4, #0]
 800a0e8:	1862      	adds	r2, r4, r1
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bf04      	itt	eq
 800a0ee:	681a      	ldreq	r2, [r3, #0]
 800a0f0:	685b      	ldreq	r3, [r3, #4]
 800a0f2:	6063      	str	r3, [r4, #4]
 800a0f4:	bf04      	itt	eq
 800a0f6:	1852      	addeq	r2, r2, r1
 800a0f8:	6022      	streq	r2, [r4, #0]
 800a0fa:	602c      	str	r4, [r5, #0]
 800a0fc:	e7ec      	b.n	800a0d8 <_free_r+0x28>
 800a0fe:	461a      	mov	r2, r3
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	b10b      	cbz	r3, 800a108 <_free_r+0x58>
 800a104:	42a3      	cmp	r3, r4
 800a106:	d9fa      	bls.n	800a0fe <_free_r+0x4e>
 800a108:	6811      	ldr	r1, [r2, #0]
 800a10a:	1855      	adds	r5, r2, r1
 800a10c:	42a5      	cmp	r5, r4
 800a10e:	d10b      	bne.n	800a128 <_free_r+0x78>
 800a110:	6824      	ldr	r4, [r4, #0]
 800a112:	4421      	add	r1, r4
 800a114:	1854      	adds	r4, r2, r1
 800a116:	42a3      	cmp	r3, r4
 800a118:	6011      	str	r1, [r2, #0]
 800a11a:	d1dd      	bne.n	800a0d8 <_free_r+0x28>
 800a11c:	681c      	ldr	r4, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	6053      	str	r3, [r2, #4]
 800a122:	4421      	add	r1, r4
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	e7d7      	b.n	800a0d8 <_free_r+0x28>
 800a128:	d902      	bls.n	800a130 <_free_r+0x80>
 800a12a:	230c      	movs	r3, #12
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	e7d3      	b.n	800a0d8 <_free_r+0x28>
 800a130:	6825      	ldr	r5, [r4, #0]
 800a132:	1961      	adds	r1, r4, r5
 800a134:	428b      	cmp	r3, r1
 800a136:	bf04      	itt	eq
 800a138:	6819      	ldreq	r1, [r3, #0]
 800a13a:	685b      	ldreq	r3, [r3, #4]
 800a13c:	6063      	str	r3, [r4, #4]
 800a13e:	bf04      	itt	eq
 800a140:	1949      	addeq	r1, r1, r5
 800a142:	6021      	streq	r1, [r4, #0]
 800a144:	6054      	str	r4, [r2, #4]
 800a146:	e7c7      	b.n	800a0d8 <_free_r+0x28>
 800a148:	b003      	add	sp, #12
 800a14a:	bd30      	pop	{r4, r5, pc}
 800a14c:	2000050c 	.word	0x2000050c

0800a150 <_malloc_r>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	1ccd      	adds	r5, r1, #3
 800a154:	f025 0503 	bic.w	r5, r5, #3
 800a158:	3508      	adds	r5, #8
 800a15a:	2d0c      	cmp	r5, #12
 800a15c:	bf38      	it	cc
 800a15e:	250c      	movcc	r5, #12
 800a160:	2d00      	cmp	r5, #0
 800a162:	4606      	mov	r6, r0
 800a164:	db01      	blt.n	800a16a <_malloc_r+0x1a>
 800a166:	42a9      	cmp	r1, r5
 800a168:	d903      	bls.n	800a172 <_malloc_r+0x22>
 800a16a:	230c      	movs	r3, #12
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	2000      	movs	r0, #0
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a172:	f000 f933 	bl	800a3dc <__malloc_lock>
 800a176:	4921      	ldr	r1, [pc, #132]	; (800a1fc <_malloc_r+0xac>)
 800a178:	680a      	ldr	r2, [r1, #0]
 800a17a:	4614      	mov	r4, r2
 800a17c:	b99c      	cbnz	r4, 800a1a6 <_malloc_r+0x56>
 800a17e:	4f20      	ldr	r7, [pc, #128]	; (800a200 <_malloc_r+0xb0>)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	b923      	cbnz	r3, 800a18e <_malloc_r+0x3e>
 800a184:	4621      	mov	r1, r4
 800a186:	4630      	mov	r0, r6
 800a188:	f000 f83c 	bl	800a204 <_sbrk_r>
 800a18c:	6038      	str	r0, [r7, #0]
 800a18e:	4629      	mov	r1, r5
 800a190:	4630      	mov	r0, r6
 800a192:	f000 f837 	bl	800a204 <_sbrk_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d123      	bne.n	800a1e2 <_malloc_r+0x92>
 800a19a:	230c      	movs	r3, #12
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f000 f922 	bl	800a3e8 <__malloc_unlock>
 800a1a4:	e7e3      	b.n	800a16e <_malloc_r+0x1e>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	1b5b      	subs	r3, r3, r5
 800a1aa:	d417      	bmi.n	800a1dc <_malloc_r+0x8c>
 800a1ac:	2b0b      	cmp	r3, #11
 800a1ae:	d903      	bls.n	800a1b8 <_malloc_r+0x68>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	441c      	add	r4, r3
 800a1b4:	6025      	str	r5, [r4, #0]
 800a1b6:	e004      	b.n	800a1c2 <_malloc_r+0x72>
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	42a2      	cmp	r2, r4
 800a1bc:	bf0c      	ite	eq
 800a1be:	600b      	streq	r3, [r1, #0]
 800a1c0:	6053      	strne	r3, [r2, #4]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f000 f910 	bl	800a3e8 <__malloc_unlock>
 800a1c8:	f104 000b 	add.w	r0, r4, #11
 800a1cc:	1d23      	adds	r3, r4, #4
 800a1ce:	f020 0007 	bic.w	r0, r0, #7
 800a1d2:	1ac2      	subs	r2, r0, r3
 800a1d4:	d0cc      	beq.n	800a170 <_malloc_r+0x20>
 800a1d6:	1a1b      	subs	r3, r3, r0
 800a1d8:	50a3      	str	r3, [r4, r2]
 800a1da:	e7c9      	b.n	800a170 <_malloc_r+0x20>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	6864      	ldr	r4, [r4, #4]
 800a1e0:	e7cc      	b.n	800a17c <_malloc_r+0x2c>
 800a1e2:	1cc4      	adds	r4, r0, #3
 800a1e4:	f024 0403 	bic.w	r4, r4, #3
 800a1e8:	42a0      	cmp	r0, r4
 800a1ea:	d0e3      	beq.n	800a1b4 <_malloc_r+0x64>
 800a1ec:	1a21      	subs	r1, r4, r0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f000 f808 	bl	800a204 <_sbrk_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d1dd      	bne.n	800a1b4 <_malloc_r+0x64>
 800a1f8:	e7cf      	b.n	800a19a <_malloc_r+0x4a>
 800a1fa:	bf00      	nop
 800a1fc:	2000050c 	.word	0x2000050c
 800a200:	20000510 	.word	0x20000510

0800a204 <_sbrk_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_sbrk_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f8 ff62 	bl	80030d8 <_sbrk>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_sbrk_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_sbrk_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20000a44 	.word	0x20000a44

0800a224 <__sread>:
 800a224:	b510      	push	{r4, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	f000 fa3c 	bl	800a6a8 <_read_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	bfab      	itete	ge
 800a234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a236:	89a3      	ldrhlt	r3, [r4, #12]
 800a238:	181b      	addge	r3, r3, r0
 800a23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a23e:	bfac      	ite	ge
 800a240:	6563      	strge	r3, [r4, #84]	; 0x54
 800a242:	81a3      	strhlt	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__swrite>:
 800a246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	461f      	mov	r7, r3
 800a24c:	898b      	ldrh	r3, [r1, #12]
 800a24e:	05db      	lsls	r3, r3, #23
 800a250:	4605      	mov	r5, r0
 800a252:	460c      	mov	r4, r1
 800a254:	4616      	mov	r6, r2
 800a256:	d505      	bpl.n	800a264 <__swrite+0x1e>
 800a258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25c:	2302      	movs	r3, #2
 800a25e:	2200      	movs	r2, #0
 800a260:	f000 f898 	bl	800a394 <_lseek_r>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	4632      	mov	r2, r6
 800a272:	463b      	mov	r3, r7
 800a274:	4628      	mov	r0, r5
 800a276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	f000 b817 	b.w	800a2ac <_write_r>

0800a27e <__sseek>:
 800a27e:	b510      	push	{r4, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a286:	f000 f885 	bl	800a394 <_lseek_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	bf15      	itete	ne
 800a290:	6560      	strne	r0, [r4, #84]	; 0x54
 800a292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a29a:	81a3      	strheq	r3, [r4, #12]
 800a29c:	bf18      	it	ne
 800a29e:	81a3      	strhne	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__sclose>:
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 b831 	b.w	800a30c <_close_r>
	...

0800a2ac <_write_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d07      	ldr	r5, [pc, #28]	; (800a2cc <_write_r+0x20>)
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	602a      	str	r2, [r5, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f7f8 fde2 	bl	8002e84 <_write>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_write_r+0x1e>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_write_r+0x1e>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20000a44 	.word	0x20000a44

0800a2d0 <__assert_func>:
 800a2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2d2:	4614      	mov	r4, r2
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <__assert_func+0x2c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4605      	mov	r5, r0
 800a2dc:	68d8      	ldr	r0, [r3, #12]
 800a2de:	b14c      	cbz	r4, 800a2f4 <__assert_func+0x24>
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <__assert_func+0x30>)
 800a2e2:	9100      	str	r1, [sp, #0]
 800a2e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e8:	4906      	ldr	r1, [pc, #24]	; (800a304 <__assert_func+0x34>)
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f000 f81e 	bl	800a32c <fiprintf>
 800a2f0:	f000 f9f9 	bl	800a6e6 <abort>
 800a2f4:	4b04      	ldr	r3, [pc, #16]	; (800a308 <__assert_func+0x38>)
 800a2f6:	461c      	mov	r4, r3
 800a2f8:	e7f3      	b.n	800a2e2 <__assert_func+0x12>
 800a2fa:	bf00      	nop
 800a2fc:	200002b4 	.word	0x200002b4
 800a300:	0800d2f4 	.word	0x0800d2f4
 800a304:	0800d301 	.word	0x0800d301
 800a308:	0800d32f 	.word	0x0800d32f

0800a30c <_close_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	; (800a328 <_close_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f8 fde0 	bl	8002edc <_close>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_close_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_close_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000a44 	.word	0x20000a44

0800a32c <fiprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b503      	push	{r0, r1, lr}
 800a330:	4601      	mov	r1, r0
 800a332:	ab03      	add	r3, sp, #12
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <fiprintf+0x20>)
 800a336:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33a:	6800      	ldr	r0, [r0, #0]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f000 f883 	bl	800a448 <_vfiprintf_r>
 800a342:	b002      	add	sp, #8
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	200002b4 	.word	0x200002b4

0800a350 <_fstat_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_fstat_r+0x20>)
 800a354:	2300      	movs	r3, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f7f8 fe0d 	bl	8002f7c <_fstat>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d102      	bne.n	800a36c <_fstat_r+0x1c>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	b103      	cbz	r3, 800a36c <_fstat_r+0x1c>
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	bf00      	nop
 800a370:	20000a44 	.word	0x20000a44

0800a374 <_isatty_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d06      	ldr	r5, [pc, #24]	; (800a390 <_isatty_r+0x1c>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	602b      	str	r3, [r5, #0]
 800a380:	f7f8 fd6a 	bl	8002e58 <_isatty>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_isatty_r+0x1a>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_isatty_r+0x1a>
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	20000a44 	.word	0x20000a44

0800a394 <_lseek_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4d07      	ldr	r5, [pc, #28]	; (800a3b4 <_lseek_r+0x20>)
 800a398:	4604      	mov	r4, r0
 800a39a:	4608      	mov	r0, r1
 800a39c:	4611      	mov	r1, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	602a      	str	r2, [r5, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f7f8 fdb1 	bl	8002f0a <_lseek>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_lseek_r+0x1e>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_lseek_r+0x1e>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20000a44 	.word	0x20000a44

0800a3b8 <__ascii_mbtowc>:
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	b901      	cbnz	r1, 800a3be <__ascii_mbtowc+0x6>
 800a3bc:	a901      	add	r1, sp, #4
 800a3be:	b142      	cbz	r2, 800a3d2 <__ascii_mbtowc+0x1a>
 800a3c0:	b14b      	cbz	r3, 800a3d6 <__ascii_mbtowc+0x1e>
 800a3c2:	7813      	ldrb	r3, [r2, #0]
 800a3c4:	600b      	str	r3, [r1, #0]
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	1e10      	subs	r0, r2, #0
 800a3ca:	bf18      	it	ne
 800a3cc:	2001      	movne	r0, #1
 800a3ce:	b002      	add	sp, #8
 800a3d0:	4770      	bx	lr
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	e7fb      	b.n	800a3ce <__ascii_mbtowc+0x16>
 800a3d6:	f06f 0001 	mvn.w	r0, #1
 800a3da:	e7f8      	b.n	800a3ce <__ascii_mbtowc+0x16>

0800a3dc <__malloc_lock>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	; (800a3e4 <__malloc_lock+0x8>)
 800a3de:	f7ff ba5c 	b.w	800989a <__retarget_lock_acquire_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	20000a3c 	.word	0x20000a3c

0800a3e8 <__malloc_unlock>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__malloc_unlock+0x8>)
 800a3ea:	f7ff ba57 	b.w	800989c <__retarget_lock_release_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	20000a3c 	.word	0x20000a3c

0800a3f4 <__sfputc_r>:
 800a3f4:	6893      	ldr	r3, [r2, #8]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	b410      	push	{r4}
 800a3fc:	6093      	str	r3, [r2, #8]
 800a3fe:	da08      	bge.n	800a412 <__sfputc_r+0x1e>
 800a400:	6994      	ldr	r4, [r2, #24]
 800a402:	42a3      	cmp	r3, r4
 800a404:	db01      	blt.n	800a40a <__sfputc_r+0x16>
 800a406:	290a      	cmp	r1, #10
 800a408:	d103      	bne.n	800a412 <__sfputc_r+0x1e>
 800a40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a40e:	f7fe b94d 	b.w	80086ac <__swbuf_r>
 800a412:	6813      	ldr	r3, [r2, #0]
 800a414:	1c58      	adds	r0, r3, #1
 800a416:	6010      	str	r0, [r2, #0]
 800a418:	7019      	strb	r1, [r3, #0]
 800a41a:	4608      	mov	r0, r1
 800a41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <__sfputs_r>:
 800a422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a424:	4606      	mov	r6, r0
 800a426:	460f      	mov	r7, r1
 800a428:	4614      	mov	r4, r2
 800a42a:	18d5      	adds	r5, r2, r3
 800a42c:	42ac      	cmp	r4, r5
 800a42e:	d101      	bne.n	800a434 <__sfputs_r+0x12>
 800a430:	2000      	movs	r0, #0
 800a432:	e007      	b.n	800a444 <__sfputs_r+0x22>
 800a434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a438:	463a      	mov	r2, r7
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff ffda 	bl	800a3f4 <__sfputc_r>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d1f3      	bne.n	800a42c <__sfputs_r+0xa>
 800a444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a448 <_vfiprintf_r>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	460d      	mov	r5, r1
 800a44e:	b09d      	sub	sp, #116	; 0x74
 800a450:	4614      	mov	r4, r2
 800a452:	4698      	mov	r8, r3
 800a454:	4606      	mov	r6, r0
 800a456:	b118      	cbz	r0, 800a460 <_vfiprintf_r+0x18>
 800a458:	6983      	ldr	r3, [r0, #24]
 800a45a:	b90b      	cbnz	r3, 800a460 <_vfiprintf_r+0x18>
 800a45c:	f7ff f97a 	bl	8009754 <__sinit>
 800a460:	4b89      	ldr	r3, [pc, #548]	; (800a688 <_vfiprintf_r+0x240>)
 800a462:	429d      	cmp	r5, r3
 800a464:	d11b      	bne.n	800a49e <_vfiprintf_r+0x56>
 800a466:	6875      	ldr	r5, [r6, #4]
 800a468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a46a:	07d9      	lsls	r1, r3, #31
 800a46c:	d405      	bmi.n	800a47a <_vfiprintf_r+0x32>
 800a46e:	89ab      	ldrh	r3, [r5, #12]
 800a470:	059a      	lsls	r2, r3, #22
 800a472:	d402      	bmi.n	800a47a <_vfiprintf_r+0x32>
 800a474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a476:	f7ff fa10 	bl	800989a <__retarget_lock_acquire_recursive>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	071b      	lsls	r3, r3, #28
 800a47e:	d501      	bpl.n	800a484 <_vfiprintf_r+0x3c>
 800a480:	692b      	ldr	r3, [r5, #16]
 800a482:	b9eb      	cbnz	r3, 800a4c0 <_vfiprintf_r+0x78>
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7fe f962 	bl	8008750 <__swsetup_r>
 800a48c:	b1c0      	cbz	r0, 800a4c0 <_vfiprintf_r+0x78>
 800a48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a490:	07dc      	lsls	r4, r3, #31
 800a492:	d50e      	bpl.n	800a4b2 <_vfiprintf_r+0x6a>
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	b01d      	add	sp, #116	; 0x74
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	4b7b      	ldr	r3, [pc, #492]	; (800a68c <_vfiprintf_r+0x244>)
 800a4a0:	429d      	cmp	r5, r3
 800a4a2:	d101      	bne.n	800a4a8 <_vfiprintf_r+0x60>
 800a4a4:	68b5      	ldr	r5, [r6, #8]
 800a4a6:	e7df      	b.n	800a468 <_vfiprintf_r+0x20>
 800a4a8:	4b79      	ldr	r3, [pc, #484]	; (800a690 <_vfiprintf_r+0x248>)
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	bf08      	it	eq
 800a4ae:	68f5      	ldreq	r5, [r6, #12]
 800a4b0:	e7da      	b.n	800a468 <_vfiprintf_r+0x20>
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	0598      	lsls	r0, r3, #22
 800a4b6:	d4ed      	bmi.n	800a494 <_vfiprintf_r+0x4c>
 800a4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ba:	f7ff f9ef 	bl	800989c <__retarget_lock_release_recursive>
 800a4be:	e7e9      	b.n	800a494 <_vfiprintf_r+0x4c>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ce:	2330      	movs	r3, #48	; 0x30
 800a4d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a694 <_vfiprintf_r+0x24c>
 800a4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4d8:	f04f 0901 	mov.w	r9, #1
 800a4dc:	4623      	mov	r3, r4
 800a4de:	469a      	mov	sl, r3
 800a4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_vfiprintf_r+0xa2>
 800a4e6:	2a25      	cmp	r2, #37	; 0x25
 800a4e8:	d1f9      	bne.n	800a4de <_vfiprintf_r+0x96>
 800a4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ee:	d00b      	beq.n	800a508 <_vfiprintf_r+0xc0>
 800a4f0:	465b      	mov	r3, fp
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f7ff ff93 	bl	800a422 <__sfputs_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f000 80aa 	beq.w	800a656 <_vfiprintf_r+0x20e>
 800a502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a504:	445a      	add	r2, fp
 800a506:	9209      	str	r2, [sp, #36]	; 0x24
 800a508:	f89a 3000 	ldrb.w	r3, [sl]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 80a2 	beq.w	800a656 <_vfiprintf_r+0x20e>
 800a512:	2300      	movs	r3, #0
 800a514:	f04f 32ff 	mov.w	r2, #4294967295
 800a518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a51c:	f10a 0a01 	add.w	sl, sl, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a528:	931a      	str	r3, [sp, #104]	; 0x68
 800a52a:	4654      	mov	r4, sl
 800a52c:	2205      	movs	r2, #5
 800a52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a532:	4858      	ldr	r0, [pc, #352]	; (800a694 <_vfiprintf_r+0x24c>)
 800a534:	f7f5 fe74 	bl	8000220 <memchr>
 800a538:	9a04      	ldr	r2, [sp, #16]
 800a53a:	b9d8      	cbnz	r0, 800a574 <_vfiprintf_r+0x12c>
 800a53c:	06d1      	lsls	r1, r2, #27
 800a53e:	bf44      	itt	mi
 800a540:	2320      	movmi	r3, #32
 800a542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a546:	0713      	lsls	r3, r2, #28
 800a548:	bf44      	itt	mi
 800a54a:	232b      	movmi	r3, #43	; 0x2b
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a550:	f89a 3000 	ldrb.w	r3, [sl]
 800a554:	2b2a      	cmp	r3, #42	; 0x2a
 800a556:	d015      	beq.n	800a584 <_vfiprintf_r+0x13c>
 800a558:	9a07      	ldr	r2, [sp, #28]
 800a55a:	4654      	mov	r4, sl
 800a55c:	2000      	movs	r0, #0
 800a55e:	f04f 0c0a 	mov.w	ip, #10
 800a562:	4621      	mov	r1, r4
 800a564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a568:	3b30      	subs	r3, #48	; 0x30
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	d94e      	bls.n	800a60c <_vfiprintf_r+0x1c4>
 800a56e:	b1b0      	cbz	r0, 800a59e <_vfiprintf_r+0x156>
 800a570:	9207      	str	r2, [sp, #28]
 800a572:	e014      	b.n	800a59e <_vfiprintf_r+0x156>
 800a574:	eba0 0308 	sub.w	r3, r0, r8
 800a578:	fa09 f303 	lsl.w	r3, r9, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	46a2      	mov	sl, r4
 800a582:	e7d2      	b.n	800a52a <_vfiprintf_r+0xe2>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d19      	adds	r1, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9103      	str	r1, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfbb      	ittet	lt
 800a590:	425b      	neglt	r3, r3
 800a592:	f042 0202 	orrlt.w	r2, r2, #2
 800a596:	9307      	strge	r3, [sp, #28]
 800a598:	9307      	strlt	r3, [sp, #28]
 800a59a:	bfb8      	it	lt
 800a59c:	9204      	strlt	r2, [sp, #16]
 800a59e:	7823      	ldrb	r3, [r4, #0]
 800a5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5a2:	d10c      	bne.n	800a5be <_vfiprintf_r+0x176>
 800a5a4:	7863      	ldrb	r3, [r4, #1]
 800a5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a8:	d135      	bne.n	800a616 <_vfiprintf_r+0x1ce>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	1d1a      	adds	r2, r3, #4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	9203      	str	r2, [sp, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bfb8      	it	lt
 800a5b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5ba:	3402      	adds	r4, #2
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6a4 <_vfiprintf_r+0x25c>
 800a5c2:	7821      	ldrb	r1, [r4, #0]
 800a5c4:	2203      	movs	r2, #3
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7f5 fe2a 	bl	8000220 <memchr>
 800a5cc:	b140      	cbz	r0, 800a5e0 <_vfiprintf_r+0x198>
 800a5ce:	2340      	movs	r3, #64	; 0x40
 800a5d0:	eba0 000a 	sub.w	r0, r0, sl
 800a5d4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	4303      	orrs	r3, r0
 800a5dc:	3401      	adds	r4, #1
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e4:	482c      	ldr	r0, [pc, #176]	; (800a698 <_vfiprintf_r+0x250>)
 800a5e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ea:	2206      	movs	r2, #6
 800a5ec:	f7f5 fe18 	bl	8000220 <memchr>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d03f      	beq.n	800a674 <_vfiprintf_r+0x22c>
 800a5f4:	4b29      	ldr	r3, [pc, #164]	; (800a69c <_vfiprintf_r+0x254>)
 800a5f6:	bb1b      	cbnz	r3, 800a640 <_vfiprintf_r+0x1f8>
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	3307      	adds	r3, #7
 800a5fc:	f023 0307 	bic.w	r3, r3, #7
 800a600:	3308      	adds	r3, #8
 800a602:	9303      	str	r3, [sp, #12]
 800a604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a606:	443b      	add	r3, r7
 800a608:	9309      	str	r3, [sp, #36]	; 0x24
 800a60a:	e767      	b.n	800a4dc <_vfiprintf_r+0x94>
 800a60c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a610:	460c      	mov	r4, r1
 800a612:	2001      	movs	r0, #1
 800a614:	e7a5      	b.n	800a562 <_vfiprintf_r+0x11a>
 800a616:	2300      	movs	r3, #0
 800a618:	3401      	adds	r4, #1
 800a61a:	9305      	str	r3, [sp, #20]
 800a61c:	4619      	mov	r1, r3
 800a61e:	f04f 0c0a 	mov.w	ip, #10
 800a622:	4620      	mov	r0, r4
 800a624:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a628:	3a30      	subs	r2, #48	; 0x30
 800a62a:	2a09      	cmp	r2, #9
 800a62c:	d903      	bls.n	800a636 <_vfiprintf_r+0x1ee>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0c5      	beq.n	800a5be <_vfiprintf_r+0x176>
 800a632:	9105      	str	r1, [sp, #20]
 800a634:	e7c3      	b.n	800a5be <_vfiprintf_r+0x176>
 800a636:	fb0c 2101 	mla	r1, ip, r1, r2
 800a63a:	4604      	mov	r4, r0
 800a63c:	2301      	movs	r3, #1
 800a63e:	e7f0      	b.n	800a622 <_vfiprintf_r+0x1da>
 800a640:	ab03      	add	r3, sp, #12
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	462a      	mov	r2, r5
 800a646:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <_vfiprintf_r+0x258>)
 800a648:	a904      	add	r1, sp, #16
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7fd fb18 	bl	8007c80 <_printf_float>
 800a650:	4607      	mov	r7, r0
 800a652:	1c78      	adds	r0, r7, #1
 800a654:	d1d6      	bne.n	800a604 <_vfiprintf_r+0x1bc>
 800a656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a658:	07d9      	lsls	r1, r3, #31
 800a65a:	d405      	bmi.n	800a668 <_vfiprintf_r+0x220>
 800a65c:	89ab      	ldrh	r3, [r5, #12]
 800a65e:	059a      	lsls	r2, r3, #22
 800a660:	d402      	bmi.n	800a668 <_vfiprintf_r+0x220>
 800a662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a664:	f7ff f91a 	bl	800989c <__retarget_lock_release_recursive>
 800a668:	89ab      	ldrh	r3, [r5, #12]
 800a66a:	065b      	lsls	r3, r3, #25
 800a66c:	f53f af12 	bmi.w	800a494 <_vfiprintf_r+0x4c>
 800a670:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a672:	e711      	b.n	800a498 <_vfiprintf_r+0x50>
 800a674:	ab03      	add	r3, sp, #12
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	462a      	mov	r2, r5
 800a67a:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <_vfiprintf_r+0x258>)
 800a67c:	a904      	add	r1, sp, #16
 800a67e:	4630      	mov	r0, r6
 800a680:	f7fd fda2 	bl	80081c8 <_printf_i>
 800a684:	e7e4      	b.n	800a650 <_vfiprintf_r+0x208>
 800a686:	bf00      	nop
 800a688:	0800d154 	.word	0x0800d154
 800a68c:	0800d174 	.word	0x0800d174
 800a690:	0800d134 	.word	0x0800d134
 800a694:	0800d33a 	.word	0x0800d33a
 800a698:	0800d344 	.word	0x0800d344
 800a69c:	08007c81 	.word	0x08007c81
 800a6a0:	0800a423 	.word	0x0800a423
 800a6a4:	0800d340 	.word	0x0800d340

0800a6a8 <_read_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_read_r+0x20>)
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	4608      	mov	r0, r1
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	602a      	str	r2, [r5, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f7f8 fc38 	bl	8002f2c <_read>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_read_r+0x1e>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_read_r+0x1e>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	20000a44 	.word	0x20000a44

0800a6cc <__ascii_wctomb>:
 800a6cc:	b149      	cbz	r1, 800a6e2 <__ascii_wctomb+0x16>
 800a6ce:	2aff      	cmp	r2, #255	; 0xff
 800a6d0:	bf85      	ittet	hi
 800a6d2:	238a      	movhi	r3, #138	; 0x8a
 800a6d4:	6003      	strhi	r3, [r0, #0]
 800a6d6:	700a      	strbls	r2, [r1, #0]
 800a6d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6dc:	bf98      	it	ls
 800a6de:	2001      	movls	r0, #1
 800a6e0:	4770      	bx	lr
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4770      	bx	lr

0800a6e6 <abort>:
 800a6e6:	b508      	push	{r3, lr}
 800a6e8:	2006      	movs	r0, #6
 800a6ea:	f000 f82b 	bl	800a744 <raise>
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f002 fbf0 	bl	800ced4 <_exit>

0800a6f4 <_raise_r>:
 800a6f4:	291f      	cmp	r1, #31
 800a6f6:	b538      	push	{r3, r4, r5, lr}
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	460d      	mov	r5, r1
 800a6fc:	d904      	bls.n	800a708 <_raise_r+0x14>
 800a6fe:	2316      	movs	r3, #22
 800a700:	6003      	str	r3, [r0, #0]
 800a702:	f04f 30ff 	mov.w	r0, #4294967295
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a70a:	b112      	cbz	r2, 800a712 <_raise_r+0x1e>
 800a70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a710:	b94b      	cbnz	r3, 800a726 <_raise_r+0x32>
 800a712:	4620      	mov	r0, r4
 800a714:	f000 f830 	bl	800a778 <_getpid_r>
 800a718:	462a      	mov	r2, r5
 800a71a:	4601      	mov	r1, r0
 800a71c:	4620      	mov	r0, r4
 800a71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a722:	f000 b817 	b.w	800a754 <_kill_r>
 800a726:	2b01      	cmp	r3, #1
 800a728:	d00a      	beq.n	800a740 <_raise_r+0x4c>
 800a72a:	1c59      	adds	r1, r3, #1
 800a72c:	d103      	bne.n	800a736 <_raise_r+0x42>
 800a72e:	2316      	movs	r3, #22
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	2001      	movs	r0, #1
 800a734:	e7e7      	b.n	800a706 <_raise_r+0x12>
 800a736:	2400      	movs	r4, #0
 800a738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a73c:	4628      	mov	r0, r5
 800a73e:	4798      	blx	r3
 800a740:	2000      	movs	r0, #0
 800a742:	e7e0      	b.n	800a706 <_raise_r+0x12>

0800a744 <raise>:
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <raise+0xc>)
 800a746:	4601      	mov	r1, r0
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	f7ff bfd3 	b.w	800a6f4 <_raise_r>
 800a74e:	bf00      	nop
 800a750:	200002b4 	.word	0x200002b4

0800a754 <_kill_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d07      	ldr	r5, [pc, #28]	; (800a774 <_kill_r+0x20>)
 800a758:	2300      	movs	r3, #0
 800a75a:	4604      	mov	r4, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	4611      	mov	r1, r2
 800a760:	602b      	str	r3, [r5, #0]
 800a762:	f002 fbaf 	bl	800cec4 <_kill>
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	d102      	bne.n	800a770 <_kill_r+0x1c>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	b103      	cbz	r3, 800a770 <_kill_r+0x1c>
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	bd38      	pop	{r3, r4, r5, pc}
 800a772:	bf00      	nop
 800a774:	20000a44 	.word	0x20000a44

0800a778 <_getpid_r>:
 800a778:	f002 bb9c 	b.w	800ceb4 <_getpid>
 800a77c:	0000      	movs	r0, r0
	...

0800a780 <cos>:
 800a780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a782:	ec53 2b10 	vmov	r2, r3, d0
 800a786:	4824      	ldr	r0, [pc, #144]	; (800a818 <cos+0x98>)
 800a788:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a78c:	4281      	cmp	r1, r0
 800a78e:	dc06      	bgt.n	800a79e <cos+0x1e>
 800a790:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a810 <cos+0x90>
 800a794:	f001 fb78 	bl	800be88 <__kernel_cos>
 800a798:	ec51 0b10 	vmov	r0, r1, d0
 800a79c:	e007      	b.n	800a7ae <cos+0x2e>
 800a79e:	481f      	ldr	r0, [pc, #124]	; (800a81c <cos+0x9c>)
 800a7a0:	4281      	cmp	r1, r0
 800a7a2:	dd09      	ble.n	800a7b8 <cos+0x38>
 800a7a4:	ee10 0a10 	vmov	r0, s0
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f7f5 fd8d 	bl	80002c8 <__aeabi_dsub>
 800a7ae:	ec41 0b10 	vmov	d0, r0, r1
 800a7b2:	b005      	add	sp, #20
 800a7b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7b8:	4668      	mov	r0, sp
 800a7ba:	f001 f8a5 	bl	800b908 <__ieee754_rem_pio2>
 800a7be:	f000 0003 	and.w	r0, r0, #3
 800a7c2:	2801      	cmp	r0, #1
 800a7c4:	d007      	beq.n	800a7d6 <cos+0x56>
 800a7c6:	2802      	cmp	r0, #2
 800a7c8:	d012      	beq.n	800a7f0 <cos+0x70>
 800a7ca:	b9c0      	cbnz	r0, 800a7fe <cos+0x7e>
 800a7cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7d0:	ed9d 0b00 	vldr	d0, [sp]
 800a7d4:	e7de      	b.n	800a794 <cos+0x14>
 800a7d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7da:	ed9d 0b00 	vldr	d0, [sp]
 800a7de:	f001 ff5b 	bl	800c698 <__kernel_sin>
 800a7e2:	ec53 2b10 	vmov	r2, r3, d0
 800a7e6:	ee10 0a10 	vmov	r0, s0
 800a7ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7ee:	e7de      	b.n	800a7ae <cos+0x2e>
 800a7f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7f4:	ed9d 0b00 	vldr	d0, [sp]
 800a7f8:	f001 fb46 	bl	800be88 <__kernel_cos>
 800a7fc:	e7f1      	b.n	800a7e2 <cos+0x62>
 800a7fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a802:	ed9d 0b00 	vldr	d0, [sp]
 800a806:	2001      	movs	r0, #1
 800a808:	f001 ff46 	bl	800c698 <__kernel_sin>
 800a80c:	e7c4      	b.n	800a798 <cos+0x18>
 800a80e:	bf00      	nop
	...
 800a818:	3fe921fb 	.word	0x3fe921fb
 800a81c:	7fefffff 	.word	0x7fefffff

0800a820 <sin>:
 800a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a822:	ec53 2b10 	vmov	r2, r3, d0
 800a826:	4826      	ldr	r0, [pc, #152]	; (800a8c0 <sin+0xa0>)
 800a828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a82c:	4281      	cmp	r1, r0
 800a82e:	dc07      	bgt.n	800a840 <sin+0x20>
 800a830:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a8b8 <sin+0x98>
 800a834:	2000      	movs	r0, #0
 800a836:	f001 ff2f 	bl	800c698 <__kernel_sin>
 800a83a:	ec51 0b10 	vmov	r0, r1, d0
 800a83e:	e007      	b.n	800a850 <sin+0x30>
 800a840:	4820      	ldr	r0, [pc, #128]	; (800a8c4 <sin+0xa4>)
 800a842:	4281      	cmp	r1, r0
 800a844:	dd09      	ble.n	800a85a <sin+0x3a>
 800a846:	ee10 0a10 	vmov	r0, s0
 800a84a:	4619      	mov	r1, r3
 800a84c:	f7f5 fd3c 	bl	80002c8 <__aeabi_dsub>
 800a850:	ec41 0b10 	vmov	d0, r0, r1
 800a854:	b005      	add	sp, #20
 800a856:	f85d fb04 	ldr.w	pc, [sp], #4
 800a85a:	4668      	mov	r0, sp
 800a85c:	f001 f854 	bl	800b908 <__ieee754_rem_pio2>
 800a860:	f000 0003 	and.w	r0, r0, #3
 800a864:	2801      	cmp	r0, #1
 800a866:	d008      	beq.n	800a87a <sin+0x5a>
 800a868:	2802      	cmp	r0, #2
 800a86a:	d00d      	beq.n	800a888 <sin+0x68>
 800a86c:	b9d0      	cbnz	r0, 800a8a4 <sin+0x84>
 800a86e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a872:	ed9d 0b00 	vldr	d0, [sp]
 800a876:	2001      	movs	r0, #1
 800a878:	e7dd      	b.n	800a836 <sin+0x16>
 800a87a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a87e:	ed9d 0b00 	vldr	d0, [sp]
 800a882:	f001 fb01 	bl	800be88 <__kernel_cos>
 800a886:	e7d8      	b.n	800a83a <sin+0x1a>
 800a888:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a88c:	ed9d 0b00 	vldr	d0, [sp]
 800a890:	2001      	movs	r0, #1
 800a892:	f001 ff01 	bl	800c698 <__kernel_sin>
 800a896:	ec53 2b10 	vmov	r2, r3, d0
 800a89a:	ee10 0a10 	vmov	r0, s0
 800a89e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a8a2:	e7d5      	b.n	800a850 <sin+0x30>
 800a8a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8a8:	ed9d 0b00 	vldr	d0, [sp]
 800a8ac:	f001 faec 	bl	800be88 <__kernel_cos>
 800a8b0:	e7f1      	b.n	800a896 <sin+0x76>
 800a8b2:	bf00      	nop
 800a8b4:	f3af 8000 	nop.w
	...
 800a8c0:	3fe921fb 	.word	0x3fe921fb
 800a8c4:	7fefffff 	.word	0x7fefffff

0800a8c8 <atan2>:
 800a8c8:	f000 b91e 	b.w	800ab08 <__ieee754_atan2>

0800a8cc <fmod>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	ed2d 8b02 	vpush	{d8}
 800a8d2:	ec57 6b10 	vmov	r6, r7, d0
 800a8d6:	ec55 4b11 	vmov	r4, r5, d1
 800a8da:	f000 f9df 	bl	800ac9c <__ieee754_fmod>
 800a8de:	4b18      	ldr	r3, [pc, #96]	; (800a940 <fmod+0x74>)
 800a8e0:	eeb0 8a40 	vmov.f32	s16, s0
 800a8e4:	eef0 8a60 	vmov.f32	s17, s1
 800a8e8:	f993 3000 	ldrsb.w	r3, [r3]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	d020      	beq.n	800a932 <fmod+0x66>
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f6 f938 	bl	8000b6c <__aeabi_dcmpun>
 800a8fc:	b9c8      	cbnz	r0, 800a932 <fmod+0x66>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	4630      	mov	r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	f7f6 f931 	bl	8000b6c <__aeabi_dcmpun>
 800a90a:	b990      	cbnz	r0, 800a932 <fmod+0x66>
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f6 f8f8 	bl	8000b08 <__aeabi_dcmpeq>
 800a918:	b158      	cbz	r0, 800a932 <fmod+0x66>
 800a91a:	f7fd f8df 	bl	8007adc <__errno>
 800a91e:	2321      	movs	r3, #33	; 0x21
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	2200      	movs	r2, #0
 800a924:	2300      	movs	r3, #0
 800a926:	4610      	mov	r0, r2
 800a928:	4619      	mov	r1, r3
 800a92a:	f7f5 ffaf 	bl	800088c <__aeabi_ddiv>
 800a92e:	ec41 0b18 	vmov	d8, r0, r1
 800a932:	eeb0 0a48 	vmov.f32	s0, s16
 800a936:	eef0 0a68 	vmov.f32	s1, s17
 800a93a:	ecbd 8b02 	vpop	{d8}
 800a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a940:	20000484 	.word	0x20000484

0800a944 <pow>:
 800a944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a948:	ec59 8b10 	vmov	r8, r9, d0
 800a94c:	ec57 6b11 	vmov	r6, r7, d1
 800a950:	f000 fab6 	bl	800aec0 <__ieee754_pow>
 800a954:	4b4e      	ldr	r3, [pc, #312]	; (800aa90 <pow+0x14c>)
 800a956:	f993 3000 	ldrsb.w	r3, [r3]
 800a95a:	3301      	adds	r3, #1
 800a95c:	ec55 4b10 	vmov	r4, r5, d0
 800a960:	d015      	beq.n	800a98e <pow+0x4a>
 800a962:	4632      	mov	r2, r6
 800a964:	463b      	mov	r3, r7
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f6 f8ff 	bl	8000b6c <__aeabi_dcmpun>
 800a96e:	b970      	cbnz	r0, 800a98e <pow+0x4a>
 800a970:	4642      	mov	r2, r8
 800a972:	464b      	mov	r3, r9
 800a974:	4640      	mov	r0, r8
 800a976:	4649      	mov	r1, r9
 800a978:	f7f6 f8f8 	bl	8000b6c <__aeabi_dcmpun>
 800a97c:	2200      	movs	r2, #0
 800a97e:	2300      	movs	r3, #0
 800a980:	b148      	cbz	r0, 800a996 <pow+0x52>
 800a982:	4630      	mov	r0, r6
 800a984:	4639      	mov	r1, r7
 800a986:	f7f6 f8bf 	bl	8000b08 <__aeabi_dcmpeq>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d17d      	bne.n	800aa8a <pow+0x146>
 800a98e:	ec45 4b10 	vmov	d0, r4, r5
 800a992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f6 f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800a99e:	b1e0      	cbz	r0, 800a9da <pow+0x96>
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f6 f8ae 	bl	8000b08 <__aeabi_dcmpeq>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d16c      	bne.n	800aa8a <pow+0x146>
 800a9b0:	ec47 6b10 	vmov	d0, r6, r7
 800a9b4:	f002 f8d9 	bl	800cb6a <finite>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d0e8      	beq.n	800a98e <pow+0x4a>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	2300      	movs	r3, #0
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f6 f8aa 	bl	8000b1c <__aeabi_dcmplt>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d0e0      	beq.n	800a98e <pow+0x4a>
 800a9cc:	f7fd f886 	bl	8007adc <__errno>
 800a9d0:	2321      	movs	r3, #33	; 0x21
 800a9d2:	6003      	str	r3, [r0, #0]
 800a9d4:	2400      	movs	r4, #0
 800a9d6:	4d2f      	ldr	r5, [pc, #188]	; (800aa94 <pow+0x150>)
 800a9d8:	e7d9      	b.n	800a98e <pow+0x4a>
 800a9da:	ec45 4b10 	vmov	d0, r4, r5
 800a9de:	f002 f8c4 	bl	800cb6a <finite>
 800a9e2:	bbb8      	cbnz	r0, 800aa54 <pow+0x110>
 800a9e4:	ec49 8b10 	vmov	d0, r8, r9
 800a9e8:	f002 f8bf 	bl	800cb6a <finite>
 800a9ec:	b390      	cbz	r0, 800aa54 <pow+0x110>
 800a9ee:	ec47 6b10 	vmov	d0, r6, r7
 800a9f2:	f002 f8ba 	bl	800cb6a <finite>
 800a9f6:	b368      	cbz	r0, 800aa54 <pow+0x110>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f6 f8b4 	bl	8000b6c <__aeabi_dcmpun>
 800aa04:	b160      	cbz	r0, 800aa20 <pow+0xdc>
 800aa06:	f7fd f869 	bl	8007adc <__errno>
 800aa0a:	2321      	movs	r3, #33	; 0x21
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	4610      	mov	r0, r2
 800aa14:	4619      	mov	r1, r3
 800aa16:	f7f5 ff39 	bl	800088c <__aeabi_ddiv>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	e7b6      	b.n	800a98e <pow+0x4a>
 800aa20:	f7fd f85c 	bl	8007adc <__errno>
 800aa24:	2322      	movs	r3, #34	; 0x22
 800aa26:	6003      	str	r3, [r0, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4649      	mov	r1, r9
 800aa30:	f7f6 f874 	bl	8000b1c <__aeabi_dcmplt>
 800aa34:	2400      	movs	r4, #0
 800aa36:	b158      	cbz	r0, 800aa50 <pow+0x10c>
 800aa38:	ec47 6b10 	vmov	d0, r6, r7
 800aa3c:	f002 f928 	bl	800cc90 <rint>
 800aa40:	4632      	mov	r2, r6
 800aa42:	ec51 0b10 	vmov	r0, r1, d0
 800aa46:	463b      	mov	r3, r7
 800aa48:	f7f6 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d0c2      	beq.n	800a9d6 <pow+0x92>
 800aa50:	4d11      	ldr	r5, [pc, #68]	; (800aa98 <pow+0x154>)
 800aa52:	e79c      	b.n	800a98e <pow+0x4a>
 800aa54:	2200      	movs	r2, #0
 800aa56:	2300      	movs	r3, #0
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f6 f854 	bl	8000b08 <__aeabi_dcmpeq>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d094      	beq.n	800a98e <pow+0x4a>
 800aa64:	ec49 8b10 	vmov	d0, r8, r9
 800aa68:	f002 f87f 	bl	800cb6a <finite>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d08e      	beq.n	800a98e <pow+0x4a>
 800aa70:	ec47 6b10 	vmov	d0, r6, r7
 800aa74:	f002 f879 	bl	800cb6a <finite>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d088      	beq.n	800a98e <pow+0x4a>
 800aa7c:	f7fd f82e 	bl	8007adc <__errno>
 800aa80:	2322      	movs	r3, #34	; 0x22
 800aa82:	6003      	str	r3, [r0, #0]
 800aa84:	2400      	movs	r4, #0
 800aa86:	2500      	movs	r5, #0
 800aa88:	e781      	b.n	800a98e <pow+0x4a>
 800aa8a:	4d04      	ldr	r5, [pc, #16]	; (800aa9c <pow+0x158>)
 800aa8c:	2400      	movs	r4, #0
 800aa8e:	e77e      	b.n	800a98e <pow+0x4a>
 800aa90:	20000484 	.word	0x20000484
 800aa94:	fff00000 	.word	0xfff00000
 800aa98:	7ff00000 	.word	0x7ff00000
 800aa9c:	3ff00000 	.word	0x3ff00000

0800aaa0 <sqrt>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	ed2d 8b02 	vpush	{d8}
 800aaa6:	ec55 4b10 	vmov	r4, r5, d0
 800aaaa:	f001 f937 	bl	800bd1c <__ieee754_sqrt>
 800aaae:	4b15      	ldr	r3, [pc, #84]	; (800ab04 <sqrt+0x64>)
 800aab0:	eeb0 8a40 	vmov.f32	s16, s0
 800aab4:	eef0 8a60 	vmov.f32	s17, s1
 800aab8:	f993 3000 	ldrsb.w	r3, [r3]
 800aabc:	3301      	adds	r3, #1
 800aabe:	d019      	beq.n	800aaf4 <sqrt+0x54>
 800aac0:	4622      	mov	r2, r4
 800aac2:	462b      	mov	r3, r5
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f6 f850 	bl	8000b6c <__aeabi_dcmpun>
 800aacc:	b990      	cbnz	r0, 800aaf4 <sqrt+0x54>
 800aace:	2200      	movs	r2, #0
 800aad0:	2300      	movs	r3, #0
 800aad2:	4620      	mov	r0, r4
 800aad4:	4629      	mov	r1, r5
 800aad6:	f7f6 f821 	bl	8000b1c <__aeabi_dcmplt>
 800aada:	b158      	cbz	r0, 800aaf4 <sqrt+0x54>
 800aadc:	f7fc fffe 	bl	8007adc <__errno>
 800aae0:	2321      	movs	r3, #33	; 0x21
 800aae2:	6003      	str	r3, [r0, #0]
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4610      	mov	r0, r2
 800aaea:	4619      	mov	r1, r3
 800aaec:	f7f5 fece 	bl	800088c <__aeabi_ddiv>
 800aaf0:	ec41 0b18 	vmov	d8, r0, r1
 800aaf4:	eeb0 0a48 	vmov.f32	s0, s16
 800aaf8:	eef0 0a68 	vmov.f32	s1, s17
 800aafc:	ecbd 8b02 	vpop	{d8}
 800ab00:	bd38      	pop	{r3, r4, r5, pc}
 800ab02:	bf00      	nop
 800ab04:	20000484 	.word	0x20000484

0800ab08 <__ieee754_atan2>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	ec57 6b11 	vmov	r6, r7, d1
 800ab10:	4273      	negs	r3, r6
 800ab12:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ac98 <__ieee754_atan2+0x190>
 800ab16:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ab1a:	4333      	orrs	r3, r6
 800ab1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ab20:	4573      	cmp	r3, lr
 800ab22:	ec51 0b10 	vmov	r0, r1, d0
 800ab26:	ee11 8a10 	vmov	r8, s2
 800ab2a:	d80a      	bhi.n	800ab42 <__ieee754_atan2+0x3a>
 800ab2c:	4244      	negs	r4, r0
 800ab2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab32:	4304      	orrs	r4, r0
 800ab34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ab38:	4574      	cmp	r4, lr
 800ab3a:	ee10 9a10 	vmov	r9, s0
 800ab3e:	468c      	mov	ip, r1
 800ab40:	d907      	bls.n	800ab52 <__ieee754_atan2+0x4a>
 800ab42:	4632      	mov	r2, r6
 800ab44:	463b      	mov	r3, r7
 800ab46:	f7f5 fbc1 	bl	80002cc <__adddf3>
 800ab4a:	ec41 0b10 	vmov	d0, r0, r1
 800ab4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ab56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab5a:	4334      	orrs	r4, r6
 800ab5c:	d103      	bne.n	800ab66 <__ieee754_atan2+0x5e>
 800ab5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab62:	f001 be59 	b.w	800c818 <atan>
 800ab66:	17bc      	asrs	r4, r7, #30
 800ab68:	f004 0402 	and.w	r4, r4, #2
 800ab6c:	ea53 0909 	orrs.w	r9, r3, r9
 800ab70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ab74:	d107      	bne.n	800ab86 <__ieee754_atan2+0x7e>
 800ab76:	2c02      	cmp	r4, #2
 800ab78:	d060      	beq.n	800ac3c <__ieee754_atan2+0x134>
 800ab7a:	2c03      	cmp	r4, #3
 800ab7c:	d1e5      	bne.n	800ab4a <__ieee754_atan2+0x42>
 800ab7e:	a142      	add	r1, pc, #264	; (adr r1, 800ac88 <__ieee754_atan2+0x180>)
 800ab80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab84:	e7e1      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ab86:	ea52 0808 	orrs.w	r8, r2, r8
 800ab8a:	d106      	bne.n	800ab9a <__ieee754_atan2+0x92>
 800ab8c:	f1bc 0f00 	cmp.w	ip, #0
 800ab90:	da5f      	bge.n	800ac52 <__ieee754_atan2+0x14a>
 800ab92:	a13f      	add	r1, pc, #252	; (adr r1, 800ac90 <__ieee754_atan2+0x188>)
 800ab94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab98:	e7d7      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ab9a:	4572      	cmp	r2, lr
 800ab9c:	d10f      	bne.n	800abbe <__ieee754_atan2+0xb6>
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f104 34ff 	add.w	r4, r4, #4294967295
 800aba4:	d107      	bne.n	800abb6 <__ieee754_atan2+0xae>
 800aba6:	2c02      	cmp	r4, #2
 800aba8:	d84c      	bhi.n	800ac44 <__ieee754_atan2+0x13c>
 800abaa:	4b35      	ldr	r3, [pc, #212]	; (800ac80 <__ieee754_atan2+0x178>)
 800abac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800abb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800abb4:	e7c9      	b.n	800ab4a <__ieee754_atan2+0x42>
 800abb6:	2c02      	cmp	r4, #2
 800abb8:	d848      	bhi.n	800ac4c <__ieee754_atan2+0x144>
 800abba:	4b32      	ldr	r3, [pc, #200]	; (800ac84 <__ieee754_atan2+0x17c>)
 800abbc:	e7f6      	b.n	800abac <__ieee754_atan2+0xa4>
 800abbe:	4573      	cmp	r3, lr
 800abc0:	d0e4      	beq.n	800ab8c <__ieee754_atan2+0x84>
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800abc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abcc:	da1e      	bge.n	800ac0c <__ieee754_atan2+0x104>
 800abce:	2f00      	cmp	r7, #0
 800abd0:	da01      	bge.n	800abd6 <__ieee754_atan2+0xce>
 800abd2:	323c      	adds	r2, #60	; 0x3c
 800abd4:	db1e      	blt.n	800ac14 <__ieee754_atan2+0x10c>
 800abd6:	4632      	mov	r2, r6
 800abd8:	463b      	mov	r3, r7
 800abda:	f7f5 fe57 	bl	800088c <__aeabi_ddiv>
 800abde:	ec41 0b10 	vmov	d0, r0, r1
 800abe2:	f001 ffb9 	bl	800cb58 <fabs>
 800abe6:	f001 fe17 	bl	800c818 <atan>
 800abea:	ec51 0b10 	vmov	r0, r1, d0
 800abee:	2c01      	cmp	r4, #1
 800abf0:	d013      	beq.n	800ac1a <__ieee754_atan2+0x112>
 800abf2:	2c02      	cmp	r4, #2
 800abf4:	d015      	beq.n	800ac22 <__ieee754_atan2+0x11a>
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	d0a7      	beq.n	800ab4a <__ieee754_atan2+0x42>
 800abfa:	a319      	add	r3, pc, #100	; (adr r3, 800ac60 <__ieee754_atan2+0x158>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb62 	bl	80002c8 <__aeabi_dsub>
 800ac04:	a318      	add	r3, pc, #96	; (adr r3, 800ac68 <__ieee754_atan2+0x160>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	e014      	b.n	800ac36 <__ieee754_atan2+0x12e>
 800ac0c:	a118      	add	r1, pc, #96	; (adr r1, 800ac70 <__ieee754_atan2+0x168>)
 800ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac12:	e7ec      	b.n	800abee <__ieee754_atan2+0xe6>
 800ac14:	2000      	movs	r0, #0
 800ac16:	2100      	movs	r1, #0
 800ac18:	e7e9      	b.n	800abee <__ieee754_atan2+0xe6>
 800ac1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac1e:	4619      	mov	r1, r3
 800ac20:	e793      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac22:	a30f      	add	r3, pc, #60	; (adr r3, 800ac60 <__ieee754_atan2+0x158>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fb4e 	bl	80002c8 <__aeabi_dsub>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	a10d      	add	r1, pc, #52	; (adr r1, 800ac68 <__ieee754_atan2+0x160>)
 800ac32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac36:	f7f5 fb47 	bl	80002c8 <__aeabi_dsub>
 800ac3a:	e786      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac3c:	a10a      	add	r1, pc, #40	; (adr r1, 800ac68 <__ieee754_atan2+0x160>)
 800ac3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac42:	e782      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac44:	a10c      	add	r1, pc, #48	; (adr r1, 800ac78 <__ieee754_atan2+0x170>)
 800ac46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac4a:	e77e      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	e77b      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac52:	a107      	add	r1, pc, #28	; (adr r1, 800ac70 <__ieee754_atan2+0x168>)
 800ac54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac58:	e777      	b.n	800ab4a <__ieee754_atan2+0x42>
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w
 800ac60:	33145c07 	.word	0x33145c07
 800ac64:	3ca1a626 	.word	0x3ca1a626
 800ac68:	54442d18 	.word	0x54442d18
 800ac6c:	400921fb 	.word	0x400921fb
 800ac70:	54442d18 	.word	0x54442d18
 800ac74:	3ff921fb 	.word	0x3ff921fb
 800ac78:	54442d18 	.word	0x54442d18
 800ac7c:	3fe921fb 	.word	0x3fe921fb
 800ac80:	0800d350 	.word	0x0800d350
 800ac84:	0800d368 	.word	0x0800d368
 800ac88:	54442d18 	.word	0x54442d18
 800ac8c:	c00921fb 	.word	0xc00921fb
 800ac90:	54442d18 	.word	0x54442d18
 800ac94:	bff921fb 	.word	0xbff921fb
 800ac98:	7ff00000 	.word	0x7ff00000

0800ac9c <__ieee754_fmod>:
 800ac9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	ec53 2b11 	vmov	r2, r3, d1
 800aca4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800aca8:	ea5e 0402 	orrs.w	r4, lr, r2
 800acac:	ec51 0b10 	vmov	r0, r1, d0
 800acb0:	ee11 7a10 	vmov	r7, s2
 800acb4:	ee11 ca10 	vmov	ip, s2
 800acb8:	461e      	mov	r6, r3
 800acba:	d00d      	beq.n	800acd8 <__ieee754_fmod+0x3c>
 800acbc:	4c7a      	ldr	r4, [pc, #488]	; (800aea8 <__ieee754_fmod+0x20c>)
 800acbe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800acc2:	45a0      	cmp	r8, r4
 800acc4:	4689      	mov	r9, r1
 800acc6:	dc07      	bgt.n	800acd8 <__ieee754_fmod+0x3c>
 800acc8:	4254      	negs	r4, r2
 800acca:	4d78      	ldr	r5, [pc, #480]	; (800aeac <__ieee754_fmod+0x210>)
 800accc:	4314      	orrs	r4, r2
 800acce:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800acd2:	42ac      	cmp	r4, r5
 800acd4:	46ab      	mov	fp, r5
 800acd6:	d909      	bls.n	800acec <__ieee754_fmod+0x50>
 800acd8:	f7f5 fcae 	bl	8000638 <__aeabi_dmul>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	f7f5 fdd4 	bl	800088c <__aeabi_ddiv>
 800ace4:	ec41 0b10 	vmov	d0, r0, r1
 800ace8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	45f0      	cmp	r8, lr
 800acee:	ee10 aa10 	vmov	sl, s0
 800acf2:	ee10 4a10 	vmov	r4, s0
 800acf6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800acfa:	dc0a      	bgt.n	800ad12 <__ieee754_fmod+0x76>
 800acfc:	dbf2      	blt.n	800ace4 <__ieee754_fmod+0x48>
 800acfe:	4290      	cmp	r0, r2
 800ad00:	d3f0      	bcc.n	800ace4 <__ieee754_fmod+0x48>
 800ad02:	d106      	bne.n	800ad12 <__ieee754_fmod+0x76>
 800ad04:	4a6a      	ldr	r2, [pc, #424]	; (800aeb0 <__ieee754_fmod+0x214>)
 800ad06:	0fed      	lsrs	r5, r5, #31
 800ad08:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ad10:	e7e8      	b.n	800ace4 <__ieee754_fmod+0x48>
 800ad12:	ea19 0f0b 	tst.w	r9, fp
 800ad16:	d14a      	bne.n	800adae <__ieee754_fmod+0x112>
 800ad18:	f1b8 0f00 	cmp.w	r8, #0
 800ad1c:	d13f      	bne.n	800ad9e <__ieee754_fmod+0x102>
 800ad1e:	4965      	ldr	r1, [pc, #404]	; (800aeb4 <__ieee754_fmod+0x218>)
 800ad20:	4653      	mov	r3, sl
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dc38      	bgt.n	800ad98 <__ieee754_fmod+0xfc>
 800ad26:	4b61      	ldr	r3, [pc, #388]	; (800aeac <__ieee754_fmod+0x210>)
 800ad28:	4033      	ands	r3, r6
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d14f      	bne.n	800adce <__ieee754_fmod+0x132>
 800ad2e:	f1be 0f00 	cmp.w	lr, #0
 800ad32:	d144      	bne.n	800adbe <__ieee754_fmod+0x122>
 800ad34:	4a5f      	ldr	r2, [pc, #380]	; (800aeb4 <__ieee754_fmod+0x218>)
 800ad36:	463b      	mov	r3, r7
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dc3d      	bgt.n	800adb8 <__ieee754_fmod+0x11c>
 800ad3c:	4b5e      	ldr	r3, [pc, #376]	; (800aeb8 <__ieee754_fmod+0x21c>)
 800ad3e:	4299      	cmp	r1, r3
 800ad40:	db4a      	blt.n	800add8 <__ieee754_fmod+0x13c>
 800ad42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad4a:	485b      	ldr	r0, [pc, #364]	; (800aeb8 <__ieee754_fmod+0x21c>)
 800ad4c:	4282      	cmp	r2, r0
 800ad4e:	db57      	blt.n	800ae00 <__ieee754_fmod+0x164>
 800ad50:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ad54:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ad58:	1a89      	subs	r1, r1, r2
 800ad5a:	1b98      	subs	r0, r3, r6
 800ad5c:	eba4 070c 	sub.w	r7, r4, ip
 800ad60:	2900      	cmp	r1, #0
 800ad62:	d164      	bne.n	800ae2e <__ieee754_fmod+0x192>
 800ad64:	4564      	cmp	r4, ip
 800ad66:	bf38      	it	cc
 800ad68:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	bfa4      	itt	ge
 800ad70:	463c      	movge	r4, r7
 800ad72:	4603      	movge	r3, r0
 800ad74:	ea53 0104 	orrs.w	r1, r3, r4
 800ad78:	d0c4      	beq.n	800ad04 <__ieee754_fmod+0x68>
 800ad7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad7e:	db6b      	blt.n	800ae58 <__ieee754_fmod+0x1bc>
 800ad80:	494d      	ldr	r1, [pc, #308]	; (800aeb8 <__ieee754_fmod+0x21c>)
 800ad82:	428a      	cmp	r2, r1
 800ad84:	db6e      	blt.n	800ae64 <__ieee754_fmod+0x1c8>
 800ad86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad8a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800ad8e:	431d      	orrs	r5, r3
 800ad90:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800ad94:	4620      	mov	r0, r4
 800ad96:	e7a5      	b.n	800ace4 <__ieee754_fmod+0x48>
 800ad98:	3901      	subs	r1, #1
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	e7c1      	b.n	800ad22 <__ieee754_fmod+0x86>
 800ad9e:	4946      	ldr	r1, [pc, #280]	; (800aeb8 <__ieee754_fmod+0x21c>)
 800ada0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	ddbe      	ble.n	800ad26 <__ieee754_fmod+0x8a>
 800ada8:	3901      	subs	r1, #1
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	e7fa      	b.n	800ada4 <__ieee754_fmod+0x108>
 800adae:	ea4f 5128 	mov.w	r1, r8, asr #20
 800adb2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800adb6:	e7b6      	b.n	800ad26 <__ieee754_fmod+0x8a>
 800adb8:	3a01      	subs	r2, #1
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	e7bc      	b.n	800ad38 <__ieee754_fmod+0x9c>
 800adbe:	4a3e      	ldr	r2, [pc, #248]	; (800aeb8 <__ieee754_fmod+0x21c>)
 800adc0:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	ddb9      	ble.n	800ad3c <__ieee754_fmod+0xa0>
 800adc8:	3a01      	subs	r2, #1
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	e7fa      	b.n	800adc4 <__ieee754_fmod+0x128>
 800adce:	ea4f 522e 	mov.w	r2, lr, asr #20
 800add2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800add6:	e7b1      	b.n	800ad3c <__ieee754_fmod+0xa0>
 800add8:	1a5c      	subs	r4, r3, r1
 800adda:	2c1f      	cmp	r4, #31
 800addc:	dc0a      	bgt.n	800adf4 <__ieee754_fmod+0x158>
 800adde:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ade2:	fa08 f804 	lsl.w	r8, r8, r4
 800ade6:	fa2a f303 	lsr.w	r3, sl, r3
 800adea:	ea43 0308 	orr.w	r3, r3, r8
 800adee:	fa0a f404 	lsl.w	r4, sl, r4
 800adf2:	e7aa      	b.n	800ad4a <__ieee754_fmod+0xae>
 800adf4:	4b31      	ldr	r3, [pc, #196]	; (800aebc <__ieee754_fmod+0x220>)
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	fa0a f303 	lsl.w	r3, sl, r3
 800adfc:	2400      	movs	r4, #0
 800adfe:	e7a4      	b.n	800ad4a <__ieee754_fmod+0xae>
 800ae00:	eba0 0c02 	sub.w	ip, r0, r2
 800ae04:	f1bc 0f1f 	cmp.w	ip, #31
 800ae08:	dc0a      	bgt.n	800ae20 <__ieee754_fmod+0x184>
 800ae0a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ae0e:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ae12:	fa27 f606 	lsr.w	r6, r7, r6
 800ae16:	ea46 060e 	orr.w	r6, r6, lr
 800ae1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800ae1e:	e79b      	b.n	800ad58 <__ieee754_fmod+0xbc>
 800ae20:	4e26      	ldr	r6, [pc, #152]	; (800aebc <__ieee754_fmod+0x220>)
 800ae22:	1ab6      	subs	r6, r6, r2
 800ae24:	fa07 f606 	lsl.w	r6, r7, r6
 800ae28:	f04f 0c00 	mov.w	ip, #0
 800ae2c:	e794      	b.n	800ad58 <__ieee754_fmod+0xbc>
 800ae2e:	4564      	cmp	r4, ip
 800ae30:	bf38      	it	cc
 800ae32:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ae36:	2800      	cmp	r0, #0
 800ae38:	da05      	bge.n	800ae46 <__ieee754_fmod+0x1aa>
 800ae3a:	0fe0      	lsrs	r0, r4, #31
 800ae3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ae40:	0064      	lsls	r4, r4, #1
 800ae42:	3901      	subs	r1, #1
 800ae44:	e789      	b.n	800ad5a <__ieee754_fmod+0xbe>
 800ae46:	ea50 0307 	orrs.w	r3, r0, r7
 800ae4a:	f43f af5b 	beq.w	800ad04 <__ieee754_fmod+0x68>
 800ae4e:	0ffb      	lsrs	r3, r7, #31
 800ae50:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ae54:	007c      	lsls	r4, r7, #1
 800ae56:	e7f4      	b.n	800ae42 <__ieee754_fmod+0x1a6>
 800ae58:	0fe1      	lsrs	r1, r4, #31
 800ae5a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ae5e:	0064      	lsls	r4, r4, #1
 800ae60:	3a01      	subs	r2, #1
 800ae62:	e78a      	b.n	800ad7a <__ieee754_fmod+0xde>
 800ae64:	1a89      	subs	r1, r1, r2
 800ae66:	2914      	cmp	r1, #20
 800ae68:	dc0a      	bgt.n	800ae80 <__ieee754_fmod+0x1e4>
 800ae6a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ae6e:	fa03 f202 	lsl.w	r2, r3, r2
 800ae72:	40cc      	lsrs	r4, r1
 800ae74:	4322      	orrs	r2, r4
 800ae76:	410b      	asrs	r3, r1
 800ae78:	ea43 0105 	orr.w	r1, r3, r5
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	e731      	b.n	800ace4 <__ieee754_fmod+0x48>
 800ae80:	291f      	cmp	r1, #31
 800ae82:	dc07      	bgt.n	800ae94 <__ieee754_fmod+0x1f8>
 800ae84:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ae88:	40cc      	lsrs	r4, r1
 800ae8a:	fa03 f202 	lsl.w	r2, r3, r2
 800ae8e:	4322      	orrs	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	e7f1      	b.n	800ae78 <__ieee754_fmod+0x1dc>
 800ae94:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800ae98:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae9c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800aea0:	32e2      	adds	r2, #226	; 0xe2
 800aea2:	fa43 f202 	asr.w	r2, r3, r2
 800aea6:	e7f3      	b.n	800ae90 <__ieee754_fmod+0x1f4>
 800aea8:	7fefffff 	.word	0x7fefffff
 800aeac:	7ff00000 	.word	0x7ff00000
 800aeb0:	0800d380 	.word	0x0800d380
 800aeb4:	fffffbed 	.word	0xfffffbed
 800aeb8:	fffffc02 	.word	0xfffffc02
 800aebc:	fffffbe2 	.word	0xfffffbe2

0800aec0 <__ieee754_pow>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	ed2d 8b06 	vpush	{d8-d10}
 800aec8:	b08d      	sub	sp, #52	; 0x34
 800aeca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800aece:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800aed2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800aed6:	ea56 0100 	orrs.w	r1, r6, r0
 800aeda:	ec53 2b10 	vmov	r2, r3, d0
 800aede:	f000 84d1 	beq.w	800b884 <__ieee754_pow+0x9c4>
 800aee2:	497f      	ldr	r1, [pc, #508]	; (800b0e0 <__ieee754_pow+0x220>)
 800aee4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800aee8:	428c      	cmp	r4, r1
 800aeea:	ee10 8a10 	vmov	r8, s0
 800aeee:	4699      	mov	r9, r3
 800aef0:	dc09      	bgt.n	800af06 <__ieee754_pow+0x46>
 800aef2:	d103      	bne.n	800aefc <__ieee754_pow+0x3c>
 800aef4:	b97a      	cbnz	r2, 800af16 <__ieee754_pow+0x56>
 800aef6:	42a6      	cmp	r6, r4
 800aef8:	dd02      	ble.n	800af00 <__ieee754_pow+0x40>
 800aefa:	e00c      	b.n	800af16 <__ieee754_pow+0x56>
 800aefc:	428e      	cmp	r6, r1
 800aefe:	dc02      	bgt.n	800af06 <__ieee754_pow+0x46>
 800af00:	428e      	cmp	r6, r1
 800af02:	d110      	bne.n	800af26 <__ieee754_pow+0x66>
 800af04:	b178      	cbz	r0, 800af26 <__ieee754_pow+0x66>
 800af06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af0e:	ea54 0308 	orrs.w	r3, r4, r8
 800af12:	f000 84b7 	beq.w	800b884 <__ieee754_pow+0x9c4>
 800af16:	4873      	ldr	r0, [pc, #460]	; (800b0e4 <__ieee754_pow+0x224>)
 800af18:	b00d      	add	sp, #52	; 0x34
 800af1a:	ecbd 8b06 	vpop	{d8-d10}
 800af1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af22:	f001 bead 	b.w	800cc80 <nan>
 800af26:	f1b9 0f00 	cmp.w	r9, #0
 800af2a:	da36      	bge.n	800af9a <__ieee754_pow+0xda>
 800af2c:	496e      	ldr	r1, [pc, #440]	; (800b0e8 <__ieee754_pow+0x228>)
 800af2e:	428e      	cmp	r6, r1
 800af30:	dc51      	bgt.n	800afd6 <__ieee754_pow+0x116>
 800af32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800af36:	428e      	cmp	r6, r1
 800af38:	f340 84af 	ble.w	800b89a <__ieee754_pow+0x9da>
 800af3c:	1531      	asrs	r1, r6, #20
 800af3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800af42:	2914      	cmp	r1, #20
 800af44:	dd0f      	ble.n	800af66 <__ieee754_pow+0xa6>
 800af46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800af4a:	fa20 fc01 	lsr.w	ip, r0, r1
 800af4e:	fa0c f101 	lsl.w	r1, ip, r1
 800af52:	4281      	cmp	r1, r0
 800af54:	f040 84a1 	bne.w	800b89a <__ieee754_pow+0x9da>
 800af58:	f00c 0c01 	and.w	ip, ip, #1
 800af5c:	f1cc 0102 	rsb	r1, ip, #2
 800af60:	9100      	str	r1, [sp, #0]
 800af62:	b180      	cbz	r0, 800af86 <__ieee754_pow+0xc6>
 800af64:	e059      	b.n	800b01a <__ieee754_pow+0x15a>
 800af66:	2800      	cmp	r0, #0
 800af68:	d155      	bne.n	800b016 <__ieee754_pow+0x156>
 800af6a:	f1c1 0114 	rsb	r1, r1, #20
 800af6e:	fa46 fc01 	asr.w	ip, r6, r1
 800af72:	fa0c f101 	lsl.w	r1, ip, r1
 800af76:	42b1      	cmp	r1, r6
 800af78:	f040 848c 	bne.w	800b894 <__ieee754_pow+0x9d4>
 800af7c:	f00c 0c01 	and.w	ip, ip, #1
 800af80:	f1cc 0102 	rsb	r1, ip, #2
 800af84:	9100      	str	r1, [sp, #0]
 800af86:	4959      	ldr	r1, [pc, #356]	; (800b0ec <__ieee754_pow+0x22c>)
 800af88:	428e      	cmp	r6, r1
 800af8a:	d12d      	bne.n	800afe8 <__ieee754_pow+0x128>
 800af8c:	2f00      	cmp	r7, #0
 800af8e:	da79      	bge.n	800b084 <__ieee754_pow+0x1c4>
 800af90:	4956      	ldr	r1, [pc, #344]	; (800b0ec <__ieee754_pow+0x22c>)
 800af92:	2000      	movs	r0, #0
 800af94:	f7f5 fc7a 	bl	800088c <__aeabi_ddiv>
 800af98:	e016      	b.n	800afc8 <__ieee754_pow+0x108>
 800af9a:	2100      	movs	r1, #0
 800af9c:	9100      	str	r1, [sp, #0]
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d13b      	bne.n	800b01a <__ieee754_pow+0x15a>
 800afa2:	494f      	ldr	r1, [pc, #316]	; (800b0e0 <__ieee754_pow+0x220>)
 800afa4:	428e      	cmp	r6, r1
 800afa6:	d1ee      	bne.n	800af86 <__ieee754_pow+0xc6>
 800afa8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afb0:	ea53 0308 	orrs.w	r3, r3, r8
 800afb4:	f000 8466 	beq.w	800b884 <__ieee754_pow+0x9c4>
 800afb8:	4b4d      	ldr	r3, [pc, #308]	; (800b0f0 <__ieee754_pow+0x230>)
 800afba:	429c      	cmp	r4, r3
 800afbc:	dd0d      	ble.n	800afda <__ieee754_pow+0x11a>
 800afbe:	2f00      	cmp	r7, #0
 800afc0:	f280 8464 	bge.w	800b88c <__ieee754_pow+0x9cc>
 800afc4:	2000      	movs	r0, #0
 800afc6:	2100      	movs	r1, #0
 800afc8:	ec41 0b10 	vmov	d0, r0, r1
 800afcc:	b00d      	add	sp, #52	; 0x34
 800afce:	ecbd 8b06 	vpop	{d8-d10}
 800afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd6:	2102      	movs	r1, #2
 800afd8:	e7e0      	b.n	800af9c <__ieee754_pow+0xdc>
 800afda:	2f00      	cmp	r7, #0
 800afdc:	daf2      	bge.n	800afc4 <__ieee754_pow+0x104>
 800afde:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800afe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afe6:	e7ef      	b.n	800afc8 <__ieee754_pow+0x108>
 800afe8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800afec:	d104      	bne.n	800aff8 <__ieee754_pow+0x138>
 800afee:	4610      	mov	r0, r2
 800aff0:	4619      	mov	r1, r3
 800aff2:	f7f5 fb21 	bl	8000638 <__aeabi_dmul>
 800aff6:	e7e7      	b.n	800afc8 <__ieee754_pow+0x108>
 800aff8:	493e      	ldr	r1, [pc, #248]	; (800b0f4 <__ieee754_pow+0x234>)
 800affa:	428f      	cmp	r7, r1
 800affc:	d10d      	bne.n	800b01a <__ieee754_pow+0x15a>
 800affe:	f1b9 0f00 	cmp.w	r9, #0
 800b002:	db0a      	blt.n	800b01a <__ieee754_pow+0x15a>
 800b004:	ec43 2b10 	vmov	d0, r2, r3
 800b008:	b00d      	add	sp, #52	; 0x34
 800b00a:	ecbd 8b06 	vpop	{d8-d10}
 800b00e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b012:	f000 be83 	b.w	800bd1c <__ieee754_sqrt>
 800b016:	2100      	movs	r1, #0
 800b018:	9100      	str	r1, [sp, #0]
 800b01a:	ec43 2b10 	vmov	d0, r2, r3
 800b01e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b022:	f001 fd99 	bl	800cb58 <fabs>
 800b026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b02a:	ec51 0b10 	vmov	r0, r1, d0
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	d12a      	bne.n	800b08a <__ieee754_pow+0x1ca>
 800b034:	b12c      	cbz	r4, 800b042 <__ieee754_pow+0x182>
 800b036:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b0ec <__ieee754_pow+0x22c>
 800b03a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b03e:	45e6      	cmp	lr, ip
 800b040:	d123      	bne.n	800b08a <__ieee754_pow+0x1ca>
 800b042:	2f00      	cmp	r7, #0
 800b044:	da05      	bge.n	800b052 <__ieee754_pow+0x192>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	2000      	movs	r0, #0
 800b04c:	4927      	ldr	r1, [pc, #156]	; (800b0ec <__ieee754_pow+0x22c>)
 800b04e:	f7f5 fc1d 	bl	800088c <__aeabi_ddiv>
 800b052:	f1b9 0f00 	cmp.w	r9, #0
 800b056:	dab7      	bge.n	800afc8 <__ieee754_pow+0x108>
 800b058:	9b00      	ldr	r3, [sp, #0]
 800b05a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b05e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b062:	4323      	orrs	r3, r4
 800b064:	d108      	bne.n	800b078 <__ieee754_pow+0x1b8>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4610      	mov	r0, r2
 800b06c:	4619      	mov	r1, r3
 800b06e:	f7f5 f92b 	bl	80002c8 <__aeabi_dsub>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	e78d      	b.n	800af94 <__ieee754_pow+0xd4>
 800b078:	9b00      	ldr	r3, [sp, #0]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d1a4      	bne.n	800afc8 <__ieee754_pow+0x108>
 800b07e:	4602      	mov	r2, r0
 800b080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b084:	4610      	mov	r0, r2
 800b086:	4619      	mov	r1, r3
 800b088:	e79e      	b.n	800afc8 <__ieee754_pow+0x108>
 800b08a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b08e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b092:	950a      	str	r5, [sp, #40]	; 0x28
 800b094:	9d00      	ldr	r5, [sp, #0]
 800b096:	46ac      	mov	ip, r5
 800b098:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b09a:	ea5c 0505 	orrs.w	r5, ip, r5
 800b09e:	d0e4      	beq.n	800b06a <__ieee754_pow+0x1aa>
 800b0a0:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <__ieee754_pow+0x238>)
 800b0a2:	429e      	cmp	r6, r3
 800b0a4:	f340 80fc 	ble.w	800b2a0 <__ieee754_pow+0x3e0>
 800b0a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0ac:	429e      	cmp	r6, r3
 800b0ae:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <__ieee754_pow+0x230>)
 800b0b0:	dd07      	ble.n	800b0c2 <__ieee754_pow+0x202>
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	dc0a      	bgt.n	800b0cc <__ieee754_pow+0x20c>
 800b0b6:	2f00      	cmp	r7, #0
 800b0b8:	da84      	bge.n	800afc4 <__ieee754_pow+0x104>
 800b0ba:	a307      	add	r3, pc, #28	; (adr r3, 800b0d8 <__ieee754_pow+0x218>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	e795      	b.n	800afee <__ieee754_pow+0x12e>
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	dbf7      	blt.n	800b0b6 <__ieee754_pow+0x1f6>
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <__ieee754_pow+0x22c>)
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	dd17      	ble.n	800b0fc <__ieee754_pow+0x23c>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	dcf4      	bgt.n	800b0ba <__ieee754_pow+0x1fa>
 800b0d0:	e778      	b.n	800afc4 <__ieee754_pow+0x104>
 800b0d2:	bf00      	nop
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	8800759c 	.word	0x8800759c
 800b0dc:	7e37e43c 	.word	0x7e37e43c
 800b0e0:	7ff00000 	.word	0x7ff00000
 800b0e4:	0800d32f 	.word	0x0800d32f
 800b0e8:	433fffff 	.word	0x433fffff
 800b0ec:	3ff00000 	.word	0x3ff00000
 800b0f0:	3fefffff 	.word	0x3fefffff
 800b0f4:	3fe00000 	.word	0x3fe00000
 800b0f8:	41e00000 	.word	0x41e00000
 800b0fc:	4b64      	ldr	r3, [pc, #400]	; (800b290 <__ieee754_pow+0x3d0>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	f7f5 f8e2 	bl	80002c8 <__aeabi_dsub>
 800b104:	a356      	add	r3, pc, #344	; (adr r3, 800b260 <__ieee754_pow+0x3a0>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	f7f5 fa93 	bl	8000638 <__aeabi_dmul>
 800b112:	a355      	add	r3, pc, #340	; (adr r3, 800b268 <__ieee754_pow+0x3a8>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	4606      	mov	r6, r0
 800b11a:	460f      	mov	r7, r1
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 fa8a 	bl	8000638 <__aeabi_dmul>
 800b124:	4b5b      	ldr	r3, [pc, #364]	; (800b294 <__ieee754_pow+0x3d4>)
 800b126:	4682      	mov	sl, r0
 800b128:	468b      	mov	fp, r1
 800b12a:	2200      	movs	r2, #0
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	f7f5 fa82 	bl	8000638 <__aeabi_dmul>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	a14d      	add	r1, pc, #308	; (adr r1, 800b270 <__ieee754_pow+0x3b0>)
 800b13a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13e:	f7f5 f8c3 	bl	80002c8 <__aeabi_dsub>
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	f7f5 fa77 	bl	8000638 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	2000      	movs	r0, #0
 800b150:	4951      	ldr	r1, [pc, #324]	; (800b298 <__ieee754_pow+0x3d8>)
 800b152:	f7f5 f8b9 	bl	80002c8 <__aeabi_dsub>
 800b156:	4622      	mov	r2, r4
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	462b      	mov	r3, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 fa69 	bl	8000638 <__aeabi_dmul>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f5 fa63 	bl	8000638 <__aeabi_dmul>
 800b172:	a341      	add	r3, pc, #260	; (adr r3, 800b278 <__ieee754_pow+0x3b8>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 fa5e 	bl	8000638 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 f8a0 	bl	80002c8 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 f89a 	bl	80002cc <__adddf3>
 800b198:	2400      	movs	r4, #0
 800b19a:	4632      	mov	r2, r6
 800b19c:	463b      	mov	r3, r7
 800b19e:	4620      	mov	r0, r4
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	f7f5 f891 	bl	80002c8 <__aeabi_dsub>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 f88b 	bl	80002c8 <__aeabi_dsub>
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	4682      	mov	sl, r0
 800b1bc:	468b      	mov	fp, r1
 800b1be:	f040 81f1 	bne.w	800b5a4 <__ieee754_pow+0x6e4>
 800b1c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b280 <__ieee754_pow+0x3c0>
 800b1c6:	eeb0 8a47 	vmov.f32	s16, s14
 800b1ca:	eef0 8a67 	vmov.f32	s17, s15
 800b1ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1dc:	f7f5 f874 	bl	80002c8 <__aeabi_dsub>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4689      	mov	r9, r1
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	f7f5 fa20 	bl	8000638 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 f864 	bl	80002cc <__adddf3>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 fa12 	bl	8000638 <__aeabi_dmul>
 800b214:	460b      	mov	r3, r1
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4602      	mov	r2, r0
 800b21c:	4649      	mov	r1, r9
 800b21e:	4640      	mov	r0, r8
 800b220:	f7f5 f854 	bl	80002cc <__adddf3>
 800b224:	4b1d      	ldr	r3, [pc, #116]	; (800b29c <__ieee754_pow+0x3dc>)
 800b226:	4299      	cmp	r1, r3
 800b228:	ec45 4b19 	vmov	d9, r4, r5
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	468b      	mov	fp, r1
 800b232:	f340 82fe 	ble.w	800b832 <__ieee754_pow+0x972>
 800b236:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b23a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b23e:	4303      	orrs	r3, r0
 800b240:	f000 81f0 	beq.w	800b624 <__ieee754_pow+0x764>
 800b244:	a310      	add	r3, pc, #64	; (adr r3, 800b288 <__ieee754_pow+0x3c8>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	ec51 0b18 	vmov	r0, r1, d8
 800b24e:	f7f5 f9f3 	bl	8000638 <__aeabi_dmul>
 800b252:	a30d      	add	r3, pc, #52	; (adr r3, 800b288 <__ieee754_pow+0x3c8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	e6cb      	b.n	800aff2 <__ieee754_pow+0x132>
 800b25a:	bf00      	nop
 800b25c:	f3af 8000 	nop.w
 800b260:	60000000 	.word	0x60000000
 800b264:	3ff71547 	.word	0x3ff71547
 800b268:	f85ddf44 	.word	0xf85ddf44
 800b26c:	3e54ae0b 	.word	0x3e54ae0b
 800b270:	55555555 	.word	0x55555555
 800b274:	3fd55555 	.word	0x3fd55555
 800b278:	652b82fe 	.word	0x652b82fe
 800b27c:	3ff71547 	.word	0x3ff71547
 800b280:	00000000 	.word	0x00000000
 800b284:	bff00000 	.word	0xbff00000
 800b288:	8800759c 	.word	0x8800759c
 800b28c:	7e37e43c 	.word	0x7e37e43c
 800b290:	3ff00000 	.word	0x3ff00000
 800b294:	3fd00000 	.word	0x3fd00000
 800b298:	3fe00000 	.word	0x3fe00000
 800b29c:	408fffff 	.word	0x408fffff
 800b2a0:	4bd7      	ldr	r3, [pc, #860]	; (800b600 <__ieee754_pow+0x740>)
 800b2a2:	ea03 0309 	and.w	r3, r3, r9
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	b92b      	cbnz	r3, 800b2b6 <__ieee754_pow+0x3f6>
 800b2aa:	4bd6      	ldr	r3, [pc, #856]	; (800b604 <__ieee754_pow+0x744>)
 800b2ac:	f7f5 f9c4 	bl	8000638 <__aeabi_dmul>
 800b2b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	1523      	asrs	r3, r4, #20
 800b2b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2bc:	4413      	add	r3, r2
 800b2be:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c0:	4bd1      	ldr	r3, [pc, #836]	; (800b608 <__ieee754_pow+0x748>)
 800b2c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2ca:	429c      	cmp	r4, r3
 800b2cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2d0:	dd08      	ble.n	800b2e4 <__ieee754_pow+0x424>
 800b2d2:	4bce      	ldr	r3, [pc, #824]	; (800b60c <__ieee754_pow+0x74c>)
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	f340 8163 	ble.w	800b5a0 <__ieee754_pow+0x6e0>
 800b2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2dc:	3301      	adds	r3, #1
 800b2de:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2e4:	2400      	movs	r4, #0
 800b2e6:	00e3      	lsls	r3, r4, #3
 800b2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ea:	4bc9      	ldr	r3, [pc, #804]	; (800b610 <__ieee754_pow+0x750>)
 800b2ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2f0:	ed93 7b00 	vldr	d7, [r3]
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	ec53 2b17 	vmov	r2, r3, d7
 800b2fa:	eeb0 8a47 	vmov.f32	s16, s14
 800b2fe:	eef0 8a67 	vmov.f32	s17, s15
 800b302:	4682      	mov	sl, r0
 800b304:	f7f4 ffe0 	bl	80002c8 <__aeabi_dsub>
 800b308:	4652      	mov	r2, sl
 800b30a:	4606      	mov	r6, r0
 800b30c:	460f      	mov	r7, r1
 800b30e:	462b      	mov	r3, r5
 800b310:	ec51 0b18 	vmov	r0, r1, d8
 800b314:	f7f4 ffda 	bl	80002cc <__adddf3>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	2000      	movs	r0, #0
 800b31e:	49bd      	ldr	r1, [pc, #756]	; (800b614 <__ieee754_pow+0x754>)
 800b320:	f7f5 fab4 	bl	800088c <__aeabi_ddiv>
 800b324:	ec41 0b19 	vmov	d9, r0, r1
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 f982 	bl	8000638 <__aeabi_dmul>
 800b334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b33c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b340:	2300      	movs	r3, #0
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b348:	46ab      	mov	fp, r5
 800b34a:	106d      	asrs	r5, r5, #1
 800b34c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b350:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b354:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b358:	2200      	movs	r2, #0
 800b35a:	4640      	mov	r0, r8
 800b35c:	4649      	mov	r1, r9
 800b35e:	4614      	mov	r4, r2
 800b360:	461d      	mov	r5, r3
 800b362:	f7f5 f969 	bl	8000638 <__aeabi_dmul>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4630      	mov	r0, r6
 800b36c:	4639      	mov	r1, r7
 800b36e:	f7f4 ffab 	bl	80002c8 <__aeabi_dsub>
 800b372:	ec53 2b18 	vmov	r2, r3, d8
 800b376:	4606      	mov	r6, r0
 800b378:	460f      	mov	r7, r1
 800b37a:	4620      	mov	r0, r4
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7f4 ffa3 	bl	80002c8 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	f7f4 ff9d 	bl	80002c8 <__aeabi_dsub>
 800b38e:	4642      	mov	r2, r8
 800b390:	464b      	mov	r3, r9
 800b392:	f7f5 f951 	bl	8000638 <__aeabi_dmul>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4630      	mov	r0, r6
 800b39c:	4639      	mov	r1, r7
 800b39e:	f7f4 ff93 	bl	80002c8 <__aeabi_dsub>
 800b3a2:	ec53 2b19 	vmov	r2, r3, d9
 800b3a6:	f7f5 f947 	bl	8000638 <__aeabi_dmul>
 800b3aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ae:	ec41 0b18 	vmov	d8, r0, r1
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	f7f5 f93f 	bl	8000638 <__aeabi_dmul>
 800b3ba:	a37d      	add	r3, pc, #500	; (adr r3, 800b5b0 <__ieee754_pow+0x6f0>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	f7f5 f938 	bl	8000638 <__aeabi_dmul>
 800b3c8:	a37b      	add	r3, pc, #492	; (adr r3, 800b5b8 <__ieee754_pow+0x6f8>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f4 ff7d 	bl	80002cc <__adddf3>
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	f7f5 f92f 	bl	8000638 <__aeabi_dmul>
 800b3da:	a379      	add	r3, pc, #484	; (adr r3, 800b5c0 <__ieee754_pow+0x700>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 ff74 	bl	80002cc <__adddf3>
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	462b      	mov	r3, r5
 800b3e8:	f7f5 f926 	bl	8000638 <__aeabi_dmul>
 800b3ec:	a376      	add	r3, pc, #472	; (adr r3, 800b5c8 <__ieee754_pow+0x708>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f4 ff6b 	bl	80002cc <__adddf3>
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	f7f5 f91d 	bl	8000638 <__aeabi_dmul>
 800b3fe:	a374      	add	r3, pc, #464	; (adr r3, 800b5d0 <__ieee754_pow+0x710>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 ff62 	bl	80002cc <__adddf3>
 800b408:	4622      	mov	r2, r4
 800b40a:	462b      	mov	r3, r5
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	a371      	add	r3, pc, #452	; (adr r3, 800b5d8 <__ieee754_pow+0x718>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 ff59 	bl	80002cc <__adddf3>
 800b41a:	4622      	mov	r2, r4
 800b41c:	4606      	mov	r6, r0
 800b41e:	460f      	mov	r7, r1
 800b420:	462b      	mov	r3, r5
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 f907 	bl	8000638 <__aeabi_dmul>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f5 f901 	bl	8000638 <__aeabi_dmul>
 800b436:	4642      	mov	r2, r8
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	464b      	mov	r3, r9
 800b43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b442:	f7f4 ff43 	bl	80002cc <__adddf3>
 800b446:	ec53 2b18 	vmov	r2, r3, d8
 800b44a:	f7f5 f8f5 	bl	8000638 <__aeabi_dmul>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f4 ff3b 	bl	80002cc <__adddf3>
 800b456:	4642      	mov	r2, r8
 800b458:	4682      	mov	sl, r0
 800b45a:	468b      	mov	fp, r1
 800b45c:	464b      	mov	r3, r9
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 f8e9 	bl	8000638 <__aeabi_dmul>
 800b466:	4b6c      	ldr	r3, [pc, #432]	; (800b618 <__ieee754_pow+0x758>)
 800b468:	2200      	movs	r2, #0
 800b46a:	4606      	mov	r6, r0
 800b46c:	460f      	mov	r7, r1
 800b46e:	f7f4 ff2d 	bl	80002cc <__adddf3>
 800b472:	4652      	mov	r2, sl
 800b474:	465b      	mov	r3, fp
 800b476:	f7f4 ff29 	bl	80002cc <__adddf3>
 800b47a:	9c04      	ldr	r4, [sp, #16]
 800b47c:	460d      	mov	r5, r1
 800b47e:	4622      	mov	r2, r4
 800b480:	460b      	mov	r3, r1
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f5 f8d7 	bl	8000638 <__aeabi_dmul>
 800b48a:	4b63      	ldr	r3, [pc, #396]	; (800b618 <__ieee754_pow+0x758>)
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	2200      	movs	r2, #0
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f4 ff17 	bl	80002c8 <__aeabi_dsub>
 800b49a:	4632      	mov	r2, r6
 800b49c:	463b      	mov	r3, r7
 800b49e:	f7f4 ff13 	bl	80002c8 <__aeabi_dsub>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	f7f4 ff0d 	bl	80002c8 <__aeabi_dsub>
 800b4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4b2:	f7f5 f8c1 	bl	8000638 <__aeabi_dmul>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	460f      	mov	r7, r1
 800b4bc:	462b      	mov	r3, r5
 800b4be:	ec51 0b18 	vmov	r0, r1, d8
 800b4c2:	f7f5 f8b9 	bl	8000638 <__aeabi_dmul>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f4 fefd 	bl	80002cc <__adddf3>
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4640      	mov	r0, r8
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f4 fef5 	bl	80002cc <__adddf3>
 800b4e2:	9c04      	ldr	r4, [sp, #16]
 800b4e4:	a33e      	add	r3, pc, #248	; (adr r3, 800b5e0 <__ieee754_pow+0x720>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	f7f5 f8a3 	bl	8000638 <__aeabi_dmul>
 800b4f2:	4642      	mov	r2, r8
 800b4f4:	ec41 0b18 	vmov	d8, r0, r1
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f4 fee3 	bl	80002c8 <__aeabi_dsub>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f4 fedd 	bl	80002c8 <__aeabi_dsub>
 800b50e:	a336      	add	r3, pc, #216	; (adr r3, 800b5e8 <__ieee754_pow+0x728>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f7f5 f890 	bl	8000638 <__aeabi_dmul>
 800b518:	a335      	add	r3, pc, #212	; (adr r3, 800b5f0 <__ieee754_pow+0x730>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	f7f5 f887 	bl	8000638 <__aeabi_dmul>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f4 fecb 	bl	80002cc <__adddf3>
 800b536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b538:	4b38      	ldr	r3, [pc, #224]	; (800b61c <__ieee754_pow+0x75c>)
 800b53a:	4413      	add	r3, r2
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f4 fec4 	bl	80002cc <__adddf3>
 800b544:	4682      	mov	sl, r0
 800b546:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b548:	468b      	mov	fp, r1
 800b54a:	f7f5 f80b 	bl	8000564 <__aeabi_i2d>
 800b54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b550:	4b33      	ldr	r3, [pc, #204]	; (800b620 <__ieee754_pow+0x760>)
 800b552:	4413      	add	r3, r2
 800b554:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b558:	4606      	mov	r6, r0
 800b55a:	460f      	mov	r7, r1
 800b55c:	4652      	mov	r2, sl
 800b55e:	465b      	mov	r3, fp
 800b560:	ec51 0b18 	vmov	r0, r1, d8
 800b564:	f7f4 feb2 	bl	80002cc <__adddf3>
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	f7f4 feae 	bl	80002cc <__adddf3>
 800b570:	4632      	mov	r2, r6
 800b572:	463b      	mov	r3, r7
 800b574:	f7f4 feaa 	bl	80002cc <__adddf3>
 800b578:	9c04      	ldr	r4, [sp, #16]
 800b57a:	4632      	mov	r2, r6
 800b57c:	463b      	mov	r3, r7
 800b57e:	4620      	mov	r0, r4
 800b580:	460d      	mov	r5, r1
 800b582:	f7f4 fea1 	bl	80002c8 <__aeabi_dsub>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	f7f4 fe9d 	bl	80002c8 <__aeabi_dsub>
 800b58e:	ec53 2b18 	vmov	r2, r3, d8
 800b592:	f7f4 fe99 	bl	80002c8 <__aeabi_dsub>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	4650      	mov	r0, sl
 800b59c:	4659      	mov	r1, fp
 800b59e:	e606      	b.n	800b1ae <__ieee754_pow+0x2ee>
 800b5a0:	2401      	movs	r4, #1
 800b5a2:	e6a0      	b.n	800b2e6 <__ieee754_pow+0x426>
 800b5a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b5f8 <__ieee754_pow+0x738>
 800b5a8:	e60d      	b.n	800b1c6 <__ieee754_pow+0x306>
 800b5aa:	bf00      	nop
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	4a454eef 	.word	0x4a454eef
 800b5b4:	3fca7e28 	.word	0x3fca7e28
 800b5b8:	93c9db65 	.word	0x93c9db65
 800b5bc:	3fcd864a 	.word	0x3fcd864a
 800b5c0:	a91d4101 	.word	0xa91d4101
 800b5c4:	3fd17460 	.word	0x3fd17460
 800b5c8:	518f264d 	.word	0x518f264d
 800b5cc:	3fd55555 	.word	0x3fd55555
 800b5d0:	db6fabff 	.word	0xdb6fabff
 800b5d4:	3fdb6db6 	.word	0x3fdb6db6
 800b5d8:	33333303 	.word	0x33333303
 800b5dc:	3fe33333 	.word	0x3fe33333
 800b5e0:	e0000000 	.word	0xe0000000
 800b5e4:	3feec709 	.word	0x3feec709
 800b5e8:	dc3a03fd 	.word	0xdc3a03fd
 800b5ec:	3feec709 	.word	0x3feec709
 800b5f0:	145b01f5 	.word	0x145b01f5
 800b5f4:	be3e2fe0 	.word	0xbe3e2fe0
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	43400000 	.word	0x43400000
 800b608:	0003988e 	.word	0x0003988e
 800b60c:	000bb679 	.word	0x000bb679
 800b610:	0800d390 	.word	0x0800d390
 800b614:	3ff00000 	.word	0x3ff00000
 800b618:	40080000 	.word	0x40080000
 800b61c:	0800d3b0 	.word	0x0800d3b0
 800b620:	0800d3a0 	.word	0x0800d3a0
 800b624:	a3b5      	add	r3, pc, #724	; (adr r3, 800b8fc <__ieee754_pow+0xa3c>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	4640      	mov	r0, r8
 800b62c:	4649      	mov	r1, r9
 800b62e:	f7f4 fe4d 	bl	80002cc <__adddf3>
 800b632:	4622      	mov	r2, r4
 800b634:	ec41 0b1a 	vmov	d10, r0, r1
 800b638:	462b      	mov	r3, r5
 800b63a:	4630      	mov	r0, r6
 800b63c:	4639      	mov	r1, r7
 800b63e:	f7f4 fe43 	bl	80002c8 <__aeabi_dsub>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	ec51 0b1a 	vmov	r0, r1, d10
 800b64a:	f7f5 fa85 	bl	8000b58 <__aeabi_dcmpgt>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f47f adf8 	bne.w	800b244 <__ieee754_pow+0x384>
 800b654:	4aa4      	ldr	r2, [pc, #656]	; (800b8e8 <__ieee754_pow+0xa28>)
 800b656:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b65a:	4293      	cmp	r3, r2
 800b65c:	f340 810b 	ble.w	800b876 <__ieee754_pow+0x9b6>
 800b660:	151b      	asrs	r3, r3, #20
 800b662:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b666:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b66a:	fa4a f303 	asr.w	r3, sl, r3
 800b66e:	445b      	add	r3, fp
 800b670:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b674:	4e9d      	ldr	r6, [pc, #628]	; (800b8ec <__ieee754_pow+0xa2c>)
 800b676:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b67a:	4116      	asrs	r6, r2
 800b67c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b680:	2000      	movs	r0, #0
 800b682:	ea23 0106 	bic.w	r1, r3, r6
 800b686:	f1c2 0214 	rsb	r2, r2, #20
 800b68a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b68e:	fa4a fa02 	asr.w	sl, sl, r2
 800b692:	f1bb 0f00 	cmp.w	fp, #0
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	bfb8      	it	lt
 800b6a0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b6a4:	f7f4 fe10 	bl	80002c8 <__aeabi_dsub>
 800b6a8:	ec41 0b19 	vmov	d9, r0, r1
 800b6ac:	4642      	mov	r2, r8
 800b6ae:	464b      	mov	r3, r9
 800b6b0:	ec51 0b19 	vmov	r0, r1, d9
 800b6b4:	f7f4 fe0a 	bl	80002cc <__adddf3>
 800b6b8:	2400      	movs	r4, #0
 800b6ba:	a379      	add	r3, pc, #484	; (adr r3, 800b8a0 <__ieee754_pow+0x9e0>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	f7f4 ffb8 	bl	8000638 <__aeabi_dmul>
 800b6c8:	ec53 2b19 	vmov	r2, r3, d9
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	460f      	mov	r7, r1
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	f7f4 fdf8 	bl	80002c8 <__aeabi_dsub>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4640      	mov	r0, r8
 800b6de:	4649      	mov	r1, r9
 800b6e0:	f7f4 fdf2 	bl	80002c8 <__aeabi_dsub>
 800b6e4:	a370      	add	r3, pc, #448	; (adr r3, 800b8a8 <__ieee754_pow+0x9e8>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	a370      	add	r3, pc, #448	; (adr r3, 800b8b0 <__ieee754_pow+0x9f0>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	4680      	mov	r8, r0
 800b6f6:	4689      	mov	r9, r1
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f7f4 ff9c 	bl	8000638 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4640      	mov	r0, r8
 800b706:	4649      	mov	r1, r9
 800b708:	f7f4 fde0 	bl	80002cc <__adddf3>
 800b70c:	4604      	mov	r4, r0
 800b70e:	460d      	mov	r5, r1
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f4 fdd8 	bl	80002cc <__adddf3>
 800b71c:	4632      	mov	r2, r6
 800b71e:	463b      	mov	r3, r7
 800b720:	4680      	mov	r8, r0
 800b722:	4689      	mov	r9, r1
 800b724:	f7f4 fdd0 	bl	80002c8 <__aeabi_dsub>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4620      	mov	r0, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	f7f4 fdca 	bl	80002c8 <__aeabi_dsub>
 800b734:	4642      	mov	r2, r8
 800b736:	4606      	mov	r6, r0
 800b738:	460f      	mov	r7, r1
 800b73a:	464b      	mov	r3, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	4649      	mov	r1, r9
 800b740:	f7f4 ff7a 	bl	8000638 <__aeabi_dmul>
 800b744:	a35c      	add	r3, pc, #368	; (adr r3, 800b8b8 <__ieee754_pow+0x9f8>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	4604      	mov	r4, r0
 800b74c:	460d      	mov	r5, r1
 800b74e:	f7f4 ff73 	bl	8000638 <__aeabi_dmul>
 800b752:	a35b      	add	r3, pc, #364	; (adr r3, 800b8c0 <__ieee754_pow+0xa00>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 fdb6 	bl	80002c8 <__aeabi_dsub>
 800b75c:	4622      	mov	r2, r4
 800b75e:	462b      	mov	r3, r5
 800b760:	f7f4 ff6a 	bl	8000638 <__aeabi_dmul>
 800b764:	a358      	add	r3, pc, #352	; (adr r3, 800b8c8 <__ieee754_pow+0xa08>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fdaf 	bl	80002cc <__adddf3>
 800b76e:	4622      	mov	r2, r4
 800b770:	462b      	mov	r3, r5
 800b772:	f7f4 ff61 	bl	8000638 <__aeabi_dmul>
 800b776:	a356      	add	r3, pc, #344	; (adr r3, 800b8d0 <__ieee754_pow+0xa10>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 fda4 	bl	80002c8 <__aeabi_dsub>
 800b780:	4622      	mov	r2, r4
 800b782:	462b      	mov	r3, r5
 800b784:	f7f4 ff58 	bl	8000638 <__aeabi_dmul>
 800b788:	a353      	add	r3, pc, #332	; (adr r3, 800b8d8 <__ieee754_pow+0xa18>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 fd9d 	bl	80002cc <__adddf3>
 800b792:	4622      	mov	r2, r4
 800b794:	462b      	mov	r3, r5
 800b796:	f7f4 ff4f 	bl	8000638 <__aeabi_dmul>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f4 fd91 	bl	80002c8 <__aeabi_dsub>
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 ff41 	bl	8000638 <__aeabi_dmul>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	ec41 0b19 	vmov	d9, r0, r1
 800b7bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f7f4 fd80 	bl	80002c8 <__aeabi_dsub>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	ec51 0b19 	vmov	r0, r1, d9
 800b7d0:	f7f5 f85c 	bl	800088c <__aeabi_ddiv>
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7f4 ff2a 	bl	8000638 <__aeabi_dmul>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	f7f4 fd70 	bl	80002cc <__adddf3>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	f7f4 fd68 	bl	80002c8 <__aeabi_dsub>
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	f7f4 fd64 	bl	80002c8 <__aeabi_dsub>
 800b800:	460b      	mov	r3, r1
 800b802:	4602      	mov	r2, r0
 800b804:	493a      	ldr	r1, [pc, #232]	; (800b8f0 <__ieee754_pow+0xa30>)
 800b806:	2000      	movs	r0, #0
 800b808:	f7f4 fd5e 	bl	80002c8 <__aeabi_dsub>
 800b80c:	e9cd 0100 	strd	r0, r1, [sp]
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81a:	da2f      	bge.n	800b87c <__ieee754_pow+0x9bc>
 800b81c:	4650      	mov	r0, sl
 800b81e:	ed9d 0b00 	vldr	d0, [sp]
 800b822:	f001 fac1 	bl	800cda8 <scalbn>
 800b826:	ec51 0b10 	vmov	r0, r1, d0
 800b82a:	ec53 2b18 	vmov	r2, r3, d8
 800b82e:	f7ff bbe0 	b.w	800aff2 <__ieee754_pow+0x132>
 800b832:	4b30      	ldr	r3, [pc, #192]	; (800b8f4 <__ieee754_pow+0xa34>)
 800b834:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b838:	429e      	cmp	r6, r3
 800b83a:	f77f af0b 	ble.w	800b654 <__ieee754_pow+0x794>
 800b83e:	4b2e      	ldr	r3, [pc, #184]	; (800b8f8 <__ieee754_pow+0xa38>)
 800b840:	440b      	add	r3, r1
 800b842:	4303      	orrs	r3, r0
 800b844:	d00b      	beq.n	800b85e <__ieee754_pow+0x99e>
 800b846:	a326      	add	r3, pc, #152	; (adr r3, 800b8e0 <__ieee754_pow+0xa20>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	ec51 0b18 	vmov	r0, r1, d8
 800b850:	f7f4 fef2 	bl	8000638 <__aeabi_dmul>
 800b854:	a322      	add	r3, pc, #136	; (adr r3, 800b8e0 <__ieee754_pow+0xa20>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7ff bbca 	b.w	800aff2 <__ieee754_pow+0x132>
 800b85e:	4622      	mov	r2, r4
 800b860:	462b      	mov	r3, r5
 800b862:	f7f4 fd31 	bl	80002c8 <__aeabi_dsub>
 800b866:	4642      	mov	r2, r8
 800b868:	464b      	mov	r3, r9
 800b86a:	f7f5 f96b 	bl	8000b44 <__aeabi_dcmpge>
 800b86e:	2800      	cmp	r0, #0
 800b870:	f43f aef0 	beq.w	800b654 <__ieee754_pow+0x794>
 800b874:	e7e7      	b.n	800b846 <__ieee754_pow+0x986>
 800b876:	f04f 0a00 	mov.w	sl, #0
 800b87a:	e717      	b.n	800b6ac <__ieee754_pow+0x7ec>
 800b87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b880:	4619      	mov	r1, r3
 800b882:	e7d2      	b.n	800b82a <__ieee754_pow+0x96a>
 800b884:	491a      	ldr	r1, [pc, #104]	; (800b8f0 <__ieee754_pow+0xa30>)
 800b886:	2000      	movs	r0, #0
 800b888:	f7ff bb9e 	b.w	800afc8 <__ieee754_pow+0x108>
 800b88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b890:	f7ff bb9a 	b.w	800afc8 <__ieee754_pow+0x108>
 800b894:	9000      	str	r0, [sp, #0]
 800b896:	f7ff bb76 	b.w	800af86 <__ieee754_pow+0xc6>
 800b89a:	2100      	movs	r1, #0
 800b89c:	f7ff bb60 	b.w	800af60 <__ieee754_pow+0xa0>
 800b8a0:	00000000 	.word	0x00000000
 800b8a4:	3fe62e43 	.word	0x3fe62e43
 800b8a8:	fefa39ef 	.word	0xfefa39ef
 800b8ac:	3fe62e42 	.word	0x3fe62e42
 800b8b0:	0ca86c39 	.word	0x0ca86c39
 800b8b4:	be205c61 	.word	0xbe205c61
 800b8b8:	72bea4d0 	.word	0x72bea4d0
 800b8bc:	3e663769 	.word	0x3e663769
 800b8c0:	c5d26bf1 	.word	0xc5d26bf1
 800b8c4:	3ebbbd41 	.word	0x3ebbbd41
 800b8c8:	af25de2c 	.word	0xaf25de2c
 800b8cc:	3f11566a 	.word	0x3f11566a
 800b8d0:	16bebd93 	.word	0x16bebd93
 800b8d4:	3f66c16c 	.word	0x3f66c16c
 800b8d8:	5555553e 	.word	0x5555553e
 800b8dc:	3fc55555 	.word	0x3fc55555
 800b8e0:	c2f8f359 	.word	0xc2f8f359
 800b8e4:	01a56e1f 	.word	0x01a56e1f
 800b8e8:	3fe00000 	.word	0x3fe00000
 800b8ec:	000fffff 	.word	0x000fffff
 800b8f0:	3ff00000 	.word	0x3ff00000
 800b8f4:	4090cbff 	.word	0x4090cbff
 800b8f8:	3f6f3400 	.word	0x3f6f3400
 800b8fc:	652b82fe 	.word	0x652b82fe
 800b900:	3c971547 	.word	0x3c971547
 800b904:	00000000 	.word	0x00000000

0800b908 <__ieee754_rem_pio2>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	ed2d 8b02 	vpush	{d8}
 800b910:	ec55 4b10 	vmov	r4, r5, d0
 800b914:	4bca      	ldr	r3, [pc, #808]	; (800bc40 <__ieee754_rem_pio2+0x338>)
 800b916:	b08b      	sub	sp, #44	; 0x2c
 800b918:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b91c:	4598      	cmp	r8, r3
 800b91e:	4682      	mov	sl, r0
 800b920:	9502      	str	r5, [sp, #8]
 800b922:	dc08      	bgt.n	800b936 <__ieee754_rem_pio2+0x2e>
 800b924:	2200      	movs	r2, #0
 800b926:	2300      	movs	r3, #0
 800b928:	ed80 0b00 	vstr	d0, [r0]
 800b92c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b930:	f04f 0b00 	mov.w	fp, #0
 800b934:	e028      	b.n	800b988 <__ieee754_rem_pio2+0x80>
 800b936:	4bc3      	ldr	r3, [pc, #780]	; (800bc44 <__ieee754_rem_pio2+0x33c>)
 800b938:	4598      	cmp	r8, r3
 800b93a:	dc78      	bgt.n	800ba2e <__ieee754_rem_pio2+0x126>
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	4ec2      	ldr	r6, [pc, #776]	; (800bc48 <__ieee754_rem_pio2+0x340>)
 800b940:	2b00      	cmp	r3, #0
 800b942:	ee10 0a10 	vmov	r0, s0
 800b946:	a3b0      	add	r3, pc, #704	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x300>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	4629      	mov	r1, r5
 800b94e:	dd39      	ble.n	800b9c4 <__ieee754_rem_pio2+0xbc>
 800b950:	f7f4 fcba 	bl	80002c8 <__aeabi_dsub>
 800b954:	45b0      	cmp	r8, r6
 800b956:	4604      	mov	r4, r0
 800b958:	460d      	mov	r5, r1
 800b95a:	d01b      	beq.n	800b994 <__ieee754_rem_pio2+0x8c>
 800b95c:	a3ac      	add	r3, pc, #688	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x308>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fcb1 	bl	80002c8 <__aeabi_dsub>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	e9ca 2300 	strd	r2, r3, [sl]
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7f4 fca9 	bl	80002c8 <__aeabi_dsub>
 800b976:	a3a6      	add	r3, pc, #664	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x308>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f7f4 fca4 	bl	80002c8 <__aeabi_dsub>
 800b980:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b984:	f04f 0b01 	mov.w	fp, #1
 800b988:	4658      	mov	r0, fp
 800b98a:	b00b      	add	sp, #44	; 0x2c
 800b98c:	ecbd 8b02 	vpop	{d8}
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x310>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f4 fc95 	bl	80002c8 <__aeabi_dsub>
 800b99e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x318>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	f7f4 fc8e 	bl	80002c8 <__aeabi_dsub>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	e9ca 2300 	strd	r2, r3, [sl]
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fc86 	bl	80002c8 <__aeabi_dsub>
 800b9bc:	a398      	add	r3, pc, #608	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x318>)
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	e7db      	b.n	800b97c <__ieee754_rem_pio2+0x74>
 800b9c4:	f7f4 fc82 	bl	80002cc <__adddf3>
 800b9c8:	45b0      	cmp	r8, r6
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	d016      	beq.n	800b9fe <__ieee754_rem_pio2+0xf6>
 800b9d0:	a38f      	add	r3, pc, #572	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x308>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f4 fc79 	bl	80002cc <__adddf3>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	e9ca 2300 	strd	r2, r3, [sl]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	f7f4 fc6f 	bl	80002c8 <__aeabi_dsub>
 800b9ea:	a389      	add	r3, pc, #548	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x308>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fc6c 	bl	80002cc <__adddf3>
 800b9f4:	f04f 3bff 	mov.w	fp, #4294967295
 800b9f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9fc:	e7c4      	b.n	800b988 <__ieee754_rem_pio2+0x80>
 800b9fe:	a386      	add	r3, pc, #536	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x310>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f4 fc62 	bl	80002cc <__adddf3>
 800ba08:	a385      	add	r3, pc, #532	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x318>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	f7f4 fc5b 	bl	80002cc <__adddf3>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ba1e:	4620      	mov	r0, r4
 800ba20:	4629      	mov	r1, r5
 800ba22:	f7f4 fc51 	bl	80002c8 <__aeabi_dsub>
 800ba26:	a37e      	add	r3, pc, #504	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x318>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	e7e0      	b.n	800b9f0 <__ieee754_rem_pio2+0xe8>
 800ba2e:	4b87      	ldr	r3, [pc, #540]	; (800bc4c <__ieee754_rem_pio2+0x344>)
 800ba30:	4598      	cmp	r8, r3
 800ba32:	f300 80d9 	bgt.w	800bbe8 <__ieee754_rem_pio2+0x2e0>
 800ba36:	f001 f88f 	bl	800cb58 <fabs>
 800ba3a:	ec55 4b10 	vmov	r4, r5, d0
 800ba3e:	ee10 0a10 	vmov	r0, s0
 800ba42:	a379      	add	r3, pc, #484	; (adr r3, 800bc28 <__ieee754_rem_pio2+0x320>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fdf5 	bl	8000638 <__aeabi_dmul>
 800ba4e:	4b80      	ldr	r3, [pc, #512]	; (800bc50 <__ieee754_rem_pio2+0x348>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7f4 fc3b 	bl	80002cc <__adddf3>
 800ba56:	f7f5 f89f 	bl	8000b98 <__aeabi_d2iz>
 800ba5a:	4683      	mov	fp, r0
 800ba5c:	f7f4 fd82 	bl	8000564 <__aeabi_i2d>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	ec43 2b18 	vmov	d8, r2, r3
 800ba68:	a367      	add	r3, pc, #412	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x300>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fde3 	bl	8000638 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fc25 	bl	80002c8 <__aeabi_dsub>
 800ba7e:	a364      	add	r3, pc, #400	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x308>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	4606      	mov	r6, r0
 800ba86:	460f      	mov	r7, r1
 800ba88:	ec51 0b18 	vmov	r0, r1, d8
 800ba8c:	f7f4 fdd4 	bl	8000638 <__aeabi_dmul>
 800ba90:	f1bb 0f1f 	cmp.w	fp, #31
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	dc0d      	bgt.n	800bab6 <__ieee754_rem_pio2+0x1ae>
 800ba9a:	4b6e      	ldr	r3, [pc, #440]	; (800bc54 <__ieee754_rem_pio2+0x34c>)
 800ba9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800baa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa4:	4543      	cmp	r3, r8
 800baa6:	d006      	beq.n	800bab6 <__ieee754_rem_pio2+0x1ae>
 800baa8:	4622      	mov	r2, r4
 800baaa:	462b      	mov	r3, r5
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fc0a 	bl	80002c8 <__aeabi_dsub>
 800bab4:	e00f      	b.n	800bad6 <__ieee754_rem_pio2+0x1ce>
 800bab6:	462b      	mov	r3, r5
 800bab8:	4622      	mov	r2, r4
 800baba:	4630      	mov	r0, r6
 800babc:	4639      	mov	r1, r7
 800babe:	f7f4 fc03 	bl	80002c8 <__aeabi_dsub>
 800bac2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bac6:	9303      	str	r3, [sp, #12]
 800bac8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bacc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bad0:	f1b8 0f10 	cmp.w	r8, #16
 800bad4:	dc02      	bgt.n	800badc <__ieee754_rem_pio2+0x1d4>
 800bad6:	e9ca 0100 	strd	r0, r1, [sl]
 800bada:	e039      	b.n	800bb50 <__ieee754_rem_pio2+0x248>
 800badc:	a34e      	add	r3, pc, #312	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x310>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	ec51 0b18 	vmov	r0, r1, d8
 800bae6:	f7f4 fda7 	bl	8000638 <__aeabi_dmul>
 800baea:	4604      	mov	r4, r0
 800baec:	460d      	mov	r5, r1
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4630      	mov	r0, r6
 800baf4:	4639      	mov	r1, r7
 800baf6:	f7f4 fbe7 	bl	80002c8 <__aeabi_dsub>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4680      	mov	r8, r0
 800bb00:	4689      	mov	r9, r1
 800bb02:	4630      	mov	r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	f7f4 fbdf 	bl	80002c8 <__aeabi_dsub>
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	462b      	mov	r3, r5
 800bb0e:	f7f4 fbdb 	bl	80002c8 <__aeabi_dsub>
 800bb12:	a343      	add	r3, pc, #268	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x318>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	ec51 0b18 	vmov	r0, r1, d8
 800bb20:	f7f4 fd8a 	bl	8000638 <__aeabi_dmul>
 800bb24:	4622      	mov	r2, r4
 800bb26:	462b      	mov	r3, r5
 800bb28:	f7f4 fbce 	bl	80002c8 <__aeabi_dsub>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	4640      	mov	r0, r8
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f4 fbc6 	bl	80002c8 <__aeabi_dsub>
 800bb3c:	9a03      	ldr	r2, [sp, #12]
 800bb3e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b31      	cmp	r3, #49	; 0x31
 800bb46:	dc24      	bgt.n	800bb92 <__ieee754_rem_pio2+0x28a>
 800bb48:	e9ca 0100 	strd	r0, r1, [sl]
 800bb4c:	4646      	mov	r6, r8
 800bb4e:	464f      	mov	r7, r9
 800bb50:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb54:	4630      	mov	r0, r6
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f4 fbb4 	bl	80002c8 <__aeabi_dsub>
 800bb60:	462b      	mov	r3, r5
 800bb62:	4622      	mov	r2, r4
 800bb64:	f7f4 fbb0 	bl	80002c8 <__aeabi_dsub>
 800bb68:	9b02      	ldr	r3, [sp, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb70:	f6bf af0a 	bge.w	800b988 <__ieee754_rem_pio2+0x80>
 800bb74:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bb78:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb7c:	f8ca 8000 	str.w	r8, [sl]
 800bb80:	f8ca 0008 	str.w	r0, [sl, #8]
 800bb84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb88:	f8ca 300c 	str.w	r3, [sl, #12]
 800bb8c:	f1cb 0b00 	rsb	fp, fp, #0
 800bb90:	e6fa      	b.n	800b988 <__ieee754_rem_pio2+0x80>
 800bb92:	a327      	add	r3, pc, #156	; (adr r3, 800bc30 <__ieee754_rem_pio2+0x328>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	ec51 0b18 	vmov	r0, r1, d8
 800bb9c:	f7f4 fd4c 	bl	8000638 <__aeabi_dmul>
 800bba0:	4604      	mov	r4, r0
 800bba2:	460d      	mov	r5, r1
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4649      	mov	r1, r9
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 fb84 	bl	80002c8 <__aeabi_dsub>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f7f4 fb80 	bl	80002c8 <__aeabi_dsub>
 800bbc8:	a31b      	add	r3, pc, #108	; (adr r3, 800bc38 <__ieee754_rem_pio2+0x330>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	ec51 0b18 	vmov	r0, r1, d8
 800bbd6:	f7f4 fd2f 	bl	8000638 <__aeabi_dmul>
 800bbda:	4622      	mov	r2, r4
 800bbdc:	462b      	mov	r3, r5
 800bbde:	f7f4 fb73 	bl	80002c8 <__aeabi_dsub>
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	e75f      	b.n	800baa8 <__ieee754_rem_pio2+0x1a0>
 800bbe8:	4b1b      	ldr	r3, [pc, #108]	; (800bc58 <__ieee754_rem_pio2+0x350>)
 800bbea:	4598      	cmp	r8, r3
 800bbec:	dd36      	ble.n	800bc5c <__ieee754_rem_pio2+0x354>
 800bbee:	ee10 2a10 	vmov	r2, s0
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f7f4 fb66 	bl	80002c8 <__aeabi_dsub>
 800bbfc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc00:	e9ca 0100 	strd	r0, r1, [sl]
 800bc04:	e694      	b.n	800b930 <__ieee754_rem_pio2+0x28>
 800bc06:	bf00      	nop
 800bc08:	54400000 	.word	0x54400000
 800bc0c:	3ff921fb 	.word	0x3ff921fb
 800bc10:	1a626331 	.word	0x1a626331
 800bc14:	3dd0b461 	.word	0x3dd0b461
 800bc18:	1a600000 	.word	0x1a600000
 800bc1c:	3dd0b461 	.word	0x3dd0b461
 800bc20:	2e037073 	.word	0x2e037073
 800bc24:	3ba3198a 	.word	0x3ba3198a
 800bc28:	6dc9c883 	.word	0x6dc9c883
 800bc2c:	3fe45f30 	.word	0x3fe45f30
 800bc30:	2e000000 	.word	0x2e000000
 800bc34:	3ba3198a 	.word	0x3ba3198a
 800bc38:	252049c1 	.word	0x252049c1
 800bc3c:	397b839a 	.word	0x397b839a
 800bc40:	3fe921fb 	.word	0x3fe921fb
 800bc44:	4002d97b 	.word	0x4002d97b
 800bc48:	3ff921fb 	.word	0x3ff921fb
 800bc4c:	413921fb 	.word	0x413921fb
 800bc50:	3fe00000 	.word	0x3fe00000
 800bc54:	0800d3c0 	.word	0x0800d3c0
 800bc58:	7fefffff 	.word	0x7fefffff
 800bc5c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bc60:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bc64:	ee10 0a10 	vmov	r0, s0
 800bc68:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bc6c:	ee10 6a10 	vmov	r6, s0
 800bc70:	460f      	mov	r7, r1
 800bc72:	f7f4 ff91 	bl	8000b98 <__aeabi_d2iz>
 800bc76:	f7f4 fc75 	bl	8000564 <__aeabi_i2d>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4630      	mov	r0, r6
 800bc80:	4639      	mov	r1, r7
 800bc82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc86:	f7f4 fb1f 	bl	80002c8 <__aeabi_dsub>
 800bc8a:	4b22      	ldr	r3, [pc, #136]	; (800bd14 <__ieee754_rem_pio2+0x40c>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f7f4 fcd3 	bl	8000638 <__aeabi_dmul>
 800bc92:	460f      	mov	r7, r1
 800bc94:	4606      	mov	r6, r0
 800bc96:	f7f4 ff7f 	bl	8000b98 <__aeabi_d2iz>
 800bc9a:	f7f4 fc63 	bl	8000564 <__aeabi_i2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcaa:	f7f4 fb0d 	bl	80002c8 <__aeabi_dsub>
 800bcae:	4b19      	ldr	r3, [pc, #100]	; (800bd14 <__ieee754_rem_pio2+0x40c>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f7f4 fcc1 	bl	8000638 <__aeabi_dmul>
 800bcb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcba:	ad04      	add	r5, sp, #16
 800bcbc:	f04f 0803 	mov.w	r8, #3
 800bcc0:	46a9      	mov	r9, r5
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	463b      	mov	r3, r7
 800bcca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bcce:	46c3      	mov	fp, r8
 800bcd0:	3d08      	subs	r5, #8
 800bcd2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcd6:	f7f4 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1f3      	bne.n	800bcc6 <__ieee754_rem_pio2+0x3be>
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <__ieee754_rem_pio2+0x410>)
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	2302      	movs	r3, #2
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	4622      	mov	r2, r4
 800bce8:	465b      	mov	r3, fp
 800bcea:	4651      	mov	r1, sl
 800bcec:	4648      	mov	r0, r9
 800bcee:	f000 f993 	bl	800c018 <__kernel_rem_pio2>
 800bcf2:	9b02      	ldr	r3, [sp, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	4683      	mov	fp, r0
 800bcf8:	f6bf ae46 	bge.w	800b988 <__ieee754_rem_pio2+0x80>
 800bcfc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bd00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd04:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd08:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bd0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd10:	e73a      	b.n	800bb88 <__ieee754_rem_pio2+0x280>
 800bd12:	bf00      	nop
 800bd14:	41700000 	.word	0x41700000
 800bd18:	0800d440 	.word	0x0800d440

0800bd1c <__ieee754_sqrt>:
 800bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd20:	ec55 4b10 	vmov	r4, r5, d0
 800bd24:	4e56      	ldr	r6, [pc, #344]	; (800be80 <__ieee754_sqrt+0x164>)
 800bd26:	43ae      	bics	r6, r5
 800bd28:	ee10 0a10 	vmov	r0, s0
 800bd2c:	ee10 3a10 	vmov	r3, s0
 800bd30:	4629      	mov	r1, r5
 800bd32:	462a      	mov	r2, r5
 800bd34:	d110      	bne.n	800bd58 <__ieee754_sqrt+0x3c>
 800bd36:	ee10 2a10 	vmov	r2, s0
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f7f4 fc7c 	bl	8000638 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fac0 	bl	80002cc <__adddf3>
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	460d      	mov	r5, r1
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	dc10      	bgt.n	800bd7e <__ieee754_sqrt+0x62>
 800bd5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd60:	4330      	orrs	r0, r6
 800bd62:	d0f5      	beq.n	800bd50 <__ieee754_sqrt+0x34>
 800bd64:	b15d      	cbz	r5, 800bd7e <__ieee754_sqrt+0x62>
 800bd66:	ee10 2a10 	vmov	r2, s0
 800bd6a:	462b      	mov	r3, r5
 800bd6c:	ee10 0a10 	vmov	r0, s0
 800bd70:	f7f4 faaa 	bl	80002c8 <__aeabi_dsub>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	f7f4 fd88 	bl	800088c <__aeabi_ddiv>
 800bd7c:	e7e6      	b.n	800bd4c <__ieee754_sqrt+0x30>
 800bd7e:	1509      	asrs	r1, r1, #20
 800bd80:	d076      	beq.n	800be70 <__ieee754_sqrt+0x154>
 800bd82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bd86:	07ce      	lsls	r6, r1, #31
 800bd88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bd8c:	bf5e      	ittt	pl
 800bd8e:	0fda      	lsrpl	r2, r3, #31
 800bd90:	005b      	lslpl	r3, r3, #1
 800bd92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bd96:	0fda      	lsrs	r2, r3, #31
 800bd98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bd9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bda0:	2000      	movs	r0, #0
 800bda2:	106d      	asrs	r5, r5, #1
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	f04f 0e16 	mov.w	lr, #22
 800bdaa:	4684      	mov	ip, r0
 800bdac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdb0:	eb0c 0401 	add.w	r4, ip, r1
 800bdb4:	4294      	cmp	r4, r2
 800bdb6:	bfde      	ittt	le
 800bdb8:	1b12      	suble	r2, r2, r4
 800bdba:	eb04 0c01 	addle.w	ip, r4, r1
 800bdbe:	1840      	addle	r0, r0, r1
 800bdc0:	0052      	lsls	r2, r2, #1
 800bdc2:	f1be 0e01 	subs.w	lr, lr, #1
 800bdc6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bdca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bdce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdd2:	d1ed      	bne.n	800bdb0 <__ieee754_sqrt+0x94>
 800bdd4:	4671      	mov	r1, lr
 800bdd6:	2720      	movs	r7, #32
 800bdd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bddc:	4562      	cmp	r2, ip
 800bdde:	eb04 060e 	add.w	r6, r4, lr
 800bde2:	dc02      	bgt.n	800bdea <__ieee754_sqrt+0xce>
 800bde4:	d113      	bne.n	800be0e <__ieee754_sqrt+0xf2>
 800bde6:	429e      	cmp	r6, r3
 800bde8:	d811      	bhi.n	800be0e <__ieee754_sqrt+0xf2>
 800bdea:	2e00      	cmp	r6, #0
 800bdec:	eb06 0e04 	add.w	lr, r6, r4
 800bdf0:	da43      	bge.n	800be7a <__ieee754_sqrt+0x15e>
 800bdf2:	f1be 0f00 	cmp.w	lr, #0
 800bdf6:	db40      	blt.n	800be7a <__ieee754_sqrt+0x15e>
 800bdf8:	f10c 0801 	add.w	r8, ip, #1
 800bdfc:	eba2 020c 	sub.w	r2, r2, ip
 800be00:	429e      	cmp	r6, r3
 800be02:	bf88      	it	hi
 800be04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800be08:	1b9b      	subs	r3, r3, r6
 800be0a:	4421      	add	r1, r4
 800be0c:	46c4      	mov	ip, r8
 800be0e:	0052      	lsls	r2, r2, #1
 800be10:	3f01      	subs	r7, #1
 800be12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800be1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be1e:	d1dd      	bne.n	800bddc <__ieee754_sqrt+0xc0>
 800be20:	4313      	orrs	r3, r2
 800be22:	d006      	beq.n	800be32 <__ieee754_sqrt+0x116>
 800be24:	1c4c      	adds	r4, r1, #1
 800be26:	bf13      	iteet	ne
 800be28:	3101      	addne	r1, #1
 800be2a:	3001      	addeq	r0, #1
 800be2c:	4639      	moveq	r1, r7
 800be2e:	f021 0101 	bicne.w	r1, r1, #1
 800be32:	1043      	asrs	r3, r0, #1
 800be34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be38:	0849      	lsrs	r1, r1, #1
 800be3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be3e:	07c2      	lsls	r2, r0, #31
 800be40:	bf48      	it	mi
 800be42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be4a:	460c      	mov	r4, r1
 800be4c:	463d      	mov	r5, r7
 800be4e:	e77f      	b.n	800bd50 <__ieee754_sqrt+0x34>
 800be50:	0ada      	lsrs	r2, r3, #11
 800be52:	3815      	subs	r0, #21
 800be54:	055b      	lsls	r3, r3, #21
 800be56:	2a00      	cmp	r2, #0
 800be58:	d0fa      	beq.n	800be50 <__ieee754_sqrt+0x134>
 800be5a:	02d7      	lsls	r7, r2, #11
 800be5c:	d50a      	bpl.n	800be74 <__ieee754_sqrt+0x158>
 800be5e:	f1c1 0420 	rsb	r4, r1, #32
 800be62:	fa23 f404 	lsr.w	r4, r3, r4
 800be66:	1e4d      	subs	r5, r1, #1
 800be68:	408b      	lsls	r3, r1
 800be6a:	4322      	orrs	r2, r4
 800be6c:	1b41      	subs	r1, r0, r5
 800be6e:	e788      	b.n	800bd82 <__ieee754_sqrt+0x66>
 800be70:	4608      	mov	r0, r1
 800be72:	e7f0      	b.n	800be56 <__ieee754_sqrt+0x13a>
 800be74:	0052      	lsls	r2, r2, #1
 800be76:	3101      	adds	r1, #1
 800be78:	e7ef      	b.n	800be5a <__ieee754_sqrt+0x13e>
 800be7a:	46e0      	mov	r8, ip
 800be7c:	e7be      	b.n	800bdfc <__ieee754_sqrt+0xe0>
 800be7e:	bf00      	nop
 800be80:	7ff00000 	.word	0x7ff00000
 800be84:	00000000 	.word	0x00000000

0800be88 <__kernel_cos>:
 800be88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	ec57 6b10 	vmov	r6, r7, d0
 800be90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800be98:	ed8d 1b00 	vstr	d1, [sp]
 800be9c:	da07      	bge.n	800beae <__kernel_cos+0x26>
 800be9e:	ee10 0a10 	vmov	r0, s0
 800bea2:	4639      	mov	r1, r7
 800bea4:	f7f4 fe78 	bl	8000b98 <__aeabi_d2iz>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f000 8088 	beq.w	800bfbe <__kernel_cos+0x136>
 800beae:	4632      	mov	r2, r6
 800beb0:	463b      	mov	r3, r7
 800beb2:	4630      	mov	r0, r6
 800beb4:	4639      	mov	r1, r7
 800beb6:	f7f4 fbbf 	bl	8000638 <__aeabi_dmul>
 800beba:	4b51      	ldr	r3, [pc, #324]	; (800c000 <__kernel_cos+0x178>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	460d      	mov	r5, r1
 800bec2:	f7f4 fbb9 	bl	8000638 <__aeabi_dmul>
 800bec6:	a340      	add	r3, pc, #256	; (adr r3, 800bfc8 <__kernel_cos+0x140>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	4682      	mov	sl, r0
 800bece:	468b      	mov	fp, r1
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 fbb0 	bl	8000638 <__aeabi_dmul>
 800bed8:	a33d      	add	r3, pc, #244	; (adr r3, 800bfd0 <__kernel_cos+0x148>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 f9f5 	bl	80002cc <__adddf3>
 800bee2:	4622      	mov	r2, r4
 800bee4:	462b      	mov	r3, r5
 800bee6:	f7f4 fba7 	bl	8000638 <__aeabi_dmul>
 800beea:	a33b      	add	r3, pc, #236	; (adr r3, 800bfd8 <__kernel_cos+0x150>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	f7f4 f9ea 	bl	80002c8 <__aeabi_dsub>
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb9e 	bl	8000638 <__aeabi_dmul>
 800befc:	a338      	add	r3, pc, #224	; (adr r3, 800bfe0 <__kernel_cos+0x158>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 f9e3 	bl	80002cc <__adddf3>
 800bf06:	4622      	mov	r2, r4
 800bf08:	462b      	mov	r3, r5
 800bf0a:	f7f4 fb95 	bl	8000638 <__aeabi_dmul>
 800bf0e:	a336      	add	r3, pc, #216	; (adr r3, 800bfe8 <__kernel_cos+0x160>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 f9d8 	bl	80002c8 <__aeabi_dsub>
 800bf18:	4622      	mov	r2, r4
 800bf1a:	462b      	mov	r3, r5
 800bf1c:	f7f4 fb8c 	bl	8000638 <__aeabi_dmul>
 800bf20:	a333      	add	r3, pc, #204	; (adr r3, 800bff0 <__kernel_cos+0x168>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 f9d1 	bl	80002cc <__adddf3>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb83 	bl	8000638 <__aeabi_dmul>
 800bf32:	4622      	mov	r2, r4
 800bf34:	462b      	mov	r3, r5
 800bf36:	f7f4 fb7f 	bl	8000638 <__aeabi_dmul>
 800bf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	4630      	mov	r0, r6
 800bf44:	4639      	mov	r1, r7
 800bf46:	f7f4 fb77 	bl	8000638 <__aeabi_dmul>
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	4629      	mov	r1, r5
 800bf50:	4620      	mov	r0, r4
 800bf52:	f7f4 f9b9 	bl	80002c8 <__aeabi_dsub>
 800bf56:	4b2b      	ldr	r3, [pc, #172]	; (800c004 <__kernel_cos+0x17c>)
 800bf58:	4598      	cmp	r8, r3
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460f      	mov	r7, r1
 800bf5e:	dc10      	bgt.n	800bf82 <__kernel_cos+0xfa>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4650      	mov	r0, sl
 800bf66:	4659      	mov	r1, fp
 800bf68:	f7f4 f9ae 	bl	80002c8 <__aeabi_dsub>
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4926      	ldr	r1, [pc, #152]	; (800c008 <__kernel_cos+0x180>)
 800bf70:	4602      	mov	r2, r0
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7f4 f9a8 	bl	80002c8 <__aeabi_dsub>
 800bf78:	ec41 0b10 	vmov	d0, r0, r1
 800bf7c:	b003      	add	sp, #12
 800bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf82:	4b22      	ldr	r3, [pc, #136]	; (800c00c <__kernel_cos+0x184>)
 800bf84:	4920      	ldr	r1, [pc, #128]	; (800c008 <__kernel_cos+0x180>)
 800bf86:	4598      	cmp	r8, r3
 800bf88:	bfcc      	ite	gt
 800bf8a:	4d21      	ldrgt	r5, [pc, #132]	; (800c010 <__kernel_cos+0x188>)
 800bf8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bf90:	2400      	movs	r4, #0
 800bf92:	4622      	mov	r2, r4
 800bf94:	462b      	mov	r3, r5
 800bf96:	2000      	movs	r0, #0
 800bf98:	f7f4 f996 	bl	80002c8 <__aeabi_dsub>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4689      	mov	r9, r1
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	4650      	mov	r0, sl
 800bfa6:	4659      	mov	r1, fp
 800bfa8:	f7f4 f98e 	bl	80002c8 <__aeabi_dsub>
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	f7f4 f98a 	bl	80002c8 <__aeabi_dsub>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	4640      	mov	r0, r8
 800bfba:	4649      	mov	r1, r9
 800bfbc:	e7da      	b.n	800bf74 <__kernel_cos+0xec>
 800bfbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bff8 <__kernel_cos+0x170>
 800bfc2:	e7db      	b.n	800bf7c <__kernel_cos+0xf4>
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	be8838d4 	.word	0xbe8838d4
 800bfcc:	bda8fae9 	.word	0xbda8fae9
 800bfd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bfd4:	3e21ee9e 	.word	0x3e21ee9e
 800bfd8:	809c52ad 	.word	0x809c52ad
 800bfdc:	3e927e4f 	.word	0x3e927e4f
 800bfe0:	19cb1590 	.word	0x19cb1590
 800bfe4:	3efa01a0 	.word	0x3efa01a0
 800bfe8:	16c15177 	.word	0x16c15177
 800bfec:	3f56c16c 	.word	0x3f56c16c
 800bff0:	5555554c 	.word	0x5555554c
 800bff4:	3fa55555 	.word	0x3fa55555
 800bff8:	00000000 	.word	0x00000000
 800bffc:	3ff00000 	.word	0x3ff00000
 800c000:	3fe00000 	.word	0x3fe00000
 800c004:	3fd33332 	.word	0x3fd33332
 800c008:	3ff00000 	.word	0x3ff00000
 800c00c:	3fe90000 	.word	0x3fe90000
 800c010:	3fd20000 	.word	0x3fd20000
 800c014:	00000000 	.word	0x00000000

0800c018 <__kernel_rem_pio2>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	ed2d 8b02 	vpush	{d8}
 800c020:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c024:	f112 0f14 	cmn.w	r2, #20
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9101      	str	r1, [sp, #4]
 800c02c:	4bc6      	ldr	r3, [pc, #792]	; (800c348 <__kernel_rem_pio2+0x330>)
 800c02e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c030:	9009      	str	r0, [sp, #36]	; 0x24
 800c032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	9b08      	ldr	r3, [sp, #32]
 800c03a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c03e:	bfa8      	it	ge
 800c040:	1ed4      	subge	r4, r2, #3
 800c042:	9306      	str	r3, [sp, #24]
 800c044:	bfb2      	itee	lt
 800c046:	2400      	movlt	r4, #0
 800c048:	2318      	movge	r3, #24
 800c04a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c04e:	f06f 0317 	mvn.w	r3, #23
 800c052:	fb04 3303 	mla	r3, r4, r3, r3
 800c056:	eb03 0a02 	add.w	sl, r3, r2
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	9a06      	ldr	r2, [sp, #24]
 800c05e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c338 <__kernel_rem_pio2+0x320>
 800c062:	eb03 0802 	add.w	r8, r3, r2
 800c066:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c068:	1aa7      	subs	r7, r4, r2
 800c06a:	ae20      	add	r6, sp, #128	; 0x80
 800c06c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c070:	2500      	movs	r5, #0
 800c072:	4545      	cmp	r5, r8
 800c074:	dd18      	ble.n	800c0a8 <__kernel_rem_pio2+0x90>
 800c076:	9b08      	ldr	r3, [sp, #32]
 800c078:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c07c:	aa20      	add	r2, sp, #128	; 0x80
 800c07e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c338 <__kernel_rem_pio2+0x320>
 800c082:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c086:	f1c3 0301 	rsb	r3, r3, #1
 800c08a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c08e:	9307      	str	r3, [sp, #28]
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	9a04      	ldr	r2, [sp, #16]
 800c094:	4443      	add	r3, r8
 800c096:	429a      	cmp	r2, r3
 800c098:	db2f      	blt.n	800c0fa <__kernel_rem_pio2+0xe2>
 800c09a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c09e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c0a2:	462f      	mov	r7, r5
 800c0a4:	2600      	movs	r6, #0
 800c0a6:	e01b      	b.n	800c0e0 <__kernel_rem_pio2+0xc8>
 800c0a8:	42ef      	cmn	r7, r5
 800c0aa:	d407      	bmi.n	800c0bc <__kernel_rem_pio2+0xa4>
 800c0ac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0b0:	f7f4 fa58 	bl	8000564 <__aeabi_i2d>
 800c0b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	e7da      	b.n	800c072 <__kernel_rem_pio2+0x5a>
 800c0bc:	ec51 0b18 	vmov	r0, r1, d8
 800c0c0:	e7f8      	b.n	800c0b4 <__kernel_rem_pio2+0x9c>
 800c0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0c6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0ca:	f7f4 fab5 	bl	8000638 <__aeabi_dmul>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d6:	f7f4 f8f9 	bl	80002cc <__adddf3>
 800c0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0de:	3601      	adds	r6, #1
 800c0e0:	9b06      	ldr	r3, [sp, #24]
 800c0e2:	429e      	cmp	r6, r3
 800c0e4:	f1a7 0708 	sub.w	r7, r7, #8
 800c0e8:	ddeb      	ble.n	800c0c2 <__kernel_rem_pio2+0xaa>
 800c0ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0ee:	3508      	adds	r5, #8
 800c0f0:	ecab 7b02 	vstmia	fp!, {d7}
 800c0f4:	f108 0801 	add.w	r8, r8, #1
 800c0f8:	e7ca      	b.n	800c090 <__kernel_rem_pio2+0x78>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	aa0c      	add	r2, sp, #48	; 0x30
 800c0fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c102:	930b      	str	r3, [sp, #44]	; 0x2c
 800c104:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c106:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c10a:	9c04      	ldr	r4, [sp, #16]
 800c10c:	930a      	str	r3, [sp, #40]	; 0x28
 800c10e:	ab98      	add	r3, sp, #608	; 0x260
 800c110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c114:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c118:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c11c:	f8cd b008 	str.w	fp, [sp, #8]
 800c120:	4625      	mov	r5, r4
 800c122:	2d00      	cmp	r5, #0
 800c124:	dc78      	bgt.n	800c218 <__kernel_rem_pio2+0x200>
 800c126:	ec47 6b10 	vmov	d0, r6, r7
 800c12a:	4650      	mov	r0, sl
 800c12c:	f000 fe3c 	bl	800cda8 <scalbn>
 800c130:	ec57 6b10 	vmov	r6, r7, d0
 800c134:	2200      	movs	r2, #0
 800c136:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c13a:	ee10 0a10 	vmov	r0, s0
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 fa7a 	bl	8000638 <__aeabi_dmul>
 800c144:	ec41 0b10 	vmov	d0, r0, r1
 800c148:	f000 fd1a 	bl	800cb80 <floor>
 800c14c:	4b7f      	ldr	r3, [pc, #508]	; (800c34c <__kernel_rem_pio2+0x334>)
 800c14e:	ec51 0b10 	vmov	r0, r1, d0
 800c152:	2200      	movs	r2, #0
 800c154:	f7f4 fa70 	bl	8000638 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f8b2 	bl	80002c8 <__aeabi_dsub>
 800c164:	460f      	mov	r7, r1
 800c166:	4606      	mov	r6, r0
 800c168:	f7f4 fd16 	bl	8000b98 <__aeabi_d2iz>
 800c16c:	9007      	str	r0, [sp, #28]
 800c16e:	f7f4 f9f9 	bl	8000564 <__aeabi_i2d>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 f8a5 	bl	80002c8 <__aeabi_dsub>
 800c17e:	f1ba 0f00 	cmp.w	sl, #0
 800c182:	4606      	mov	r6, r0
 800c184:	460f      	mov	r7, r1
 800c186:	dd70      	ble.n	800c26a <__kernel_rem_pio2+0x252>
 800c188:	1e62      	subs	r2, r4, #1
 800c18a:	ab0c      	add	r3, sp, #48	; 0x30
 800c18c:	9d07      	ldr	r5, [sp, #28]
 800c18e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c192:	f1ca 0118 	rsb	r1, sl, #24
 800c196:	fa40 f301 	asr.w	r3, r0, r1
 800c19a:	441d      	add	r5, r3
 800c19c:	408b      	lsls	r3, r1
 800c19e:	1ac0      	subs	r0, r0, r3
 800c1a0:	ab0c      	add	r3, sp, #48	; 0x30
 800c1a2:	9507      	str	r5, [sp, #28]
 800c1a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c1a8:	f1ca 0317 	rsb	r3, sl, #23
 800c1ac:	fa40 f303 	asr.w	r3, r0, r3
 800c1b0:	9302      	str	r3, [sp, #8]
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd66      	ble.n	800c286 <__kernel_rem_pio2+0x26e>
 800c1b8:	9b07      	ldr	r3, [sp, #28]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	3301      	adds	r3, #1
 800c1be:	9307      	str	r3, [sp, #28]
 800c1c0:	4615      	mov	r5, r2
 800c1c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c1c6:	4294      	cmp	r4, r2
 800c1c8:	f300 8099 	bgt.w	800c2fe <__kernel_rem_pio2+0x2e6>
 800c1cc:	f1ba 0f00 	cmp.w	sl, #0
 800c1d0:	dd07      	ble.n	800c1e2 <__kernel_rem_pio2+0x1ca>
 800c1d2:	f1ba 0f01 	cmp.w	sl, #1
 800c1d6:	f000 80a5 	beq.w	800c324 <__kernel_rem_pio2+0x30c>
 800c1da:	f1ba 0f02 	cmp.w	sl, #2
 800c1de:	f000 80c1 	beq.w	800c364 <__kernel_rem_pio2+0x34c>
 800c1e2:	9b02      	ldr	r3, [sp, #8]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d14e      	bne.n	800c286 <__kernel_rem_pio2+0x26e>
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	4958      	ldr	r1, [pc, #352]	; (800c350 <__kernel_rem_pio2+0x338>)
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	f7f4 f86a 	bl	80002c8 <__aeabi_dsub>
 800c1f4:	4606      	mov	r6, r0
 800c1f6:	460f      	mov	r7, r1
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	d044      	beq.n	800c286 <__kernel_rem_pio2+0x26e>
 800c1fc:	4650      	mov	r0, sl
 800c1fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c340 <__kernel_rem_pio2+0x328>
 800c202:	f000 fdd1 	bl	800cda8 <scalbn>
 800c206:	4630      	mov	r0, r6
 800c208:	4639      	mov	r1, r7
 800c20a:	ec53 2b10 	vmov	r2, r3, d0
 800c20e:	f7f4 f85b 	bl	80002c8 <__aeabi_dsub>
 800c212:	4606      	mov	r6, r0
 800c214:	460f      	mov	r7, r1
 800c216:	e036      	b.n	800c286 <__kernel_rem_pio2+0x26e>
 800c218:	4b4e      	ldr	r3, [pc, #312]	; (800c354 <__kernel_rem_pio2+0x33c>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	4630      	mov	r0, r6
 800c21e:	4639      	mov	r1, r7
 800c220:	f7f4 fa0a 	bl	8000638 <__aeabi_dmul>
 800c224:	f7f4 fcb8 	bl	8000b98 <__aeabi_d2iz>
 800c228:	f7f4 f99c 	bl	8000564 <__aeabi_i2d>
 800c22c:	4b4a      	ldr	r3, [pc, #296]	; (800c358 <__kernel_rem_pio2+0x340>)
 800c22e:	2200      	movs	r2, #0
 800c230:	4680      	mov	r8, r0
 800c232:	4689      	mov	r9, r1
 800c234:	f7f4 fa00 	bl	8000638 <__aeabi_dmul>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	4630      	mov	r0, r6
 800c23e:	4639      	mov	r1, r7
 800c240:	f7f4 f842 	bl	80002c8 <__aeabi_dsub>
 800c244:	f7f4 fca8 	bl	8000b98 <__aeabi_d2iz>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	f843 0b04 	str.w	r0, [r3], #4
 800c24e:	3d01      	subs	r5, #1
 800c250:	9302      	str	r3, [sp, #8]
 800c252:	ab70      	add	r3, sp, #448	; 0x1c0
 800c254:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	4640      	mov	r0, r8
 800c25e:	4649      	mov	r1, r9
 800c260:	f7f4 f834 	bl	80002cc <__adddf3>
 800c264:	4606      	mov	r6, r0
 800c266:	460f      	mov	r7, r1
 800c268:	e75b      	b.n	800c122 <__kernel_rem_pio2+0x10a>
 800c26a:	d105      	bne.n	800c278 <__kernel_rem_pio2+0x260>
 800c26c:	1e63      	subs	r3, r4, #1
 800c26e:	aa0c      	add	r2, sp, #48	; 0x30
 800c270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c274:	15c3      	asrs	r3, r0, #23
 800c276:	e79b      	b.n	800c1b0 <__kernel_rem_pio2+0x198>
 800c278:	4b38      	ldr	r3, [pc, #224]	; (800c35c <__kernel_rem_pio2+0x344>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	f7f4 fc62 	bl	8000b44 <__aeabi_dcmpge>
 800c280:	2800      	cmp	r0, #0
 800c282:	d139      	bne.n	800c2f8 <__kernel_rem_pio2+0x2e0>
 800c284:	9002      	str	r0, [sp, #8]
 800c286:	2200      	movs	r2, #0
 800c288:	2300      	movs	r3, #0
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7f4 fc3b 	bl	8000b08 <__aeabi_dcmpeq>
 800c292:	2800      	cmp	r0, #0
 800c294:	f000 80b4 	beq.w	800c400 <__kernel_rem_pio2+0x3e8>
 800c298:	f104 3bff 	add.w	fp, r4, #4294967295
 800c29c:	465b      	mov	r3, fp
 800c29e:	2200      	movs	r2, #0
 800c2a0:	9904      	ldr	r1, [sp, #16]
 800c2a2:	428b      	cmp	r3, r1
 800c2a4:	da65      	bge.n	800c372 <__kernel_rem_pio2+0x35a>
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	d07b      	beq.n	800c3a2 <__kernel_rem_pio2+0x38a>
 800c2aa:	ab0c      	add	r3, sp, #48	; 0x30
 800c2ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800c2b0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 80a0 	beq.w	800c3fa <__kernel_rem_pio2+0x3e2>
 800c2ba:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c340 <__kernel_rem_pio2+0x328>
 800c2be:	4650      	mov	r0, sl
 800c2c0:	f000 fd72 	bl	800cda8 <scalbn>
 800c2c4:	4f23      	ldr	r7, [pc, #140]	; (800c354 <__kernel_rem_pio2+0x33c>)
 800c2c6:	ec55 4b10 	vmov	r4, r5, d0
 800c2ca:	46d8      	mov	r8, fp
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	f1b8 0f00 	cmp.w	r8, #0
 800c2d2:	f280 80cf 	bge.w	800c474 <__kernel_rem_pio2+0x45c>
 800c2d6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c338 <__kernel_rem_pio2+0x320>
 800c2da:	465f      	mov	r7, fp
 800c2dc:	f04f 0800 	mov.w	r8, #0
 800c2e0:	2f00      	cmp	r7, #0
 800c2e2:	f2c0 80fd 	blt.w	800c4e0 <__kernel_rem_pio2+0x4c8>
 800c2e6:	ab70      	add	r3, sp, #448	; 0x1c0
 800c2e8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c360 <__kernel_rem_pio2+0x348>
 800c2ec:	ec55 4b18 	vmov	r4, r5, d8
 800c2f0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c2f4:	2600      	movs	r6, #0
 800c2f6:	e0e5      	b.n	800c4c4 <__kernel_rem_pio2+0x4ac>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	e75c      	b.n	800c1b8 <__kernel_rem_pio2+0x1a0>
 800c2fe:	f8db 3000 	ldr.w	r3, [fp]
 800c302:	b955      	cbnz	r5, 800c31a <__kernel_rem_pio2+0x302>
 800c304:	b123      	cbz	r3, 800c310 <__kernel_rem_pio2+0x2f8>
 800c306:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c30a:	f8cb 3000 	str.w	r3, [fp]
 800c30e:	2301      	movs	r3, #1
 800c310:	3201      	adds	r2, #1
 800c312:	f10b 0b04 	add.w	fp, fp, #4
 800c316:	461d      	mov	r5, r3
 800c318:	e755      	b.n	800c1c6 <__kernel_rem_pio2+0x1ae>
 800c31a:	1acb      	subs	r3, r1, r3
 800c31c:	f8cb 3000 	str.w	r3, [fp]
 800c320:	462b      	mov	r3, r5
 800c322:	e7f5      	b.n	800c310 <__kernel_rem_pio2+0x2f8>
 800c324:	1e62      	subs	r2, r4, #1
 800c326:	ab0c      	add	r3, sp, #48	; 0x30
 800c328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c32c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c330:	a90c      	add	r1, sp, #48	; 0x30
 800c332:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c336:	e754      	b.n	800c1e2 <__kernel_rem_pio2+0x1ca>
	...
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	0800d588 	.word	0x0800d588
 800c34c:	40200000 	.word	0x40200000
 800c350:	3ff00000 	.word	0x3ff00000
 800c354:	3e700000 	.word	0x3e700000
 800c358:	41700000 	.word	0x41700000
 800c35c:	3fe00000 	.word	0x3fe00000
 800c360:	0800d548 	.word	0x0800d548
 800c364:	1e62      	subs	r2, r4, #1
 800c366:	ab0c      	add	r3, sp, #48	; 0x30
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c370:	e7de      	b.n	800c330 <__kernel_rem_pio2+0x318>
 800c372:	a90c      	add	r1, sp, #48	; 0x30
 800c374:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c378:	3b01      	subs	r3, #1
 800c37a:	430a      	orrs	r2, r1
 800c37c:	e790      	b.n	800c2a0 <__kernel_rem_pio2+0x288>
 800c37e:	3301      	adds	r3, #1
 800c380:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c384:	2900      	cmp	r1, #0
 800c386:	d0fa      	beq.n	800c37e <__kernel_rem_pio2+0x366>
 800c388:	9a08      	ldr	r2, [sp, #32]
 800c38a:	18e3      	adds	r3, r4, r3
 800c38c:	18a6      	adds	r6, r4, r2
 800c38e:	aa20      	add	r2, sp, #128	; 0x80
 800c390:	1c65      	adds	r5, r4, #1
 800c392:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c396:	9302      	str	r3, [sp, #8]
 800c398:	9b02      	ldr	r3, [sp, #8]
 800c39a:	42ab      	cmp	r3, r5
 800c39c:	da04      	bge.n	800c3a8 <__kernel_rem_pio2+0x390>
 800c39e:	461c      	mov	r4, r3
 800c3a0:	e6b5      	b.n	800c10e <__kernel_rem_pio2+0xf6>
 800c3a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e7eb      	b.n	800c380 <__kernel_rem_pio2+0x368>
 800c3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ae:	f7f4 f8d9 	bl	8000564 <__aeabi_i2d>
 800c3b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b8:	46b3      	mov	fp, r6
 800c3ba:	461c      	mov	r4, r3
 800c3bc:	2700      	movs	r7, #0
 800c3be:	f04f 0800 	mov.w	r8, #0
 800c3c2:	f04f 0900 	mov.w	r9, #0
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	429f      	cmp	r7, r3
 800c3ca:	dd06      	ble.n	800c3da <__kernel_rem_pio2+0x3c2>
 800c3cc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c3ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c3d2:	e9c3 8900 	strd	r8, r9, [r3]
 800c3d6:	3501      	adds	r5, #1
 800c3d8:	e7de      	b.n	800c398 <__kernel_rem_pio2+0x380>
 800c3da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c3de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c3e2:	f7f4 f929 	bl	8000638 <__aeabi_dmul>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f3 ff6d 	bl	80002cc <__adddf3>
 800c3f2:	3701      	adds	r7, #1
 800c3f4:	4680      	mov	r8, r0
 800c3f6:	4689      	mov	r9, r1
 800c3f8:	e7e5      	b.n	800c3c6 <__kernel_rem_pio2+0x3ae>
 800c3fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3fe:	e754      	b.n	800c2aa <__kernel_rem_pio2+0x292>
 800c400:	ec47 6b10 	vmov	d0, r6, r7
 800c404:	f1ca 0000 	rsb	r0, sl, #0
 800c408:	f000 fcce 	bl	800cda8 <scalbn>
 800c40c:	ec57 6b10 	vmov	r6, r7, d0
 800c410:	4b9f      	ldr	r3, [pc, #636]	; (800c690 <__kernel_rem_pio2+0x678>)
 800c412:	ee10 0a10 	vmov	r0, s0
 800c416:	2200      	movs	r2, #0
 800c418:	4639      	mov	r1, r7
 800c41a:	f7f4 fb93 	bl	8000b44 <__aeabi_dcmpge>
 800c41e:	b300      	cbz	r0, 800c462 <__kernel_rem_pio2+0x44a>
 800c420:	4b9c      	ldr	r3, [pc, #624]	; (800c694 <__kernel_rem_pio2+0x67c>)
 800c422:	2200      	movs	r2, #0
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f4 f906 	bl	8000638 <__aeabi_dmul>
 800c42c:	f7f4 fbb4 	bl	8000b98 <__aeabi_d2iz>
 800c430:	4605      	mov	r5, r0
 800c432:	f7f4 f897 	bl	8000564 <__aeabi_i2d>
 800c436:	4b96      	ldr	r3, [pc, #600]	; (800c690 <__kernel_rem_pio2+0x678>)
 800c438:	2200      	movs	r2, #0
 800c43a:	f7f4 f8fd 	bl	8000638 <__aeabi_dmul>
 800c43e:	460b      	mov	r3, r1
 800c440:	4602      	mov	r2, r0
 800c442:	4639      	mov	r1, r7
 800c444:	4630      	mov	r0, r6
 800c446:	f7f3 ff3f 	bl	80002c8 <__aeabi_dsub>
 800c44a:	f7f4 fba5 	bl	8000b98 <__aeabi_d2iz>
 800c44e:	f104 0b01 	add.w	fp, r4, #1
 800c452:	ab0c      	add	r3, sp, #48	; 0x30
 800c454:	f10a 0a18 	add.w	sl, sl, #24
 800c458:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c45c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c460:	e72b      	b.n	800c2ba <__kernel_rem_pio2+0x2a2>
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f4 fb97 	bl	8000b98 <__aeabi_d2iz>
 800c46a:	ab0c      	add	r3, sp, #48	; 0x30
 800c46c:	46a3      	mov	fp, r4
 800c46e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c472:	e722      	b.n	800c2ba <__kernel_rem_pio2+0x2a2>
 800c474:	ab70      	add	r3, sp, #448	; 0x1c0
 800c476:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c47a:	ab0c      	add	r3, sp, #48	; 0x30
 800c47c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c480:	f7f4 f870 	bl	8000564 <__aeabi_i2d>
 800c484:	4622      	mov	r2, r4
 800c486:	462b      	mov	r3, r5
 800c488:	f7f4 f8d6 	bl	8000638 <__aeabi_dmul>
 800c48c:	4632      	mov	r2, r6
 800c48e:	e9c9 0100 	strd	r0, r1, [r9]
 800c492:	463b      	mov	r3, r7
 800c494:	4620      	mov	r0, r4
 800c496:	4629      	mov	r1, r5
 800c498:	f7f4 f8ce 	bl	8000638 <__aeabi_dmul>
 800c49c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	460d      	mov	r5, r1
 800c4a4:	e713      	b.n	800c2ce <__kernel_rem_pio2+0x2b6>
 800c4a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c4aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c4ae:	f7f4 f8c3 	bl	8000638 <__aeabi_dmul>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7f3 ff07 	bl	80002cc <__adddf3>
 800c4be:	3601      	adds	r6, #1
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	429e      	cmp	r6, r3
 800c4c8:	dc01      	bgt.n	800c4ce <__kernel_rem_pio2+0x4b6>
 800c4ca:	45b0      	cmp	r8, r6
 800c4cc:	daeb      	bge.n	800c4a6 <__kernel_rem_pio2+0x48e>
 800c4ce:	ab48      	add	r3, sp, #288	; 0x120
 800c4d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c4d4:	e9c3 4500 	strd	r4, r5, [r3]
 800c4d8:	3f01      	subs	r7, #1
 800c4da:	f108 0801 	add.w	r8, r8, #1
 800c4de:	e6ff      	b.n	800c2e0 <__kernel_rem_pio2+0x2c8>
 800c4e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	dc0b      	bgt.n	800c4fe <__kernel_rem_pio2+0x4e6>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	dc6e      	bgt.n	800c5c8 <__kernel_rem_pio2+0x5b0>
 800c4ea:	d045      	beq.n	800c578 <__kernel_rem_pio2+0x560>
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	f003 0007 	and.w	r0, r3, #7
 800c4f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c4f6:	ecbd 8b02 	vpop	{d8}
 800c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c500:	2b03      	cmp	r3, #3
 800c502:	d1f3      	bne.n	800c4ec <__kernel_rem_pio2+0x4d4>
 800c504:	ab48      	add	r3, sp, #288	; 0x120
 800c506:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c50a:	46d0      	mov	r8, sl
 800c50c:	46d9      	mov	r9, fp
 800c50e:	f1b9 0f00 	cmp.w	r9, #0
 800c512:	f1a8 0808 	sub.w	r8, r8, #8
 800c516:	dc64      	bgt.n	800c5e2 <__kernel_rem_pio2+0x5ca>
 800c518:	465c      	mov	r4, fp
 800c51a:	2c01      	cmp	r4, #1
 800c51c:	f1aa 0a08 	sub.w	sl, sl, #8
 800c520:	dc7e      	bgt.n	800c620 <__kernel_rem_pio2+0x608>
 800c522:	2000      	movs	r0, #0
 800c524:	2100      	movs	r1, #0
 800c526:	f1bb 0f01 	cmp.w	fp, #1
 800c52a:	f300 8097 	bgt.w	800c65c <__kernel_rem_pio2+0x644>
 800c52e:	9b02      	ldr	r3, [sp, #8]
 800c530:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c534:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f040 8099 	bne.w	800c670 <__kernel_rem_pio2+0x658>
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	e9c3 5600 	strd	r5, r6, [r3]
 800c544:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c548:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c54c:	e7ce      	b.n	800c4ec <__kernel_rem_pio2+0x4d4>
 800c54e:	ab48      	add	r3, sp, #288	; 0x120
 800c550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f7f3 feb8 	bl	80002cc <__adddf3>
 800c55c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c560:	f1bb 0f00 	cmp.w	fp, #0
 800c564:	daf3      	bge.n	800c54e <__kernel_rem_pio2+0x536>
 800c566:	9b02      	ldr	r3, [sp, #8]
 800c568:	b113      	cbz	r3, 800c570 <__kernel_rem_pio2+0x558>
 800c56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c56e:	4619      	mov	r1, r3
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	e9c3 0100 	strd	r0, r1, [r3]
 800c576:	e7b9      	b.n	800c4ec <__kernel_rem_pio2+0x4d4>
 800c578:	2000      	movs	r0, #0
 800c57a:	2100      	movs	r1, #0
 800c57c:	e7f0      	b.n	800c560 <__kernel_rem_pio2+0x548>
 800c57e:	ab48      	add	r3, sp, #288	; 0x120
 800c580:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fea0 	bl	80002cc <__adddf3>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	2c00      	cmp	r4, #0
 800c590:	daf5      	bge.n	800c57e <__kernel_rem_pio2+0x566>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	b1e3      	cbz	r3, 800c5d0 <__kernel_rem_pio2+0x5b8>
 800c596:	4602      	mov	r2, r0
 800c598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c59c:	9c01      	ldr	r4, [sp, #4]
 800c59e:	e9c4 2300 	strd	r2, r3, [r4]
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c5aa:	f7f3 fe8d 	bl	80002c8 <__aeabi_dsub>
 800c5ae:	ad4a      	add	r5, sp, #296	; 0x128
 800c5b0:	2401      	movs	r4, #1
 800c5b2:	45a3      	cmp	fp, r4
 800c5b4:	da0f      	bge.n	800c5d6 <__kernel_rem_pio2+0x5be>
 800c5b6:	9b02      	ldr	r3, [sp, #8]
 800c5b8:	b113      	cbz	r3, 800c5c0 <__kernel_rem_pio2+0x5a8>
 800c5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5be:	4619      	mov	r1, r3
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c5c6:	e791      	b.n	800c4ec <__kernel_rem_pio2+0x4d4>
 800c5c8:	465c      	mov	r4, fp
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	e7de      	b.n	800c58e <__kernel_rem_pio2+0x576>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	e7e2      	b.n	800c59c <__kernel_rem_pio2+0x584>
 800c5d6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c5da:	f7f3 fe77 	bl	80002cc <__adddf3>
 800c5de:	3401      	adds	r4, #1
 800c5e0:	e7e7      	b.n	800c5b2 <__kernel_rem_pio2+0x59a>
 800c5e2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c5e6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	4632      	mov	r2, r6
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7f3 fe6b 	bl	80002cc <__adddf3>
 800c5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4620      	mov	r0, r4
 800c600:	4629      	mov	r1, r5
 800c602:	f7f3 fe61 	bl	80002c8 <__aeabi_dsub>
 800c606:	4632      	mov	r2, r6
 800c608:	463b      	mov	r3, r7
 800c60a:	f7f3 fe5f 	bl	80002cc <__adddf3>
 800c60e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c612:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c616:	ed88 7b00 	vstr	d7, [r8]
 800c61a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c61e:	e776      	b.n	800c50e <__kernel_rem_pio2+0x4f6>
 800c620:	e9da 8900 	ldrd	r8, r9, [sl]
 800c624:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c628:	4640      	mov	r0, r8
 800c62a:	4632      	mov	r2, r6
 800c62c:	463b      	mov	r3, r7
 800c62e:	4649      	mov	r1, r9
 800c630:	f7f3 fe4c 	bl	80002cc <__adddf3>
 800c634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4640      	mov	r0, r8
 800c63e:	4649      	mov	r1, r9
 800c640:	f7f3 fe42 	bl	80002c8 <__aeabi_dsub>
 800c644:	4632      	mov	r2, r6
 800c646:	463b      	mov	r3, r7
 800c648:	f7f3 fe40 	bl	80002cc <__adddf3>
 800c64c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c654:	ed8a 7b00 	vstr	d7, [sl]
 800c658:	3c01      	subs	r4, #1
 800c65a:	e75e      	b.n	800c51a <__kernel_rem_pio2+0x502>
 800c65c:	ab48      	add	r3, sp, #288	; 0x120
 800c65e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 fe31 	bl	80002cc <__adddf3>
 800c66a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c66e:	e75a      	b.n	800c526 <__kernel_rem_pio2+0x50e>
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	9a01      	ldr	r2, [sp, #4]
 800c674:	601d      	str	r5, [r3, #0]
 800c676:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c67a:	605c      	str	r4, [r3, #4]
 800c67c:	609f      	str	r7, [r3, #8]
 800c67e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c682:	60d3      	str	r3, [r2, #12]
 800c684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c688:	6110      	str	r0, [r2, #16]
 800c68a:	6153      	str	r3, [r2, #20]
 800c68c:	e72e      	b.n	800c4ec <__kernel_rem_pio2+0x4d4>
 800c68e:	bf00      	nop
 800c690:	41700000 	.word	0x41700000
 800c694:	3e700000 	.word	0x3e700000

0800c698 <__kernel_sin>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ed2d 8b04 	vpush	{d8-d9}
 800c6a0:	eeb0 8a41 	vmov.f32	s16, s2
 800c6a4:	eef0 8a61 	vmov.f32	s17, s3
 800c6a8:	ec55 4b10 	vmov	r4, r5, d0
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c6b6:	9001      	str	r0, [sp, #4]
 800c6b8:	da06      	bge.n	800c6c8 <__kernel_sin+0x30>
 800c6ba:	ee10 0a10 	vmov	r0, s0
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f4 fa6a 	bl	8000b98 <__aeabi_d2iz>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d051      	beq.n	800c76c <__kernel_sin+0xd4>
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	462b      	mov	r3, r5
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f7f3 ffb2 	bl	8000638 <__aeabi_dmul>
 800c6d4:	4682      	mov	sl, r0
 800c6d6:	468b      	mov	fp, r1
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 ffaa 	bl	8000638 <__aeabi_dmul>
 800c6e4:	a341      	add	r3, pc, #260	; (adr r3, 800c7ec <__kernel_sin+0x154>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	4680      	mov	r8, r0
 800c6ec:	4689      	mov	r9, r1
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	4659      	mov	r1, fp
 800c6f2:	f7f3 ffa1 	bl	8000638 <__aeabi_dmul>
 800c6f6:	a33f      	add	r3, pc, #252	; (adr r3, 800c7f4 <__kernel_sin+0x15c>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 fde4 	bl	80002c8 <__aeabi_dsub>
 800c700:	4652      	mov	r2, sl
 800c702:	465b      	mov	r3, fp
 800c704:	f7f3 ff98 	bl	8000638 <__aeabi_dmul>
 800c708:	a33c      	add	r3, pc, #240	; (adr r3, 800c7fc <__kernel_sin+0x164>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 fddd 	bl	80002cc <__adddf3>
 800c712:	4652      	mov	r2, sl
 800c714:	465b      	mov	r3, fp
 800c716:	f7f3 ff8f 	bl	8000638 <__aeabi_dmul>
 800c71a:	a33a      	add	r3, pc, #232	; (adr r3, 800c804 <__kernel_sin+0x16c>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f3 fdd2 	bl	80002c8 <__aeabi_dsub>
 800c724:	4652      	mov	r2, sl
 800c726:	465b      	mov	r3, fp
 800c728:	f7f3 ff86 	bl	8000638 <__aeabi_dmul>
 800c72c:	a337      	add	r3, pc, #220	; (adr r3, 800c80c <__kernel_sin+0x174>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f3 fdcb 	bl	80002cc <__adddf3>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	b9eb      	cbnz	r3, 800c77a <__kernel_sin+0xe2>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4650      	mov	r0, sl
 800c744:	4659      	mov	r1, fp
 800c746:	f7f3 ff77 	bl	8000638 <__aeabi_dmul>
 800c74a:	a325      	add	r3, pc, #148	; (adr r3, 800c7e0 <__kernel_sin+0x148>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f7f3 fdba 	bl	80002c8 <__aeabi_dsub>
 800c754:	4642      	mov	r2, r8
 800c756:	464b      	mov	r3, r9
 800c758:	f7f3 ff6e 	bl	8000638 <__aeabi_dmul>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4620      	mov	r0, r4
 800c762:	4629      	mov	r1, r5
 800c764:	f7f3 fdb2 	bl	80002cc <__adddf3>
 800c768:	4604      	mov	r4, r0
 800c76a:	460d      	mov	r5, r1
 800c76c:	ec45 4b10 	vmov	d0, r4, r5
 800c770:	b003      	add	sp, #12
 800c772:	ecbd 8b04 	vpop	{d8-d9}
 800c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <__kernel_sin+0x150>)
 800c77c:	ec51 0b18 	vmov	r0, r1, d8
 800c780:	2200      	movs	r2, #0
 800c782:	f7f3 ff59 	bl	8000638 <__aeabi_dmul>
 800c786:	4632      	mov	r2, r6
 800c788:	ec41 0b19 	vmov	d9, r0, r1
 800c78c:	463b      	mov	r3, r7
 800c78e:	4640      	mov	r0, r8
 800c790:	4649      	mov	r1, r9
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	ec51 0b19 	vmov	r0, r1, d9
 800c79e:	f7f3 fd93 	bl	80002c8 <__aeabi_dsub>
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	465b      	mov	r3, fp
 800c7a6:	f7f3 ff47 	bl	8000638 <__aeabi_dmul>
 800c7aa:	ec53 2b18 	vmov	r2, r3, d8
 800c7ae:	f7f3 fd8b 	bl	80002c8 <__aeabi_dsub>
 800c7b2:	a30b      	add	r3, pc, #44	; (adr r3, 800c7e0 <__kernel_sin+0x148>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	460f      	mov	r7, r1
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	f7f3 ff3a 	bl	8000638 <__aeabi_dmul>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f3 fd7e 	bl	80002cc <__adddf3>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	f7f3 fd76 	bl	80002c8 <__aeabi_dsub>
 800c7dc:	e7c4      	b.n	800c768 <__kernel_sin+0xd0>
 800c7de:	bf00      	nop
 800c7e0:	55555549 	.word	0x55555549
 800c7e4:	3fc55555 	.word	0x3fc55555
 800c7e8:	3fe00000 	.word	0x3fe00000
 800c7ec:	5acfd57c 	.word	0x5acfd57c
 800c7f0:	3de5d93a 	.word	0x3de5d93a
 800c7f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c7f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c7fc:	57b1fe7d 	.word	0x57b1fe7d
 800c800:	3ec71de3 	.word	0x3ec71de3
 800c804:	19c161d5 	.word	0x19c161d5
 800c808:	3f2a01a0 	.word	0x3f2a01a0
 800c80c:	1110f8a6 	.word	0x1110f8a6
 800c810:	3f811111 	.word	0x3f811111
 800c814:	00000000 	.word	0x00000000

0800c818 <atan>:
 800c818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	ec55 4b10 	vmov	r4, r5, d0
 800c820:	4bc3      	ldr	r3, [pc, #780]	; (800cb30 <atan+0x318>)
 800c822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c826:	429e      	cmp	r6, r3
 800c828:	46ab      	mov	fp, r5
 800c82a:	dd18      	ble.n	800c85e <atan+0x46>
 800c82c:	4bc1      	ldr	r3, [pc, #772]	; (800cb34 <atan+0x31c>)
 800c82e:	429e      	cmp	r6, r3
 800c830:	dc01      	bgt.n	800c836 <atan+0x1e>
 800c832:	d109      	bne.n	800c848 <atan+0x30>
 800c834:	b144      	cbz	r4, 800c848 <atan+0x30>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	4620      	mov	r0, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7f3 fd45 	bl	80002cc <__adddf3>
 800c842:	4604      	mov	r4, r0
 800c844:	460d      	mov	r5, r1
 800c846:	e006      	b.n	800c856 <atan+0x3e>
 800c848:	f1bb 0f00 	cmp.w	fp, #0
 800c84c:	f300 8131 	bgt.w	800cab2 <atan+0x29a>
 800c850:	a59b      	add	r5, pc, #620	; (adr r5, 800cac0 <atan+0x2a8>)
 800c852:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c856:	ec45 4b10 	vmov	d0, r4, r5
 800c85a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85e:	4bb6      	ldr	r3, [pc, #728]	; (800cb38 <atan+0x320>)
 800c860:	429e      	cmp	r6, r3
 800c862:	dc14      	bgt.n	800c88e <atan+0x76>
 800c864:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c868:	429e      	cmp	r6, r3
 800c86a:	dc0d      	bgt.n	800c888 <atan+0x70>
 800c86c:	a396      	add	r3, pc, #600	; (adr r3, 800cac8 <atan+0x2b0>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	ee10 0a10 	vmov	r0, s0
 800c876:	4629      	mov	r1, r5
 800c878:	f7f3 fd28 	bl	80002cc <__adddf3>
 800c87c:	4baf      	ldr	r3, [pc, #700]	; (800cb3c <atan+0x324>)
 800c87e:	2200      	movs	r2, #0
 800c880:	f7f4 f96a 	bl	8000b58 <__aeabi_dcmpgt>
 800c884:	2800      	cmp	r0, #0
 800c886:	d1e6      	bne.n	800c856 <atan+0x3e>
 800c888:	f04f 3aff 	mov.w	sl, #4294967295
 800c88c:	e02b      	b.n	800c8e6 <atan+0xce>
 800c88e:	f000 f963 	bl	800cb58 <fabs>
 800c892:	4bab      	ldr	r3, [pc, #684]	; (800cb40 <atan+0x328>)
 800c894:	429e      	cmp	r6, r3
 800c896:	ec55 4b10 	vmov	r4, r5, d0
 800c89a:	f300 80bf 	bgt.w	800ca1c <atan+0x204>
 800c89e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c8a2:	429e      	cmp	r6, r3
 800c8a4:	f300 80a0 	bgt.w	800c9e8 <atan+0x1d0>
 800c8a8:	ee10 2a10 	vmov	r2, s0
 800c8ac:	ee10 0a10 	vmov	r0, s0
 800c8b0:	462b      	mov	r3, r5
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fd0a 	bl	80002cc <__adddf3>
 800c8b8:	4ba0      	ldr	r3, [pc, #640]	; (800cb3c <atan+0x324>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f7f3 fd04 	bl	80002c8 <__aeabi_dsub>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f3 fcfd 	bl	80002cc <__adddf3>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	f7f3 ffd7 	bl	800088c <__aeabi_ddiv>
 800c8de:	f04f 0a00 	mov.w	sl, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f7f3 fea3 	bl	8000638 <__aeabi_dmul>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4680      	mov	r8, r0
 800c8f8:	4689      	mov	r9, r1
 800c8fa:	f7f3 fe9d 	bl	8000638 <__aeabi_dmul>
 800c8fe:	a374      	add	r3, pc, #464	; (adr r3, 800cad0 <atan+0x2b8>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	f7f3 fe96 	bl	8000638 <__aeabi_dmul>
 800c90c:	a372      	add	r3, pc, #456	; (adr r3, 800cad8 <atan+0x2c0>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f7f3 fcdb 	bl	80002cc <__adddf3>
 800c916:	4632      	mov	r2, r6
 800c918:	463b      	mov	r3, r7
 800c91a:	f7f3 fe8d 	bl	8000638 <__aeabi_dmul>
 800c91e:	a370      	add	r3, pc, #448	; (adr r3, 800cae0 <atan+0x2c8>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f7f3 fcd2 	bl	80002cc <__adddf3>
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	f7f3 fe84 	bl	8000638 <__aeabi_dmul>
 800c930:	a36d      	add	r3, pc, #436	; (adr r3, 800cae8 <atan+0x2d0>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fcc9 	bl	80002cc <__adddf3>
 800c93a:	4632      	mov	r2, r6
 800c93c:	463b      	mov	r3, r7
 800c93e:	f7f3 fe7b 	bl	8000638 <__aeabi_dmul>
 800c942:	a36b      	add	r3, pc, #428	; (adr r3, 800caf0 <atan+0x2d8>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fcc0 	bl	80002cc <__adddf3>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	f7f3 fe72 	bl	8000638 <__aeabi_dmul>
 800c954:	a368      	add	r3, pc, #416	; (adr r3, 800caf8 <atan+0x2e0>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fcb7 	bl	80002cc <__adddf3>
 800c95e:	4642      	mov	r2, r8
 800c960:	464b      	mov	r3, r9
 800c962:	f7f3 fe69 	bl	8000638 <__aeabi_dmul>
 800c966:	a366      	add	r3, pc, #408	; (adr r3, 800cb00 <atan+0x2e8>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	4680      	mov	r8, r0
 800c96e:	4689      	mov	r9, r1
 800c970:	4630      	mov	r0, r6
 800c972:	4639      	mov	r1, r7
 800c974:	f7f3 fe60 	bl	8000638 <__aeabi_dmul>
 800c978:	a363      	add	r3, pc, #396	; (adr r3, 800cb08 <atan+0x2f0>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fca3 	bl	80002c8 <__aeabi_dsub>
 800c982:	4632      	mov	r2, r6
 800c984:	463b      	mov	r3, r7
 800c986:	f7f3 fe57 	bl	8000638 <__aeabi_dmul>
 800c98a:	a361      	add	r3, pc, #388	; (adr r3, 800cb10 <atan+0x2f8>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc9a 	bl	80002c8 <__aeabi_dsub>
 800c994:	4632      	mov	r2, r6
 800c996:	463b      	mov	r3, r7
 800c998:	f7f3 fe4e 	bl	8000638 <__aeabi_dmul>
 800c99c:	a35e      	add	r3, pc, #376	; (adr r3, 800cb18 <atan+0x300>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc91 	bl	80002c8 <__aeabi_dsub>
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	f7f3 fe45 	bl	8000638 <__aeabi_dmul>
 800c9ae:	a35c      	add	r3, pc, #368	; (adr r3, 800cb20 <atan+0x308>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc88 	bl	80002c8 <__aeabi_dsub>
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	f7f3 fe3c 	bl	8000638 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	f7f3 fc80 	bl	80002cc <__adddf3>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	f7f3 fe32 	bl	8000638 <__aeabi_dmul>
 800c9d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	d14b      	bne.n	800ca76 <atan+0x25e>
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	f7f3 fc71 	bl	80002c8 <__aeabi_dsub>
 800c9e6:	e72c      	b.n	800c842 <atan+0x2a>
 800c9e8:	ee10 0a10 	vmov	r0, s0
 800c9ec:	4b53      	ldr	r3, [pc, #332]	; (800cb3c <atan+0x324>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7f3 fc69 	bl	80002c8 <__aeabi_dsub>
 800c9f6:	4b51      	ldr	r3, [pc, #324]	; (800cb3c <atan+0x324>)
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7f3 fc63 	bl	80002cc <__adddf3>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f3 ff3d 	bl	800088c <__aeabi_ddiv>
 800ca12:	f04f 0a01 	mov.w	sl, #1
 800ca16:	4604      	mov	r4, r0
 800ca18:	460d      	mov	r5, r1
 800ca1a:	e764      	b.n	800c8e6 <atan+0xce>
 800ca1c:	4b49      	ldr	r3, [pc, #292]	; (800cb44 <atan+0x32c>)
 800ca1e:	429e      	cmp	r6, r3
 800ca20:	da1d      	bge.n	800ca5e <atan+0x246>
 800ca22:	ee10 0a10 	vmov	r0, s0
 800ca26:	4b48      	ldr	r3, [pc, #288]	; (800cb48 <atan+0x330>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7f3 fc4c 	bl	80002c8 <__aeabi_dsub>
 800ca30:	4b45      	ldr	r3, [pc, #276]	; (800cb48 <atan+0x330>)
 800ca32:	4606      	mov	r6, r0
 800ca34:	460f      	mov	r7, r1
 800ca36:	2200      	movs	r2, #0
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fdfc 	bl	8000638 <__aeabi_dmul>
 800ca40:	4b3e      	ldr	r3, [pc, #248]	; (800cb3c <atan+0x324>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	f7f3 fc42 	bl	80002cc <__adddf3>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f3 ff1c 	bl	800088c <__aeabi_ddiv>
 800ca54:	f04f 0a02 	mov.w	sl, #2
 800ca58:	4604      	mov	r4, r0
 800ca5a:	460d      	mov	r5, r1
 800ca5c:	e743      	b.n	800c8e6 <atan+0xce>
 800ca5e:	462b      	mov	r3, r5
 800ca60:	ee10 2a10 	vmov	r2, s0
 800ca64:	4939      	ldr	r1, [pc, #228]	; (800cb4c <atan+0x334>)
 800ca66:	2000      	movs	r0, #0
 800ca68:	f7f3 ff10 	bl	800088c <__aeabi_ddiv>
 800ca6c:	f04f 0a03 	mov.w	sl, #3
 800ca70:	4604      	mov	r4, r0
 800ca72:	460d      	mov	r5, r1
 800ca74:	e737      	b.n	800c8e6 <atan+0xce>
 800ca76:	4b36      	ldr	r3, [pc, #216]	; (800cb50 <atan+0x338>)
 800ca78:	4e36      	ldr	r6, [pc, #216]	; (800cb54 <atan+0x33c>)
 800ca7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ca7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ca82:	e9da 2300 	ldrd	r2, r3, [sl]
 800ca86:	f7f3 fc1f 	bl	80002c8 <__aeabi_dsub>
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	462b      	mov	r3, r5
 800ca8e:	f7f3 fc1b 	bl	80002c8 <__aeabi_dsub>
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
 800ca96:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ca9a:	f7f3 fc15 	bl	80002c8 <__aeabi_dsub>
 800ca9e:	f1bb 0f00 	cmp.w	fp, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	460d      	mov	r5, r1
 800caa6:	f6bf aed6 	bge.w	800c856 <atan+0x3e>
 800caaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caae:	461d      	mov	r5, r3
 800cab0:	e6d1      	b.n	800c856 <atan+0x3e>
 800cab2:	a51d      	add	r5, pc, #116	; (adr r5, 800cb28 <atan+0x310>)
 800cab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cab8:	e6cd      	b.n	800c856 <atan+0x3e>
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w
 800cac0:	54442d18 	.word	0x54442d18
 800cac4:	bff921fb 	.word	0xbff921fb
 800cac8:	8800759c 	.word	0x8800759c
 800cacc:	7e37e43c 	.word	0x7e37e43c
 800cad0:	e322da11 	.word	0xe322da11
 800cad4:	3f90ad3a 	.word	0x3f90ad3a
 800cad8:	24760deb 	.word	0x24760deb
 800cadc:	3fa97b4b 	.word	0x3fa97b4b
 800cae0:	a0d03d51 	.word	0xa0d03d51
 800cae4:	3fb10d66 	.word	0x3fb10d66
 800cae8:	c54c206e 	.word	0xc54c206e
 800caec:	3fb745cd 	.word	0x3fb745cd
 800caf0:	920083ff 	.word	0x920083ff
 800caf4:	3fc24924 	.word	0x3fc24924
 800caf8:	5555550d 	.word	0x5555550d
 800cafc:	3fd55555 	.word	0x3fd55555
 800cb00:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb04:	bfa2b444 	.word	0xbfa2b444
 800cb08:	52defd9a 	.word	0x52defd9a
 800cb0c:	3fadde2d 	.word	0x3fadde2d
 800cb10:	af749a6d 	.word	0xaf749a6d
 800cb14:	3fb3b0f2 	.word	0x3fb3b0f2
 800cb18:	fe231671 	.word	0xfe231671
 800cb1c:	3fbc71c6 	.word	0x3fbc71c6
 800cb20:	9998ebc4 	.word	0x9998ebc4
 800cb24:	3fc99999 	.word	0x3fc99999
 800cb28:	54442d18 	.word	0x54442d18
 800cb2c:	3ff921fb 	.word	0x3ff921fb
 800cb30:	440fffff 	.word	0x440fffff
 800cb34:	7ff00000 	.word	0x7ff00000
 800cb38:	3fdbffff 	.word	0x3fdbffff
 800cb3c:	3ff00000 	.word	0x3ff00000
 800cb40:	3ff2ffff 	.word	0x3ff2ffff
 800cb44:	40038000 	.word	0x40038000
 800cb48:	3ff80000 	.word	0x3ff80000
 800cb4c:	bff00000 	.word	0xbff00000
 800cb50:	0800d5b8 	.word	0x0800d5b8
 800cb54:	0800d598 	.word	0x0800d598

0800cb58 <fabs>:
 800cb58:	ec51 0b10 	vmov	r0, r1, d0
 800cb5c:	ee10 2a10 	vmov	r2, s0
 800cb60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb64:	ec43 2b10 	vmov	d0, r2, r3
 800cb68:	4770      	bx	lr

0800cb6a <finite>:
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	ed8d 0b00 	vstr	d0, [sp]
 800cb70:	9801      	ldr	r0, [sp, #4]
 800cb72:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb7a:	0fc0      	lsrs	r0, r0, #31
 800cb7c:	b002      	add	sp, #8
 800cb7e:	4770      	bx	lr

0800cb80 <floor>:
 800cb80:	ec51 0b10 	vmov	r0, r1, d0
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cb8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cb90:	2e13      	cmp	r6, #19
 800cb92:	ee10 5a10 	vmov	r5, s0
 800cb96:	ee10 8a10 	vmov	r8, s0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	dc32      	bgt.n	800cc04 <floor+0x84>
 800cb9e:	2e00      	cmp	r6, #0
 800cba0:	da14      	bge.n	800cbcc <floor+0x4c>
 800cba2:	a333      	add	r3, pc, #204	; (adr r3, 800cc70 <floor+0xf0>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fb90 	bl	80002cc <__adddf3>
 800cbac:	2200      	movs	r2, #0
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f7f3 ffd2 	bl	8000b58 <__aeabi_dcmpgt>
 800cbb4:	b138      	cbz	r0, 800cbc6 <floor+0x46>
 800cbb6:	2c00      	cmp	r4, #0
 800cbb8:	da57      	bge.n	800cc6a <floor+0xea>
 800cbba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cbbe:	431d      	orrs	r5, r3
 800cbc0:	d001      	beq.n	800cbc6 <floor+0x46>
 800cbc2:	4c2d      	ldr	r4, [pc, #180]	; (800cc78 <floor+0xf8>)
 800cbc4:	2500      	movs	r5, #0
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4628      	mov	r0, r5
 800cbca:	e025      	b.n	800cc18 <floor+0x98>
 800cbcc:	4f2b      	ldr	r7, [pc, #172]	; (800cc7c <floor+0xfc>)
 800cbce:	4137      	asrs	r7, r6
 800cbd0:	ea01 0307 	and.w	r3, r1, r7
 800cbd4:	4303      	orrs	r3, r0
 800cbd6:	d01f      	beq.n	800cc18 <floor+0x98>
 800cbd8:	a325      	add	r3, pc, #148	; (adr r3, 800cc70 <floor+0xf0>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	f7f3 fb75 	bl	80002cc <__adddf3>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f7f3 ffb7 	bl	8000b58 <__aeabi_dcmpgt>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d0eb      	beq.n	800cbc6 <floor+0x46>
 800cbee:	2c00      	cmp	r4, #0
 800cbf0:	bfbe      	ittt	lt
 800cbf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cbf6:	fa43 f606 	asrlt.w	r6, r3, r6
 800cbfa:	19a4      	addlt	r4, r4, r6
 800cbfc:	ea24 0407 	bic.w	r4, r4, r7
 800cc00:	2500      	movs	r5, #0
 800cc02:	e7e0      	b.n	800cbc6 <floor+0x46>
 800cc04:	2e33      	cmp	r6, #51	; 0x33
 800cc06:	dd0b      	ble.n	800cc20 <floor+0xa0>
 800cc08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc0c:	d104      	bne.n	800cc18 <floor+0x98>
 800cc0e:	ee10 2a10 	vmov	r2, s0
 800cc12:	460b      	mov	r3, r1
 800cc14:	f7f3 fb5a 	bl	80002cc <__adddf3>
 800cc18:	ec41 0b10 	vmov	d0, r0, r1
 800cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295
 800cc28:	fa23 f707 	lsr.w	r7, r3, r7
 800cc2c:	4207      	tst	r7, r0
 800cc2e:	d0f3      	beq.n	800cc18 <floor+0x98>
 800cc30:	a30f      	add	r3, pc, #60	; (adr r3, 800cc70 <floor+0xf0>)
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	f7f3 fb49 	bl	80002cc <__adddf3>
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f7f3 ff8b 	bl	8000b58 <__aeabi_dcmpgt>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d0bf      	beq.n	800cbc6 <floor+0x46>
 800cc46:	2c00      	cmp	r4, #0
 800cc48:	da02      	bge.n	800cc50 <floor+0xd0>
 800cc4a:	2e14      	cmp	r6, #20
 800cc4c:	d103      	bne.n	800cc56 <floor+0xd6>
 800cc4e:	3401      	adds	r4, #1
 800cc50:	ea25 0507 	bic.w	r5, r5, r7
 800cc54:	e7b7      	b.n	800cbc6 <floor+0x46>
 800cc56:	2301      	movs	r3, #1
 800cc58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc5c:	fa03 f606 	lsl.w	r6, r3, r6
 800cc60:	4435      	add	r5, r6
 800cc62:	4545      	cmp	r5, r8
 800cc64:	bf38      	it	cc
 800cc66:	18e4      	addcc	r4, r4, r3
 800cc68:	e7f2      	b.n	800cc50 <floor+0xd0>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	462c      	mov	r4, r5
 800cc6e:	e7aa      	b.n	800cbc6 <floor+0x46>
 800cc70:	8800759c 	.word	0x8800759c
 800cc74:	7e37e43c 	.word	0x7e37e43c
 800cc78:	bff00000 	.word	0xbff00000
 800cc7c:	000fffff 	.word	0x000fffff

0800cc80 <nan>:
 800cc80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc88 <nan+0x8>
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	00000000 	.word	0x00000000
 800cc8c:	7ff80000 	.word	0x7ff80000

0800cc90 <rint>:
 800cc90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc92:	ec51 0b10 	vmov	r0, r1, d0
 800cc96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cc9e:	2e13      	cmp	r6, #19
 800cca0:	ee10 4a10 	vmov	r4, s0
 800cca4:	460b      	mov	r3, r1
 800cca6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ccaa:	dc58      	bgt.n	800cd5e <rint+0xce>
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	da2b      	bge.n	800cd08 <rint+0x78>
 800ccb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccb4:	4302      	orrs	r2, r0
 800ccb6:	d023      	beq.n	800cd00 <rint+0x70>
 800ccb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ccbc:	4302      	orrs	r2, r0
 800ccbe:	4254      	negs	r4, r2
 800ccc0:	4314      	orrs	r4, r2
 800ccc2:	0c4b      	lsrs	r3, r1, #17
 800ccc4:	0b24      	lsrs	r4, r4, #12
 800ccc6:	045b      	lsls	r3, r3, #17
 800ccc8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cccc:	ea44 0103 	orr.w	r1, r4, r3
 800ccd0:	4b32      	ldr	r3, [pc, #200]	; (800cd9c <rint+0x10c>)
 800ccd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ccd6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	4630      	mov	r0, r6
 800cce0:	4639      	mov	r1, r7
 800cce2:	f7f3 faf3 	bl	80002cc <__adddf3>
 800cce6:	e9cd 0100 	strd	r0, r1, [sp]
 800ccea:	463b      	mov	r3, r7
 800ccec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	f7f3 fae9 	bl	80002c8 <__aeabi_dsub>
 800ccf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccfa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ccfe:	4639      	mov	r1, r7
 800cd00:	ec41 0b10 	vmov	d0, r0, r1
 800cd04:	b003      	add	sp, #12
 800cd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd08:	4a25      	ldr	r2, [pc, #148]	; (800cda0 <rint+0x110>)
 800cd0a:	4132      	asrs	r2, r6
 800cd0c:	ea01 0702 	and.w	r7, r1, r2
 800cd10:	4307      	orrs	r7, r0
 800cd12:	d0f5      	beq.n	800cd00 <rint+0x70>
 800cd14:	0851      	lsrs	r1, r2, #1
 800cd16:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cd1a:	4314      	orrs	r4, r2
 800cd1c:	d00c      	beq.n	800cd38 <rint+0xa8>
 800cd1e:	ea23 0201 	bic.w	r2, r3, r1
 800cd22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd26:	2e13      	cmp	r6, #19
 800cd28:	fa43 f606 	asr.w	r6, r3, r6
 800cd2c:	bf0c      	ite	eq
 800cd2e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cd32:	2400      	movne	r4, #0
 800cd34:	ea42 0306 	orr.w	r3, r2, r6
 800cd38:	4918      	ldr	r1, [pc, #96]	; (800cd9c <rint+0x10c>)
 800cd3a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cd3e:	4622      	mov	r2, r4
 800cd40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd44:	4620      	mov	r0, r4
 800cd46:	4629      	mov	r1, r5
 800cd48:	f7f3 fac0 	bl	80002cc <__adddf3>
 800cd4c:	e9cd 0100 	strd	r0, r1, [sp]
 800cd50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd54:	4622      	mov	r2, r4
 800cd56:	462b      	mov	r3, r5
 800cd58:	f7f3 fab6 	bl	80002c8 <__aeabi_dsub>
 800cd5c:	e7d0      	b.n	800cd00 <rint+0x70>
 800cd5e:	2e33      	cmp	r6, #51	; 0x33
 800cd60:	dd07      	ble.n	800cd72 <rint+0xe2>
 800cd62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd66:	d1cb      	bne.n	800cd00 <rint+0x70>
 800cd68:	ee10 2a10 	vmov	r2, s0
 800cd6c:	f7f3 faae 	bl	80002cc <__adddf3>
 800cd70:	e7c6      	b.n	800cd00 <rint+0x70>
 800cd72:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cd76:	f04f 36ff 	mov.w	r6, #4294967295
 800cd7a:	40d6      	lsrs	r6, r2
 800cd7c:	4230      	tst	r0, r6
 800cd7e:	d0bf      	beq.n	800cd00 <rint+0x70>
 800cd80:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cd84:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cd88:	bf1f      	itttt	ne
 800cd8a:	ea24 0101 	bicne.w	r1, r4, r1
 800cd8e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cd92:	fa44 f202 	asrne.w	r2, r4, r2
 800cd96:	ea41 0402 	orrne.w	r4, r1, r2
 800cd9a:	e7cd      	b.n	800cd38 <rint+0xa8>
 800cd9c:	0800d5d8 	.word	0x0800d5d8
 800cda0:	000fffff 	.word	0x000fffff
 800cda4:	00000000 	.word	0x00000000

0800cda8 <scalbn>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	ec55 4b10 	vmov	r4, r5, d0
 800cdae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	b99a      	cbnz	r2, 800cde0 <scalbn+0x38>
 800cdb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdbc:	4323      	orrs	r3, r4
 800cdbe:	d036      	beq.n	800ce2e <scalbn+0x86>
 800cdc0:	4b39      	ldr	r3, [pc, #228]	; (800cea8 <scalbn+0x100>)
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	ee10 0a10 	vmov	r0, s0
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f7f3 fc35 	bl	8000638 <__aeabi_dmul>
 800cdce:	4b37      	ldr	r3, [pc, #220]	; (800ceac <scalbn+0x104>)
 800cdd0:	429e      	cmp	r6, r3
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	da10      	bge.n	800cdfa <scalbn+0x52>
 800cdd8:	a32b      	add	r3, pc, #172	; (adr r3, 800ce88 <scalbn+0xe0>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	e03a      	b.n	800ce56 <scalbn+0xae>
 800cde0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cde4:	428a      	cmp	r2, r1
 800cde6:	d10c      	bne.n	800ce02 <scalbn+0x5a>
 800cde8:	ee10 2a10 	vmov	r2, s0
 800cdec:	4620      	mov	r0, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7f3 fa6c 	bl	80002cc <__adddf3>
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	e019      	b.n	800ce2e <scalbn+0x86>
 800cdfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cdfe:	460b      	mov	r3, r1
 800ce00:	3a36      	subs	r2, #54	; 0x36
 800ce02:	4432      	add	r2, r6
 800ce04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce08:	428a      	cmp	r2, r1
 800ce0a:	dd08      	ble.n	800ce1e <scalbn+0x76>
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	a120      	add	r1, pc, #128	; (adr r1, 800ce90 <scalbn+0xe8>)
 800ce10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce14:	da1c      	bge.n	800ce50 <scalbn+0xa8>
 800ce16:	a120      	add	r1, pc, #128	; (adr r1, 800ce98 <scalbn+0xf0>)
 800ce18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1c:	e018      	b.n	800ce50 <scalbn+0xa8>
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	dd08      	ble.n	800ce34 <scalbn+0x8c>
 800ce22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce2e:	ec45 4b10 	vmov	d0, r4, r5
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce38:	da19      	bge.n	800ce6e <scalbn+0xc6>
 800ce3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce3e:	429e      	cmp	r6, r3
 800ce40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce44:	dd0a      	ble.n	800ce5c <scalbn+0xb4>
 800ce46:	a112      	add	r1, pc, #72	; (adr r1, 800ce90 <scalbn+0xe8>)
 800ce48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e2      	bne.n	800ce16 <scalbn+0x6e>
 800ce50:	a30f      	add	r3, pc, #60	; (adr r3, 800ce90 <scalbn+0xe8>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	f7f3 fbef 	bl	8000638 <__aeabi_dmul>
 800ce5a:	e7cb      	b.n	800cdf4 <scalbn+0x4c>
 800ce5c:	a10a      	add	r1, pc, #40	; (adr r1, 800ce88 <scalbn+0xe0>)
 800ce5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0b8      	beq.n	800cdd8 <scalbn+0x30>
 800ce66:	a10e      	add	r1, pc, #56	; (adr r1, 800cea0 <scalbn+0xf8>)
 800ce68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce6c:	e7b4      	b.n	800cdd8 <scalbn+0x30>
 800ce6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce72:	3236      	adds	r2, #54	; 0x36
 800ce74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	4b0c      	ldr	r3, [pc, #48]	; (800ceb0 <scalbn+0x108>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	e7e8      	b.n	800ce56 <scalbn+0xae>
 800ce84:	f3af 8000 	nop.w
 800ce88:	c2f8f359 	.word	0xc2f8f359
 800ce8c:	01a56e1f 	.word	0x01a56e1f
 800ce90:	8800759c 	.word	0x8800759c
 800ce94:	7e37e43c 	.word	0x7e37e43c
 800ce98:	8800759c 	.word	0x8800759c
 800ce9c:	fe37e43c 	.word	0xfe37e43c
 800cea0:	c2f8f359 	.word	0xc2f8f359
 800cea4:	81a56e1f 	.word	0x81a56e1f
 800cea8:	43500000 	.word	0x43500000
 800ceac:	ffff3cb0 	.word	0xffff3cb0
 800ceb0:	3c900000 	.word	0x3c900000

0800ceb4 <_getpid>:
 800ceb4:	4b02      	ldr	r3, [pc, #8]	; (800cec0 <_getpid+0xc>)
 800ceb6:	2258      	movs	r2, #88	; 0x58
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	f04f 30ff 	mov.w	r0, #4294967295
 800cebe:	4770      	bx	lr
 800cec0:	20000a44 	.word	0x20000a44

0800cec4 <_kill>:
 800cec4:	4b02      	ldr	r3, [pc, #8]	; (800ced0 <_kill+0xc>)
 800cec6:	2258      	movs	r2, #88	; 0x58
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	f04f 30ff 	mov.w	r0, #4294967295
 800cece:	4770      	bx	lr
 800ced0:	20000a44 	.word	0x20000a44

0800ced4 <_exit>:
 800ced4:	e7fe      	b.n	800ced4 <_exit>
	...

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
